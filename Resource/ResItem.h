#pragma once
#ifndef _RESOURCE_ITEM_H_
#define _RESOURCE_ITEM_H_

#include <Reuben\System\Reuben.h>

enum ItemFilterType
{
	ITEM_FILTER_ALL = 0,
	ITEM_FILTER_TYPE,
	ITEM_FILTER_LUA,
};

struct ItemData
{
	UInt32	item_id;
	UInt8	item_type;
	TCHAR	name[11];
	UInt8	eqType;
	UInt8	color;
	UInt8	rare;
	UInt32	root_id;
	TCHAR	description[65];
	TCHAR	functionDes[65];
	UInt32	g_price;
	UInt32	m_price;
	UInt8	memberUse;
	TCHAR	script[33];
	TCHAR	battleScript[33];
	UInt8	item_unique;
	UInt16	item_TimeLimit;
	UInt8	item_TimeLimitType;
	UInt8	reqSexClass1;
	UInt8	reqSexClass2;
	UInt8	reqFaction;
	UInt16	reqLv;
	UInt8	consume;
	UInt8	questItem;
	UInt8	soulBound;
	UInt8	dumpable;
	UInt8	droppable;
	UInt8	godWeapon;
	UInt8	steal;
	UInt8	useCount;
	UInt8	overlap;
	UInt8	usePlace;
	UInt8	bBuff;
	UInt8	form;
	UInt8	targetType;
	UInt8	target;
	UInt16	stateCaster;
	UInt16	stateTarget;
	UInt16	stateClear;
	UInt8	coolType;
	UInt16	coolTime;
	UInt8	periodType;
	UInt16	period;
	UInt16	nTarget;
	UInt8	restoreType;
	Int16	restore_HP;
	Int16	restore_mHP;
	Int16	restore_SP;
	Int16	restore_mSP;
	Int16	restore_VP;
	Int16	restore_DP;
	Int16	restore_WC;
	Int16	restore_favor;
	UInt16	bagSlot;
	UInt8	eq_baseElement;
	UInt16	eq_maxEndure;
	UInt16	eq_maxUpgrade;
	UInt8	eq_minGem;
	UInt8	eq_maxGem;
	Int16	STA_d;
	Int16	STA_u;
	Int16	SPR_d;
	Int16	SPR_u;
	Int16	STR_d;
	Int16	STR_u;
	Int16	CON_d;
	Int16	CON_u;
	Int16	AGI_d;
	Int16	AGI_u;
	Int16	ATK_d;
	Int16	ATK_u;
	Int16	DEF_d;
	Int16	DEF_u;
	Int16	HIT_d;
	Int16	HIT_u;
	Int16	EVA_d;
	Int16	EVA_u;
	Int16	POW_d;
	Int16	POW_u;
	Int16	SPD_d;
	Int16	SPD_u;
	Int16	maxHP_d;
	Int16	maxHP_u;
	Int16	maxSP_d;
	Int16	maxSP_u;
	Int16	maxVP_d;
	Int16	maxVP_u;
	BYTE	iconLight;
	BYTE	weaponLight;
	TCHAR	icon1[33];
	TCHAR	icon2[33];
	UInt16	icon2_id;
	TCHAR	eq_Outlook1[33];
	TCHAR	eq_Outlook2[33];
	UInt16	eq_Color;
	TCHAR	eq_colorPalette1[33];
	TCHAR	eq_colorPalette2[33];
	TCHAR	eq_colorPalette3[33];
	TCHAR	eq_colorPalette4[33];
	TCHAR	eq_colorPalette5[33];
	TCHAR	eqo1_atk1_sound[33];
	TCHAR	eqo1_atk2_sound[33];
	TCHAR	eqo2_atk1_sound[33];
	TCHAR	eqo2_atk2_sound[33];
	UInt8	sellable;
	UInt8	repair;
	UInt8	Identify;
	TCHAR	effect_Atk[101];
	TCHAR	effect_Hurt[101];
	TCHAR	effect_Spark[101];
	TCHAR	sound_Atk[101];
	TCHAR	sound_Hurt[101];
	TCHAR	sound_Spark[101];
	UInt8	item_GenerateLimit;
    UInt16	item_GenerateLimit_Time;
	UInt16	item_GenerateLimit_Count;
	StlVector<UInt16, ManagedAllocator<UInt16> >	skill_ids;
	UInt32	probability;
	UInt32	itemset_id;
	UInt32  add_friendly;


	ItemData()
		: item_id(C_UINT32(0))
		, item_type(C_UINT8(0))
		, eqType(C_UINT8(0))
		, color(C_UINT8(0))
		, rare(C_UINT8(0))
		, root_id(C_UINT32(0))
		, g_price(C_UINT32(0))
		, m_price(C_UINT32(0))
		, memberUse(C_UINT8(0))
		, item_unique(C_UINT8(0))
		, item_TimeLimit(C_UINT16(0))
		, item_TimeLimitType(C_UINT8(0))
		, reqSexClass1(C_UINT8(0))
		, reqSexClass2(C_UINT8(0))
		, reqFaction(C_UINT8(0))
		, reqLv(C_UINT16(0))
		, consume(C_UINT8(0))
		, questItem(C_UINT8(0))
		, soulBound(C_UINT8(0))
		, dumpable(C_UINT8(0))
		, droppable(C_UINT8(0))
		, godWeapon(C_UINT8(0))
		, steal(C_UINT8(0))
		, useCount(C_UINT8(0))
		, overlap(C_UINT8(0))
		, usePlace(C_UINT8(0))
		, bBuff(C_UINT8(0))
		, form(C_UINT8(0))
		, targetType(C_UINT8(0))
		, target(C_UINT8(0))
		, stateCaster(C_UINT16(0))
		, stateTarget(C_UINT16(0))
		, stateClear(C_UINT16(0))
		, coolType(C_UINT8(0))
		, coolTime(C_UINT16(0))
		, periodType(C_UINT8(0))
		, period(C_UINT16(0))
		, nTarget(C_UINT16(0))
		, restoreType(C_UINT8(0))
		, restore_HP(C_INT16(0))
		, restore_mHP(C_INT16(0))
		, restore_SP(C_INT16(0))
		, restore_mSP(C_INT16(0))
		, restore_VP(C_INT16(0))
		, restore_DP(C_INT16(0))
		, restore_WC(C_INT16(0))
		, restore_favor(C_INT16(0))
		, bagSlot(C_UINT16(0))
		, eq_baseElement(C_UINT8(0))
		, eq_maxEndure(C_UINT16(0))
		, eq_maxUpgrade(C_UINT16(0))
		, eq_minGem(C_UINT8(0))
		, eq_maxGem(C_UINT8(0))
		, STA_d(C_INT16(0))
		, STA_u(C_INT16(0))
		, SPR_d(C_INT16(0))
		, SPR_u(C_INT16(0))
		, STR_d(C_INT16(0))
		, STR_u(C_INT16(0))
		, CON_d(C_INT16(0))
		, CON_u(C_INT16(0))
		, AGI_d(C_INT16(0))
		, AGI_u(C_INT16(0))
		, ATK_d(C_INT16(0))
		, ATK_u(C_INT16(0))
		, DEF_d(C_INT16(0))
		, DEF_u(C_INT16(0))
		, HIT_d(C_INT16(0))
		, HIT_u(C_INT16(0))
		, EVA_d(C_INT16(0))
		, EVA_u(C_INT16(0))
		, POW_d(C_INT16(0))
		, POW_u(C_INT16(0))
		, SPD_d(C_INT16(0))
		, SPD_u(C_INT16(0))
		, maxHP_d(C_INT16(0))
		, maxHP_u(C_INT16(0))
		, maxSP_d(C_INT16(0))
		, maxSP_u(C_INT16(0))
		, maxVP_d(C_INT16(0))
		, maxVP_u(C_INT16(0))
		, iconLight(C_BYTE(0))
		, weaponLight(C_BYTE(0))
		, icon2_id(C_UINT16(0))
		, eq_Color(C_UINT16(0))
		, sellable(C_UINT8(0))
		, repair(C_UINT8(0))
		, Identify(C_UINT8(0))
		, item_GenerateLimit(C_UINT8(0))
		, item_GenerateLimit_Time(C_UINT16(0))
		, item_GenerateLimit_Count(C_UINT16(0))
		, probability(C_UINT32(0))
		, itemset_id(C_UINT32(0))
		, add_friendly(C_UINT32(0))
	{
		ZeroMemory(name, 11*sizeof(TCHAR));
		ZeroMemory(description, 65*sizeof(TCHAR));
		ZeroMemory(functionDes, 65*sizeof(TCHAR));
		ZeroMemory(script, 33*sizeof(TCHAR));
		ZeroMemory(battleScript, 33*sizeof(TCHAR));
		ZeroMemory(icon1, 33*sizeof(TCHAR));
		ZeroMemory(icon2, 33*sizeof(TCHAR));
		ZeroMemory(eq_Outlook1, 33*sizeof(TCHAR));
		ZeroMemory(eq_Outlook2, 33*sizeof(TCHAR));
		ZeroMemory(eq_colorPalette1, 33*sizeof(TCHAR));
		ZeroMemory(eq_colorPalette2, 33*sizeof(TCHAR));
		ZeroMemory(eq_colorPalette3, 33*sizeof(TCHAR));
		ZeroMemory(eq_colorPalette4, 33*sizeof(TCHAR));
		ZeroMemory(eq_colorPalette5, 33*sizeof(TCHAR));
		ZeroMemory(eqo1_atk1_sound, 33*sizeof(TCHAR));
		ZeroMemory(eqo1_atk2_sound, 33*sizeof(TCHAR));
		ZeroMemory(eqo2_atk1_sound, 33*sizeof(TCHAR));
		ZeroMemory(eqo2_atk2_sound, 33*sizeof(TCHAR));
		ZeroMemory(effect_Atk, 101*sizeof(TCHAR));
		ZeroMemory(effect_Hurt, 101*sizeof(TCHAR));
		ZeroMemory(effect_Spark, 101*sizeof(TCHAR));
		ZeroMemory(sound_Atk, 101*sizeof(TCHAR));
		ZeroMemory(sound_Hurt, 101*sizeof(TCHAR));
		ZeroMemory(sound_Spark, 101*sizeof(TCHAR));
	}

	~ItemData()	{}
};

#endif // _RESOURCE_ITEM_H_
