/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AttriStruct swig_types[0]
#define SWIGTYPE_p_AttriStruct2 swig_types[1]
#define SWIGTYPE_p_BYTE swig_types[2]
#define SWIGTYPE_p_BatActorLinkLst swig_types[3]
#define SWIGTYPE_p_BuffData swig_types[4]
#define SWIGTYPE_p_CBatActor swig_types[5]
#define SWIGTYPE_p_CBatCharacter swig_types[6]
#define SWIGTYPE_p_CBatMob swig_types[7]
#define SWIGTYPE_p_CBattle swig_types[8]
#define SWIGTYPE_p_CCharacter swig_types[9]
#define SWIGTYPE_p_CGuild swig_types[10]
#define SWIGTYPE_p_CInstance swig_types[11]
#define SWIGTYPE_p_CItem swig_types[12]
#define SWIGTYPE_p_CItemBag swig_types[13]
#define SWIGTYPE_p_CMap swig_types[14]
#define SWIGTYPE_p_CMapActor swig_types[15]
#define SWIGTYPE_p_CMapNPC swig_types[16]
#define SWIGTYPE_p_CPartner swig_types[17]
#define SWIGTYPE_p_CPartnerGroup swig_types[18]
#define SWIGTYPE_p_CParty swig_types[19]
#define SWIGTYPE_p_CPet swig_types[20]
#define SWIGTYPE_p_CPetGroup swig_types[21]
#define SWIGTYPE_p_CQuestLog swig_types[22]
#define SWIGTYPE_p_CQuestSystem swig_types[23]
#define SWIGTYPE_p_CQuestType swig_types[24]
#define SWIGTYPE_p_CRelationSystem swig_types[25]
#define SWIGTYPE_p_CScriptSystem swig_types[26]
#define SWIGTYPE_p_CTrading swig_types[27]
#define SWIGTYPE_p_CWorldEvent swig_types[28]
#define SWIGTYPE_p_DWORD swig_types[29]
#define SWIGTYPE_p_ExtractedBuffData swig_types[30]
#define SWIGTYPE_p_ItemData swig_types[31]
#define SWIGTYPE_p_RPCNetID swig_types[32]
#define SWIGTYPE_p_SkillData swig_types[33]
#define SWIGTYPE_p_StartCharData swig_types[34]
#define SWIGTYPE_p_String swig_types[35]
#define SWIGTYPE_p_TCHAR swig_types[36]
#define SWIGTYPE_p_UInt32Vector swig_types[37]
#define SWIGTYPE_p_actorlist swig_types[38]
#define SWIGTYPE_p_int swig_types[39]
#define SWIGTYPE_p_short swig_types[40]
#define SWIGTYPE_p_signed_char swig_types[41]
#define SWIGTYPE_p_unsigned_char swig_types[42]
#define SWIGTYPE_p_unsigned_int swig_types[43]
#define SWIGTYPE_p_unsigned_short swig_types[44]
static swig_type_info *swig_types[46];
static swig_module_info swig_module = {swig_types, 45, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "LuaI"
#define SWIG_init      luaopen_LuaI
#define SWIG_init_user luaopen_LuaI_user

#define SWIG_LUACODE   luaopen_LuaI_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "Common.h"
#include "Common/common_binary.h"
#include "Common/StateCode.h"
#include "Common/BattleCode.h"
#include "Stub/Logic/Map.h"
#include "Stub/Logic/MapActor.h"
#include "Stub/Logic/Character.h"
#include "Stub/Logic/MapNPC.h"
#include "Stub/Logic/Item.h"
#include "Stub/Logic/ItemBag.h"
#include "Stub/Logic/Party.h"
#include "Stub/Logic/Partner.h"
#include "Stub/Logic/PartnerGroup.h"
#include "Stub/Logic/Pet.h"
#include "Stub/Logic/PetGroup.h"
#include "Stub/Logic/BatActor.h"
#include "Stub/Logic/BatMob.h"
#include "Stub/Logic/BatCharacter.h"
#include "Stub/Logic/Battle.h"
#include "Stub/Logic/QuestLog.h"
#include "Stub/Logic/QuestType.h"
#include "Stub/Logic/QuestSystem.h"
#include "Stub/Logic/ScriptSystem.h"
#include "Proxy/Logic/WorldEvent.h"
#include "Proxy/Logic/Guild.h"
#include "MapService/Instance.h"
#include "Resource/ResSkill.h"
#include "Resource/ResCharacter.h"
#include "Resource/ResBuff.h"
#include "Resource/ResItem.h"
#include "Stub/Logic/RelationSystem.h"

#pragma warning(disable : 4244 4101 4102 4800)

#define  DEF_LuaPush(_type_)								\
void LuaPush(lua_State *L, _type_ *ptr)						\
{															\
	SWIG_NewPointerObj(L, ptr, SWIGTYPE_p_##_type_, 0);		\
}

int Div(int a, int b)
{
	return (a / b);
}

inline UInt32 DivUInt32(UInt32 a, UInt32 b)
{
	return (a / b);
}

inline bool LAnd(bool a, bool b)
{
	return (a && b);
}

inline bool LOr(bool a, bool b)
{
	return (a || b);
}

DEF_LuaPush(BatActorLinkLst)
DEF_LuaPush(AttriStruct)
DEF_LuaPush(AttriStruct2)
DEF_LuaPush(ExtractedBuffData)
DEF_LuaPush(SkillData)
DEF_LuaPush(ItemData)
DEF_LuaPush(StartCharData)
DEF_LuaPush(actorlist)

DEF_LuaPush(CMap)
DEF_LuaPush(CMapActor)
DEF_LuaPush(CCharacter)
DEF_LuaPush(CMapNPC)
DEF_LuaPush(CItemBag)
DEF_LuaPush(CItem)
DEF_LuaPush(CParty)
DEF_LuaPush(CPartner)
DEF_LuaPush(CPartnerGroup)
DEF_LuaPush(CPet)
DEF_LuaPush(CPetGroup)
DEF_LuaPush(CScriptSystem)
DEF_LuaPush(CQuestLog)
DEF_LuaPush(CQuestType)
DEF_LuaPush(CQuestSystem)
DEF_LuaPush(CBatMob)
DEF_LuaPush(CBatCharacter)
DEF_LuaPush(CBattle)
DEF_LuaPush(CWorldEvent)
DEF_LuaPush(CInstance)
DEF_LuaPush(CRelationSystem)

// define LuaPush for CBatActor
void LuaPush(lua_State *L, CBatActor *ptr)
{
	if (ptr == NULL)
		lua_pushnil(L);
	else if (ptr->GetClassID() == BatCharacter_CLASSID)
		SWIG_NewPointerObj(L, ptr, SWIGTYPE_p_CBatCharacter, 0);
	else if (ptr->GetClassID() == BatMob_CLASSID)
		SWIG_NewPointerObj(L, ptr, SWIGTYPE_p_CBatMob, 0);
	else
		lua_pushnil(L);
}

// define LuaPush for NetObject
void LuaPush(lua_State *L, NetObject *ptr)
{
	if (ptr == NULL)
		lua_pushnil(L);
	else if (ptr->GetClassID() == Character_CLASSID)
		SWIG_NewPointerObj(L, ptr, SWIGTYPE_p_CCharacter, 0);
	else if (ptr->GetClassID() == Partner_CLASSID)
		SWIG_NewPointerObj(L, ptr, SWIGTYPE_p_CPartner, 0);
	else if (ptr->GetClassID() == Pet_CLASSID)
		SWIG_NewPointerObj(L, ptr, SWIGTYPE_p_CPet, 0);
	else if (ptr->GetClassID() == BatCharacter_CLASSID)
		SWIG_NewPointerObj(L, ptr, SWIGTYPE_p_CBatCharacter, 0);
	else if (ptr->GetClassID() == BatMob_CLASSID)
		SWIG_NewPointerObj(L, ptr, SWIGTYPE_p_CBatMob, 0);
	else
		lua_pushnil(L);
}

void HelloWorld();
int GetGameTime(int mode);
UInt32 GetServiceTime();
void SetTempResult(double result);
double GetTempResult();
PCSTRINGA GetNpcName(UInt32 npc_id);
PCSTRINGA GetMobName(UInt32 mob_id);
PCSTRINGA GetMapName(UInt16 map_id);
PCSTRINGA GetItemName(UInt32 item_id);
CMap* GetMap(UInt16 map_id);
int GetGameTime(int mode);
PCSTRINGA ConvertANSII(PCSTRINGA src);
PCSTRINGA ConvertUTF8(const String &src);
const String& ConvertString(PCSTRINGA src);
const BuffData* GetBuffData(UInt16 buff_id);
UInt8 GetRealDay(UInt32 time = 0);
UInt8 GetRealWDay(UInt32 time = 0);
UInt8 GetRealMonth(UInt32 time = 0);
UInt16 GetRealYear(UInt32 time = 0);
UInt8 GetRealHour(UInt32 time = 0);
UInt8 GetRealMinute(UInt32 time = 0);
UInt8 GetGuildWarStatus();
void QuestionPrepare();
void QuestionStart();
const ItemData* GetItemCsvData(UInt32 item_id);
CWorldEvent* GetWorldEvent(UInt16 eventId);
void LogMessage(int level, PCSTRINGA msg);

void GuildWarPrepare();
void GuildWarStart();
void GuildWarEndContinue();
void GuildWarEndAll();
void GuildWarGenGroup();
void GuildWarSendGroupRumor();

void IncognitoPKStart();
void IncognitoPKEnd();
void InIncognitoPkLstOne(UInt32 charID);
void InIncognitoPkLstTwo(UInt32 charID);
bool isIncognitoPkTimeOver();
void RandomIncognitoPKBox(UInt16 map_id,UInt8 boxType);


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

SWIGINTERN char const *CMap_GetName(CMap *self){ return ConvertUTF8(self->GetName()); }
SWIGINTERN UInt8 CMapActor_GetUserType(CMapActor *self){ return 0; }
SWIGINTERN UInt8 CMapActor_GetJob(CMapActor *self){ return self->GetCclass(); }
SWIGINTERN char const *CMapActor_GetName(CMapActor *self){ return ConvertUTF8(self->GetNickName()); }
SWIGINTERN UInt8 CCharacter_GetUserType(CCharacter *self){ return 1; }
SWIGINTERN char const *CCharacter_GetTitle__SWIG_0(CCharacter *self){ return ConvertUTF8(self->GetTitle()); }
SWIGINTERN char const *CCharacter_GetTitle__SWIG_1(CCharacter *self,UInt16 title_id){ return ConvertUTF8(self->GetTitle(title_id)); }
SWIGINTERN char const *CCharacter_GetPartnerName(CCharacter *self){ return ConvertUTF8(self->GetPartnerName()); }
SWIGINTERN char const *CCharacter_GetPetName(CCharacter *self){ return ConvertUTF8(self->GetPetName()); }
SWIGINTERN char const *CCharacter_GetCharNameLink(CCharacter *self){ return ConvertUTF8(self->GetCharNameLink()); }
SWIGINTERN char const *CCharacter_GetCharPartnerNameLink__SWIG_0(CCharacter *self,UInt32 partnerID,UInt16 partnerIndex=-1){ return ConvertUTF8(self->GetCharPartnerNameLink(partnerID,partnerIndex));}
SWIGINTERN char const *CCharacter_GetCharPetNameLink__SWIG_0(CCharacter *self,UInt32 petID,UInt16 petIndex=-1){ return ConvertUTF8(self->GetCharPetNameLink(petID,petIndex));}
SWIGINTERN char const *CCharacter_GetCharItemNameLink__SWIG_0(CCharacter *self,UInt32 itemID,UInt8 itemIndex=-1){ return ConvertUTF8(self->GetCharItemNameLink(itemID,itemIndex));}
SWIGINTERN void CCharacter_ChangeHp(CCharacter *self,Int change){ self->ChangeHP(change); }
SWIGINTERN void CCharacter_ChangeVp(CCharacter *self,Int change){ self->ChangeVP(change); }
SWIGINTERN void CCharacter_ChangeMHp(CCharacter *self,Int change){ self->ChangeMHP(change); }
SWIGINTERN void CCharacter_ChangeSp(CCharacter *self,Int change){ self->ChangeSP(change); }
SWIGINTERN void CCharacter_ChangeMSp(CCharacter *self,Int change){ self->ChangeMSP(change); }
SWIGINTERN void CCharacter_ChangeDp(CCharacter *self,Int change){ self->ChangeDP(change); }
SWIGINTERN void CCharacter_ChangeWc(CCharacter *self,Int change){ self->ChangeWC(change); }
SWIGINTERN bool CCharacter_IsBuffExist(CCharacter *self,UInt16 buff_id){ return self->HasBuff(buff_id); }
SWIGINTERN UInt8 CItemBag_GetUserType(CItemBag *self){ return 1; }
SWIGINTERN CItem *CItemBag_AddRandItem(CItemBag *self,char const *csvFile){
		return self->AddRandItem(ConvertString(csvFile));
	}
SWIGINTERN UInt8 CPartner_GetUserType(CPartner *self){ return 2; }
SWIGINTERN char const *CPartner_GetName(CPartner *self){ return ConvertUTF8(self->GetRaname()); }
SWIGINTERN bool CPartner_IsBuffExist(CPartner *self,UInt16 buff_id){ return self->HasBuff(buff_id); }
SWIGINTERN UInt32 CQuestLog_GetStartNpcId(CQuestLog *self){ return self->GetBeginNpc(); }
SWIGINTERN UInt16 CQuestLog_GetStartMapId(CQuestLog *self){ return self->GetBeginNpc_Map(); }
SWIGINTERN UInt32 CQuestLog_GetEndNpcId(CQuestLog *self){ return self->GetFinishNpc(); }
SWIGINTERN UInt16 CQuestLog_GetEndMapId(CQuestLog *self){ return self->GetFinishNpc_Map(); }
SWIGINTERN void CBatActor_ChangeHp__SWIG_0(CBatActor *self,Int change,bool show=true){ self->ChangeHP(change, show); }
SWIGINTERN void CBatActor_ChangeMHp__SWIG_0(CBatActor *self,Int change,bool show=true){ self->ChangeMHP(change, show); }
SWIGINTERN void CBatActor_ChangeSp__SWIG_0(CBatActor *self,Int change,bool show=true){ self->ChangeSP(change, show); }
SWIGINTERN void CBatActor_ChangeMSp__SWIG_0(CBatActor *self,Int change,bool show=true){ self->ChangeMSP(change, show); }
SWIGINTERN void CBatActor_ChangeDp__SWIG_0(CBatActor *self,Int change,bool show=true){ self->ChangeDP(change, show); }
SWIGINTERN void CBatActor_ChangeWc__SWIG_0(CBatActor *self,Int change,bool show=true){ self->ChangeWC(change, show); }
SWIGINTERN bool CBatActor_IsBuffExist(CBatActor *self,UInt16 buff_id){ return self->HasBuff(buff_id); }
SWIGINTERN CBatMob *CBatActor_ToBatMob(CBatActor *self){ return self->m_pMob; }
SWIGINTERN CBatCharacter *CBatActor_ToBatChar(CBatActor *self){ return self->m_pBatChar; }
SWIGINTERN UInt8 CBattle_GetCurTurn(CBattle *self){ return self->m_curTurn; }
SWIGINTERN char const *CGuild_GetName(CGuild *self){ return ConvertUTF8(self->GetName()); }
SWIGINTERN char const *CGuild_GetAim(CGuild *self){ return ConvertUTF8(self->GetAim()); }
SWIGINTERN char const *CGuild_GetRule(CGuild *self){ return ConvertUTF8(self->GetRule()); }
SWIGINTERN char const *CGuild_GetCreator(CGuild *self){ return ConvertUTF8(self->GetCreator()); }
SWIGINTERN char const *CGuild_GetMaster(CGuild *self){ return ConvertUTF8(self->GetMaster()); }
SWIGINTERN char const *CGuild_GetSecMasterName(CGuild *self){ return ConvertUTF8(self->GetSecMasterName()); }
SWIGINTERN char const *CRelationSystem_GetSiblingTitlePrefix(CRelationSystem *self){ return ConvertUTF8(self->GetSiblingTitlePrefix()); }
SWIGINTERN UInt8 CPet_GetUserType(CPet *self){ return 3; }
SWIGINTERN char const *CPet_GetName(CPet *self){ return ConvertUTF8(self->GetName()); }
SWIGINTERN UInt8 CQuestSystem_GetUserType(CQuestSystem *self){ return 3; }
SWIGINTERN char const *CQuestSystem_GetTypeName(CQuestSystem *self,UInt16 quest_id){
		return ConvertUTF8(self->GetTypeName(quest_id));
	}
SWIGINTERN char const *CWorldEvent_GetScript(CWorldEvent *self){ return ConvertUTF8(self->GetScript()); }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_HelloWorld(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("HelloWorld",0,0)
  HelloWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetGameTime(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("GetGameTime",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetGameTime",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)GetGameTime(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetServiceTime(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 result;
  
  SWIG_check_num_args("GetServiceTime",0,0)
  result = (UInt32)GetServiceTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetTempResult(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  
  SWIG_check_num_args("SetTempResult",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetTempResult",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  SetTempResult(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetTempResult(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("GetTempResult",0,0)
  result = (double)GetTempResult();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetNpcName(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetNpcName",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetNpcName",1,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt32)lua_tonumber(L, 1);
  result = (char *)GetNpcName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMobName(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetMobName",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetMobName",1,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt32)lua_tonumber(L, 1);
  result = (char *)GetMobName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMapName(lua_State* L) {
  int SWIG_arg = 0;
  UInt16 arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetMapName",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetMapName",1,"UInt16");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt16)lua_tonumber(L, 1);
  result = (char *)GetMapName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetItemName(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetItemName",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetItemName",1,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt32)lua_tonumber(L, 1);
  result = (char *)GetItemName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMap(lua_State* L) {
  int SWIG_arg = 0;
  UInt16 arg1 ;
  CMap *result = 0 ;
  
  SWIG_check_num_args("GetMap",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetMap",1,"UInt16");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt16)lua_tonumber(L, 1);
  result = (CMap *)GetMap(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CMap,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertANSII(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("ConvertANSII",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ConvertANSII",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)ConvertANSII((char const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetBuffData(lua_State* L) {
  int SWIG_arg = 0;
  UInt16 arg1 ;
  BuffData *result = 0 ;
  
  SWIG_check_num_args("GetBuffData",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetBuffData",1,"UInt16");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt16)lua_tonumber(L, 1);
  result = (BuffData *)GetBuffData(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BuffData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealDay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 arg1 ;
  UInt8 result;
  
  SWIG_check_num_args("GetRealDay",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetRealDay",1,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt32)lua_tonumber(L, 1);
  result = (UInt8)GetRealDay(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealDay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UInt8 result;
  
  SWIG_check_num_args("GetRealDay",0,0)
  result = (UInt8)GetRealDay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealDay(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_GetRealDay__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_GetRealDay__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GetRealDay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GetRealDay(UInt32)\n"
    "    GetRealDay()\n");
  lua_error(L);return 0;
}


static int _wrap_GetRealWDay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 arg1 ;
  UInt8 result;
  
  SWIG_check_num_args("GetRealWDay",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetRealWDay",1,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt32)lua_tonumber(L, 1);
  result = (UInt8)GetRealWDay(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealWDay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UInt8 result;
  
  SWIG_check_num_args("GetRealWDay",0,0)
  result = (UInt8)GetRealWDay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealWDay(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_GetRealWDay__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_GetRealWDay__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GetRealWDay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GetRealWDay(UInt32)\n"
    "    GetRealWDay()\n");
  lua_error(L);return 0;
}


static int _wrap_GetRealMonth__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 arg1 ;
  UInt8 result;
  
  SWIG_check_num_args("GetRealMonth",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetRealMonth",1,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt32)lua_tonumber(L, 1);
  result = (UInt8)GetRealMonth(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealMonth__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UInt8 result;
  
  SWIG_check_num_args("GetRealMonth",0,0)
  result = (UInt8)GetRealMonth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealMonth(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_GetRealMonth__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_GetRealMonth__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GetRealMonth'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GetRealMonth(UInt32)\n"
    "    GetRealMonth()\n");
  lua_error(L);return 0;
}


static int _wrap_GetRealYear__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 arg1 ;
  UInt16 result;
  
  SWIG_check_num_args("GetRealYear",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetRealYear",1,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt32)lua_tonumber(L, 1);
  result = (UInt16)GetRealYear(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealYear__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UInt16 result;
  
  SWIG_check_num_args("GetRealYear",0,0)
  result = (UInt16)GetRealYear();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealYear(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_GetRealYear__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_GetRealYear__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GetRealYear'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GetRealYear(UInt32)\n"
    "    GetRealYear()\n");
  lua_error(L);return 0;
}


static int _wrap_GetRealHour__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 arg1 ;
  UInt8 result;
  
  SWIG_check_num_args("GetRealHour",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetRealHour",1,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt32)lua_tonumber(L, 1);
  result = (UInt8)GetRealHour(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealHour__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UInt8 result;
  
  SWIG_check_num_args("GetRealHour",0,0)
  result = (UInt8)GetRealHour();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealHour(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_GetRealHour__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_GetRealHour__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GetRealHour'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GetRealHour(UInt32)\n"
    "    GetRealHour()\n");
  lua_error(L);return 0;
}


static int _wrap_GetRealMinute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 arg1 ;
  UInt8 result;
  
  SWIG_check_num_args("GetRealMinute",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetRealMinute",1,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt32)lua_tonumber(L, 1);
  result = (UInt8)GetRealMinute(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealMinute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UInt8 result;
  
  SWIG_check_num_args("GetRealMinute",0,0)
  result = (UInt8)GetRealMinute();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRealMinute(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_GetRealMinute__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_GetRealMinute__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GetRealMinute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GetRealMinute(UInt32)\n"
    "    GetRealMinute()\n");
  lua_error(L);return 0;
}


static int _wrap_GetGuildWarStatus(lua_State* L) {
  int SWIG_arg = 0;
  UInt8 result;
  
  SWIG_check_num_args("GetGuildWarStatus",0,0)
  result = (UInt8)GetGuildWarStatus();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QuestionPrepare(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("QuestionPrepare",0,0)
  QuestionPrepare();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QuestionStart(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("QuestionStart",0,0)
  QuestionStart();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GuildWarPrepare(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("GuildWarPrepare",0,0)
  GuildWarPrepare();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GuildWarStart(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("GuildWarStart",0,0)
  GuildWarStart();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GuildWarEndContinue(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("GuildWarEndContinue",0,0)
  GuildWarEndContinue();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GuildWarEndAll(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("GuildWarEndAll",0,0)
  GuildWarEndAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GuildWarGenGroup(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("GuildWarGenGroup",0,0)
  GuildWarGenGroup();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GuildWarSendGroupRumor(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("GuildWarSendGroupRumor",0,0)
  GuildWarSendGroupRumor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetItemCsvData(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 arg1 ;
  ItemData *result = 0 ;
  
  SWIG_check_num_args("GetItemCsvData",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetItemCsvData",1,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt32)lua_tonumber(L, 1);
  result = (ItemData *)GetItemCsvData(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ItemData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWorldEvent(lua_State* L) {
  int SWIG_arg = 0;
  UInt16 arg1 ;
  CWorldEvent *result = 0 ;
  
  SWIG_check_num_args("GetWorldEvent",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetWorldEvent",1,"UInt16");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt16)lua_tonumber(L, 1);
  result = (CWorldEvent *)GetWorldEvent(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CWorldEvent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogMessage(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("LogMessage",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LogMessage",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LogMessage",2,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  LogMessage(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IncognitoPKStart(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("IncognitoPKStart",0,0)
  IncognitoPKStart();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IncognitoPKEnd(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("IncognitoPKEnd",0,0)
  IncognitoPKEnd();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InIncognitoPkLstOne(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 arg1 ;
  
  SWIG_check_num_args("InIncognitoPkLstOne",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("InIncognitoPkLstOne",1,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt32)lua_tonumber(L, 1);
  InIncognitoPkLstOne(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InIncognitoPkLstTwo(lua_State* L) {
  int SWIG_arg = 0;
  UInt32 arg1 ;
  
  SWIG_check_num_args("InIncognitoPkLstTwo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("InIncognitoPkLstTwo",1,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt32)lua_tonumber(L, 1);
  InIncognitoPkLstTwo(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isIncognitoPkTimeOver(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("isIncognitoPkTimeOver",0,0)
  result = (bool)isIncognitoPkTimeOver();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomIncognitoPKBox(lua_State* L) {
  int SWIG_arg = 0;
  UInt16 arg1 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("RandomIncognitoPKBox",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RandomIncognitoPKBox",1,"UInt16");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RandomIncognitoPKBox",2,"UInt8");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt16)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  RandomIncognitoPKBox(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_GetAtk(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct::GetAtk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::GetAtk",1,"AttriStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_GetAtk",1,SWIGTYPE_p_AttriStruct);
  }
  
  result = (int)(arg1)->GetAtk();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_GetDef(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct::GetDef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::GetDef",1,"AttriStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_GetDef",1,SWIGTYPE_p_AttriStruct);
  }
  
  result = (int)(arg1)->GetDef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_GetHit(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct::GetHit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::GetHit",1,"AttriStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_GetHit",1,SWIGTYPE_p_AttriStruct);
  }
  
  result = (int)(arg1)->GetHit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_GetEva(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct::GetEva",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::GetEva",1,"AttriStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_GetEva",1,SWIGTYPE_p_AttriStruct);
  }
  
  result = (int)(arg1)->GetEva();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_GetPow(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct::GetPow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::GetPow",1,"AttriStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_GetPow",1,SWIGTYPE_p_AttriStruct);
  }
  
  result = (int)(arg1)->GetPow();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_GetSpd(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct::GetSpd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::GetSpd",1,"AttriStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_GetSpd",1,SWIGTYPE_p_AttriStruct);
  }
  
  result = (int)(arg1)->GetSpd();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_GetMaxHp(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct::GetMaxHp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::GetMaxHp",1,"AttriStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_GetMaxHp",1,SWIGTYPE_p_AttriStruct);
  }
  
  result = (int)(arg1)->GetMaxHp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_GetMaxSp(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct::GetMaxSp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::GetMaxSp",1,"AttriStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_GetMaxSp",1,SWIGTYPE_p_AttriStruct);
  }
  
  result = (int)(arg1)->GetMaxSp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_GetMaxDp(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct::GetMaxDp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::GetMaxDp",1,"AttriStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_GetMaxDp",1,SWIGTYPE_p_AttriStruct);
  }
  
  result = (int)(arg1)->GetMaxDp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_GetMaxWc(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct::GetMaxWc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::GetMaxWc",1,"AttriStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_GetMaxWc",1,SWIGTYPE_p_AttriStruct);
  }
  
  result = (int)(arg1)->GetMaxWc();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_SetAtk(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct::SetAtk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::SetAtk",1,"AttriStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct::SetAtk",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_SetAtk",1,SWIGTYPE_p_AttriStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetAtk(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_SetDef(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct::SetDef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::SetDef",1,"AttriStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct::SetDef",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_SetDef",1,SWIGTYPE_p_AttriStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetDef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_SetHit(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct::SetHit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::SetHit",1,"AttriStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct::SetHit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_SetHit",1,SWIGTYPE_p_AttriStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetHit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_SetEva(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct::SetEva",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::SetEva",1,"AttriStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct::SetEva",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_SetEva",1,SWIGTYPE_p_AttriStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetEva(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_SetPow(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct::SetPow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::SetPow",1,"AttriStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct::SetPow",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_SetPow",1,SWIGTYPE_p_AttriStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetPow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_SetSpd(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct::SetSpd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::SetSpd",1,"AttriStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct::SetSpd",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_SetSpd",1,SWIGTYPE_p_AttriStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetSpd(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_SetMaxHp(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct::SetMaxHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::SetMaxHp",1,"AttriStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct::SetMaxHp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_SetMaxHp",1,SWIGTYPE_p_AttriStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetMaxHp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_SetMaxSp(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct::SetMaxSp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::SetMaxSp",1,"AttriStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct::SetMaxSp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_SetMaxSp",1,SWIGTYPE_p_AttriStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetMaxSp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_SetMaxDp(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct::SetMaxDp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::SetMaxDp",1,"AttriStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct::SetMaxDp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_SetMaxDp",1,SWIGTYPE_p_AttriStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetMaxDp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct_SetMaxWc(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *arg1 = (AttriStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct::SetMaxWc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct::SetMaxWc",1,"AttriStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct::SetMaxWc",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct,0))){
    SWIG_fail_ptr("AttriStruct_SetMaxWc",1,SWIGTYPE_p_AttriStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetMaxWc(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AttriStruct(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct *result = 0 ;
  
  SWIG_check_num_args("AttriStruct::AttriStruct",0,0)
  result = (AttriStruct *)new AttriStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttriStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AttriStruct(void *obj) {
AttriStruct *arg1 = (AttriStruct *) obj;
delete arg1;
}
static swig_lua_method swig_AttriStruct_methods[] = {
    {"GetAtk", _wrap_AttriStruct_GetAtk}, 
    {"GetDef", _wrap_AttriStruct_GetDef}, 
    {"GetHit", _wrap_AttriStruct_GetHit}, 
    {"GetEva", _wrap_AttriStruct_GetEva}, 
    {"GetPow", _wrap_AttriStruct_GetPow}, 
    {"GetSpd", _wrap_AttriStruct_GetSpd}, 
    {"GetMaxHp", _wrap_AttriStruct_GetMaxHp}, 
    {"GetMaxSp", _wrap_AttriStruct_GetMaxSp}, 
    {"GetMaxDp", _wrap_AttriStruct_GetMaxDp}, 
    {"GetMaxWc", _wrap_AttriStruct_GetMaxWc}, 
    {"SetAtk", _wrap_AttriStruct_SetAtk}, 
    {"SetDef", _wrap_AttriStruct_SetDef}, 
    {"SetHit", _wrap_AttriStruct_SetHit}, 
    {"SetEva", _wrap_AttriStruct_SetEva}, 
    {"SetPow", _wrap_AttriStruct_SetPow}, 
    {"SetSpd", _wrap_AttriStruct_SetSpd}, 
    {"SetMaxHp", _wrap_AttriStruct_SetMaxHp}, 
    {"SetMaxSp", _wrap_AttriStruct_SetMaxSp}, 
    {"SetMaxDp", _wrap_AttriStruct_SetMaxDp}, 
    {"SetMaxWc", _wrap_AttriStruct_SetMaxWc}, 
    {0,0}
};
static swig_lua_attribute swig_AttriStruct_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_AttriStruct_bases[] = {0};
static const char *swig_AttriStruct_base_names[] = {0};
static swig_lua_class _wrap_class_AttriStruct = { "AttriStruct", &SWIGTYPE_p_AttriStruct,_wrap_new_AttriStruct, swig_delete_AttriStruct, swig_AttriStruct_methods, swig_AttriStruct_attributes, swig_AttriStruct_bases, swig_AttriStruct_base_names };

static int _wrap_AttriStruct2_GetSta(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct2 *arg1 = (AttriStruct2 *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct2::GetSta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct2::GetSta",1,"AttriStruct2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct2,0))){
    SWIG_fail_ptr("AttriStruct2_GetSta",1,SWIGTYPE_p_AttriStruct2);
  }
  
  result = (int)(arg1)->GetSta();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct2_GetSpr(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct2 *arg1 = (AttriStruct2 *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct2::GetSpr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct2::GetSpr",1,"AttriStruct2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct2,0))){
    SWIG_fail_ptr("AttriStruct2_GetSpr",1,SWIGTYPE_p_AttriStruct2);
  }
  
  result = (int)(arg1)->GetSpr();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct2_GetStr(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct2 *arg1 = (AttriStruct2 *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct2::GetStr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct2::GetStr",1,"AttriStruct2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct2,0))){
    SWIG_fail_ptr("AttriStruct2_GetStr",1,SWIGTYPE_p_AttriStruct2);
  }
  
  result = (int)(arg1)->GetStr();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct2_GetCon(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct2 *arg1 = (AttriStruct2 *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct2::GetCon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct2::GetCon",1,"AttriStruct2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct2,0))){
    SWIG_fail_ptr("AttriStruct2_GetCon",1,SWIGTYPE_p_AttriStruct2);
  }
  
  result = (int)(arg1)->GetCon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct2_GetAgi(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct2 *arg1 = (AttriStruct2 *) 0 ;
  int result;
  
  SWIG_check_num_args("AttriStruct2::GetAgi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct2::GetAgi",1,"AttriStruct2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct2,0))){
    SWIG_fail_ptr("AttriStruct2_GetAgi",1,SWIGTYPE_p_AttriStruct2);
  }
  
  result = (int)(arg1)->GetAgi();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct2_SetSta(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct2 *arg1 = (AttriStruct2 *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct2::SetSta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct2::SetSta",1,"AttriStruct2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct2::SetSta",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct2,0))){
    SWIG_fail_ptr("AttriStruct2_SetSta",1,SWIGTYPE_p_AttriStruct2);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetSta(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct2_SetSpr(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct2 *arg1 = (AttriStruct2 *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct2::SetSpr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct2::SetSpr",1,"AttriStruct2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct2::SetSpr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct2,0))){
    SWIG_fail_ptr("AttriStruct2_SetSpr",1,SWIGTYPE_p_AttriStruct2);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetSpr(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct2_SetStr(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct2 *arg1 = (AttriStruct2 *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct2::SetStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct2::SetStr",1,"AttriStruct2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct2::SetStr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct2,0))){
    SWIG_fail_ptr("AttriStruct2_SetStr",1,SWIGTYPE_p_AttriStruct2);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetStr(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct2_SetCon(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct2 *arg1 = (AttriStruct2 *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct2::SetCon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct2::SetCon",1,"AttriStruct2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct2::SetCon",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct2,0))){
    SWIG_fail_ptr("AttriStruct2_SetCon",1,SWIGTYPE_p_AttriStruct2);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetCon(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttriStruct2_SetAgi(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct2 *arg1 = (AttriStruct2 *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AttriStruct2::SetAgi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttriStruct2::SetAgi",1,"AttriStruct2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AttriStruct2::SetAgi",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AttriStruct2,0))){
    SWIG_fail_ptr("AttriStruct2_SetAgi",1,SWIGTYPE_p_AttriStruct2);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetAgi(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AttriStruct2(lua_State* L) {
  int SWIG_arg = 0;
  AttriStruct2 *result = 0 ;
  
  SWIG_check_num_args("AttriStruct2::AttriStruct2",0,0)
  result = (AttriStruct2 *)new AttriStruct2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AttriStruct2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AttriStruct2(void *obj) {
AttriStruct2 *arg1 = (AttriStruct2 *) obj;
delete arg1;
}
static swig_lua_method swig_AttriStruct2_methods[] = {
    {"GetSta", _wrap_AttriStruct2_GetSta}, 
    {"GetSpr", _wrap_AttriStruct2_GetSpr}, 
    {"GetStr", _wrap_AttriStruct2_GetStr}, 
    {"GetCon", _wrap_AttriStruct2_GetCon}, 
    {"GetAgi", _wrap_AttriStruct2_GetAgi}, 
    {"SetSta", _wrap_AttriStruct2_SetSta}, 
    {"SetSpr", _wrap_AttriStruct2_SetSpr}, 
    {"SetStr", _wrap_AttriStruct2_SetStr}, 
    {"SetCon", _wrap_AttriStruct2_SetCon}, 
    {"SetAgi", _wrap_AttriStruct2_SetAgi}, 
    {0,0}
};
static swig_lua_attribute swig_AttriStruct2_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_AttriStruct2_bases[] = {0};
static const char *swig_AttriStruct2_base_names[] = {0};
static swig_lua_class _wrap_class_AttriStruct2 = { "AttriStruct2", &SWIGTYPE_p_AttriStruct2,_wrap_new_AttriStruct2, swig_delete_AttriStruct2, swig_AttriStruct2_methods, swig_AttriStruct2_attributes, swig_AttriStruct2_bases, swig_AttriStruct2_base_names };

static int _wrap_ExtractedBuffData_GetBuffID(lua_State* L) {
  int SWIG_arg = 0;
  ExtractedBuffData *arg1 = (ExtractedBuffData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ExtractedBuffData::GetBuffID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExtractedBuffData::GetBuffID",1,"ExtractedBuffData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExtractedBuffData,0))){
    SWIG_fail_ptr("ExtractedBuffData_GetBuffID",1,SWIGTYPE_p_ExtractedBuffData);
  }
  
  result = (UInt16)(arg1)->GetBuffID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExtractedBuffData_GetBuffValue1(lua_State* L) {
  int SWIG_arg = 0;
  ExtractedBuffData *arg1 = (ExtractedBuffData *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("ExtractedBuffData::GetBuffValue1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExtractedBuffData::GetBuffValue1",1,"ExtractedBuffData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExtractedBuffData,0))){
    SWIG_fail_ptr("ExtractedBuffData_GetBuffValue1",1,SWIGTYPE_p_ExtractedBuffData);
  }
  
  result = (UInt32)(arg1)->GetBuffValue1();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExtractedBuffData_GetBuffValue2(lua_State* L) {
  int SWIG_arg = 0;
  ExtractedBuffData *arg1 = (ExtractedBuffData *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("ExtractedBuffData::GetBuffValue2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExtractedBuffData::GetBuffValue2",1,"ExtractedBuffData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExtractedBuffData,0))){
    SWIG_fail_ptr("ExtractedBuffData_GetBuffValue2",1,SWIGTYPE_p_ExtractedBuffData);
  }
  
  result = (UInt32)(arg1)->GetBuffValue2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExtractedBuffData_GetBuffValue3(lua_State* L) {
  int SWIG_arg = 0;
  ExtractedBuffData *arg1 = (ExtractedBuffData *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("ExtractedBuffData::GetBuffValue3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExtractedBuffData::GetBuffValue3",1,"ExtractedBuffData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExtractedBuffData,0))){
    SWIG_fail_ptr("ExtractedBuffData_GetBuffValue3",1,SWIGTYPE_p_ExtractedBuffData);
  }
  
  result = (UInt32)(arg1)->GetBuffValue3();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExtractedBuffData_GetBuffCoolDown(lua_State* L) {
  int SWIG_arg = 0;
  ExtractedBuffData *arg1 = (ExtractedBuffData *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("ExtractedBuffData::GetBuffCoolDown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExtractedBuffData::GetBuffCoolDown",1,"ExtractedBuffData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExtractedBuffData,0))){
    SWIG_fail_ptr("ExtractedBuffData_GetBuffCoolDown",1,SWIGTYPE_p_ExtractedBuffData);
  }
  
  result = (UInt32)(arg1)->GetBuffCoolDown();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExtractedBuffData_GetBuffPro(lua_State* L) {
  int SWIG_arg = 0;
  ExtractedBuffData *arg1 = (ExtractedBuffData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ExtractedBuffData::GetBuffPro",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExtractedBuffData::GetBuffPro",1,"ExtractedBuffData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExtractedBuffData,0))){
    SWIG_fail_ptr("ExtractedBuffData_GetBuffPro",1,SWIGTYPE_p_ExtractedBuffData);
  }
  
  result = (UInt8)(arg1)->GetBuffPro();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExtractedBuffData_SetBuffValue1(lua_State* L) {
  int SWIG_arg = 0;
  ExtractedBuffData *arg1 = (ExtractedBuffData *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("ExtractedBuffData::SetBuffValue1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExtractedBuffData::SetBuffValue1",1,"ExtractedBuffData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ExtractedBuffData::SetBuffValue1",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExtractedBuffData,0))){
    SWIG_fail_ptr("ExtractedBuffData_SetBuffValue1",1,SWIGTYPE_p_ExtractedBuffData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetBuffValue1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExtractedBuffData_SetBuffValue2(lua_State* L) {
  int SWIG_arg = 0;
  ExtractedBuffData *arg1 = (ExtractedBuffData *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("ExtractedBuffData::SetBuffValue2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExtractedBuffData::SetBuffValue2",1,"ExtractedBuffData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ExtractedBuffData::SetBuffValue2",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExtractedBuffData,0))){
    SWIG_fail_ptr("ExtractedBuffData_SetBuffValue2",1,SWIGTYPE_p_ExtractedBuffData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetBuffValue2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExtractedBuffData_SetBuffValue3(lua_State* L) {
  int SWIG_arg = 0;
  ExtractedBuffData *arg1 = (ExtractedBuffData *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("ExtractedBuffData::SetBuffValue3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExtractedBuffData::SetBuffValue3",1,"ExtractedBuffData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ExtractedBuffData::SetBuffValue3",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExtractedBuffData,0))){
    SWIG_fail_ptr("ExtractedBuffData_SetBuffValue3",1,SWIGTYPE_p_ExtractedBuffData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetBuffValue3(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ExtractedBuffData(lua_State* L) {
  int SWIG_arg = 0;
  ExtractedBuffData *result = 0 ;
  
  SWIG_check_num_args("ExtractedBuffData::ExtractedBuffData",0,0)
  result = (ExtractedBuffData *)new ExtractedBuffData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ExtractedBuffData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ExtractedBuffData(void *obj) {
ExtractedBuffData *arg1 = (ExtractedBuffData *) obj;
delete arg1;
}
static swig_lua_method swig_ExtractedBuffData_methods[] = {
    {"GetBuffID", _wrap_ExtractedBuffData_GetBuffID}, 
    {"GetBuffValue1", _wrap_ExtractedBuffData_GetBuffValue1}, 
    {"GetBuffValue2", _wrap_ExtractedBuffData_GetBuffValue2}, 
    {"GetBuffValue3", _wrap_ExtractedBuffData_GetBuffValue3}, 
    {"GetBuffCoolDown", _wrap_ExtractedBuffData_GetBuffCoolDown}, 
    {"GetBuffPro", _wrap_ExtractedBuffData_GetBuffPro}, 
    {"SetBuffValue1", _wrap_ExtractedBuffData_SetBuffValue1}, 
    {"SetBuffValue2", _wrap_ExtractedBuffData_SetBuffValue2}, 
    {"SetBuffValue3", _wrap_ExtractedBuffData_SetBuffValue3}, 
    {0,0}
};
static swig_lua_attribute swig_ExtractedBuffData_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ExtractedBuffData_bases[] = {0};
static const char *swig_ExtractedBuffData_base_names[] = {0};
static swig_lua_class _wrap_class_ExtractedBuffData = { "ExtractedBuffData", &SWIGTYPE_p_ExtractedBuffData,_wrap_new_ExtractedBuffData, swig_delete_ExtractedBuffData, swig_ExtractedBuffData_methods, swig_ExtractedBuffData_attributes, swig_ExtractedBuffData_bases, swig_ExtractedBuffData_base_names };

static int _wrap_ItemData_item_id_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("ItemData::item_id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_id",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::item_id",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_id_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  if (arg1) (arg1)->item_id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_id_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("ItemData::item_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_id",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_id_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt32) ((arg1)->item_id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_type_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::item_type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_type",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::item_type",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_type_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->item_type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_type_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::item_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_type",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_type_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->item_type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eqType_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::eqType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eqType",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::eqType",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eqType_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->eqType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eqType_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::eqType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eqType",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eqType_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->eqType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_color_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::color",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::color",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_color_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->color = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_color_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::color",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::color",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_color_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->color);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_rare_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::rare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::rare",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::rare",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_rare_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->rare = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_rare_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::rare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::rare",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_rare_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->rare);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_root_id_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("ItemData::root_id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::root_id",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::root_id",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_root_id_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  if (arg1) (arg1)->root_id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_root_id_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("ItemData::root_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::root_id",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_root_id_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt32) ((arg1)->root_id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_g_price_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("ItemData::g_price",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::g_price",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::g_price",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_g_price_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  if (arg1) (arg1)->g_price = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_g_price_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("ItemData::g_price",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::g_price",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_g_price_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt32) ((arg1)->g_price);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_m_price_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("ItemData::m_price",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::m_price",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::m_price",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_m_price_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_price = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_m_price_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("ItemData::m_price",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::m_price",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_m_price_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt32) ((arg1)->m_price);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_memberUse_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::memberUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::memberUse",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::memberUse",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_memberUse_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->memberUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_memberUse_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::memberUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::memberUse",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_memberUse_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->memberUse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_unique_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::item_unique",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_unique",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::item_unique",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_unique_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->item_unique = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_unique_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::item_unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_unique",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_unique_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->item_unique);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_TimeLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::item_TimeLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_TimeLimit",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::item_TimeLimit",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_TimeLimit_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->item_TimeLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_TimeLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::item_TimeLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_TimeLimit",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_TimeLimit_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->item_TimeLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_TimeLimitType_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::item_TimeLimitType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_TimeLimitType",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::item_TimeLimitType",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_TimeLimitType_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->item_TimeLimitType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_TimeLimitType_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::item_TimeLimitType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_TimeLimitType",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_TimeLimitType_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->item_TimeLimitType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_reqSexClass1_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::reqSexClass1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::reqSexClass1",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::reqSexClass1",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_reqSexClass1_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->reqSexClass1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_reqSexClass1_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::reqSexClass1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::reqSexClass1",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_reqSexClass1_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->reqSexClass1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_reqSexClass2_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::reqSexClass2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::reqSexClass2",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::reqSexClass2",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_reqSexClass2_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->reqSexClass2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_reqSexClass2_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::reqSexClass2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::reqSexClass2",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_reqSexClass2_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->reqSexClass2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_reqFaction_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::reqFaction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::reqFaction",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::reqFaction",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_reqFaction_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->reqFaction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_reqFaction_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::reqFaction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::reqFaction",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_reqFaction_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->reqFaction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_reqLv_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::reqLv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::reqLv",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::reqLv",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_reqLv_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->reqLv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_reqLv_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::reqLv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::reqLv",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_reqLv_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->reqLv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_consume_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::consume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::consume",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::consume",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_consume_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->consume = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_consume_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::consume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::consume",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_consume_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->consume);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_questItem_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::questItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::questItem",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::questItem",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_questItem_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->questItem = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_questItem_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::questItem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::questItem",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_questItem_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->questItem);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_soulBound_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::soulBound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::soulBound",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::soulBound",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_soulBound_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->soulBound = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_soulBound_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::soulBound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::soulBound",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_soulBound_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->soulBound);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_dumpable_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::dumpable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::dumpable",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::dumpable",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_dumpable_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->dumpable = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_dumpable_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::dumpable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::dumpable",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_dumpable_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->dumpable);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_droppable_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::droppable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::droppable",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::droppable",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_droppable_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->droppable = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_droppable_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::droppable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::droppable",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_droppable_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->droppable);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_godWeapon_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::godWeapon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::godWeapon",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::godWeapon",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_godWeapon_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->godWeapon = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_godWeapon_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::godWeapon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::godWeapon",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_godWeapon_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->godWeapon);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_steal_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::steal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::steal",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::steal",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_steal_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->steal = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_steal_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::steal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::steal",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_steal_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->steal);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_useCount_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::useCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::useCount",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::useCount",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_useCount_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->useCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_useCount_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::useCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::useCount",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_useCount_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->useCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_overlap_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::overlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::overlap",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::overlap",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_overlap_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->overlap = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_overlap_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::overlap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::overlap",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_overlap_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->overlap);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_usePlace_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::usePlace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::usePlace",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::usePlace",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_usePlace_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->usePlace = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_usePlace_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::usePlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::usePlace",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_usePlace_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->usePlace);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_bBuff_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::bBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::bBuff",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::bBuff",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_bBuff_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->bBuff = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_bBuff_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::bBuff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::bBuff",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_bBuff_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->bBuff);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_form_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::form",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::form",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::form",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_form_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->form = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_form_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::form",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::form",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_form_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->form);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_targetType_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::targetType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::targetType",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::targetType",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_targetType_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->targetType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_targetType_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::targetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::targetType",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_targetType_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->targetType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_target_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::target",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::target",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::target",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_target_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->target = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_target_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::target",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::target",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_target_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->target);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_stateCaster_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::stateCaster",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::stateCaster",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::stateCaster",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_stateCaster_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->stateCaster = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_stateCaster_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::stateCaster",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::stateCaster",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_stateCaster_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->stateCaster);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_stateTarget_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::stateTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::stateTarget",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::stateTarget",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_stateTarget_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->stateTarget = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_stateTarget_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::stateTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::stateTarget",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_stateTarget_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->stateTarget);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_stateClear_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::stateClear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::stateClear",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::stateClear",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_stateClear_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->stateClear = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_stateClear_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::stateClear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::stateClear",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_stateClear_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->stateClear);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_coolType_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::coolType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::coolType",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::coolType",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_coolType_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->coolType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_coolType_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::coolType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::coolType",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_coolType_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->coolType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_coolTime_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::coolTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::coolTime",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::coolTime",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_coolTime_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->coolTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_coolTime_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::coolTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::coolTime",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_coolTime_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->coolTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_periodType_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::periodType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::periodType",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::periodType",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_periodType_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->periodType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_periodType_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::periodType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::periodType",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_periodType_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->periodType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_period_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::period",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::period",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::period",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_period_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->period = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_period_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::period",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::period",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_period_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->period);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_nTarget_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::nTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::nTarget",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::nTarget",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_nTarget_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->nTarget = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_nTarget_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::nTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::nTarget",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_nTarget_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->nTarget);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restoreType_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::restoreType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restoreType",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::restoreType",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restoreType_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->restoreType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restoreType_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::restoreType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restoreType",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restoreType_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->restoreType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_HP_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::restore_HP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_HP",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::restore_HP",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_HP_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->restore_HP = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_HP_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::restore_HP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_HP",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_HP_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->restore_HP);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_mHP_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::restore_mHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_mHP",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::restore_mHP",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_mHP_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->restore_mHP = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_mHP_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::restore_mHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_mHP",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_mHP_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->restore_mHP);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_SP_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::restore_SP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_SP",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::restore_SP",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_SP_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->restore_SP = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_SP_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::restore_SP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_SP",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_SP_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->restore_SP);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_mSP_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::restore_mSP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_mSP",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::restore_mSP",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_mSP_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->restore_mSP = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_mSP_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::restore_mSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_mSP",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_mSP_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->restore_mSP);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_VP_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::restore_VP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_VP",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::restore_VP",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_VP_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->restore_VP = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_VP_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::restore_VP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_VP",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_VP_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->restore_VP);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_DP_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::restore_DP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_DP",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::restore_DP",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_DP_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->restore_DP = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_DP_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::restore_DP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_DP",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_DP_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->restore_DP);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_WC_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::restore_WC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_WC",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::restore_WC",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_WC_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->restore_WC = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_WC_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::restore_WC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_WC",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_WC_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->restore_WC);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_favor_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::restore_favor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_favor",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::restore_favor",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_favor_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->restore_favor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_restore_favor_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::restore_favor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::restore_favor",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_restore_favor_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->restore_favor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_bagSlot_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::bagSlot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::bagSlot",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::bagSlot",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_bagSlot_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->bagSlot = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_bagSlot_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::bagSlot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::bagSlot",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_bagSlot_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->bagSlot);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eq_baseElement_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::eq_baseElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eq_baseElement",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::eq_baseElement",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eq_baseElement_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->eq_baseElement = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eq_baseElement_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::eq_baseElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eq_baseElement",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eq_baseElement_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->eq_baseElement);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eq_maxEndure_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::eq_maxEndure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eq_maxEndure",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::eq_maxEndure",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eq_maxEndure_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->eq_maxEndure = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eq_maxEndure_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::eq_maxEndure",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eq_maxEndure",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eq_maxEndure_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->eq_maxEndure);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eq_maxUpgrade_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::eq_maxUpgrade",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eq_maxUpgrade",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::eq_maxUpgrade",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eq_maxUpgrade_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->eq_maxUpgrade = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eq_maxUpgrade_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::eq_maxUpgrade",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eq_maxUpgrade",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eq_maxUpgrade_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->eq_maxUpgrade);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eq_minGem_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::eq_minGem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eq_minGem",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::eq_minGem",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eq_minGem_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->eq_minGem = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eq_minGem_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::eq_minGem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eq_minGem",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eq_minGem_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->eq_minGem);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eq_maxGem_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::eq_maxGem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eq_maxGem",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::eq_maxGem",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eq_maxGem_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->eq_maxGem = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eq_maxGem_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::eq_maxGem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eq_maxGem",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eq_maxGem_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->eq_maxGem);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_STA_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::STA_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::STA_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::STA_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_STA_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->STA_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_STA_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::STA_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::STA_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_STA_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->STA_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_STA_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::STA_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::STA_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::STA_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_STA_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->STA_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_STA_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::STA_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::STA_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_STA_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->STA_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_SPR_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::SPR_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::SPR_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::SPR_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_SPR_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->SPR_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_SPR_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::SPR_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::SPR_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_SPR_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->SPR_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_SPR_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::SPR_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::SPR_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::SPR_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_SPR_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->SPR_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_SPR_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::SPR_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::SPR_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_SPR_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->SPR_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_STR_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::STR_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::STR_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::STR_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_STR_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->STR_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_STR_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::STR_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::STR_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_STR_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->STR_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_STR_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::STR_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::STR_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::STR_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_STR_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->STR_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_STR_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::STR_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::STR_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_STR_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->STR_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_CON_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::CON_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::CON_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::CON_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_CON_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->CON_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_CON_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::CON_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::CON_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_CON_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->CON_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_CON_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::CON_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::CON_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::CON_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_CON_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->CON_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_CON_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::CON_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::CON_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_CON_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->CON_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_AGI_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::AGI_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::AGI_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::AGI_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_AGI_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->AGI_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_AGI_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::AGI_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::AGI_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_AGI_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->AGI_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_AGI_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::AGI_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::AGI_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::AGI_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_AGI_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->AGI_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_AGI_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::AGI_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::AGI_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_AGI_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->AGI_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_ATK_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::ATK_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::ATK_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::ATK_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_ATK_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->ATK_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_ATK_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::ATK_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::ATK_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_ATK_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->ATK_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_ATK_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::ATK_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::ATK_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::ATK_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_ATK_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->ATK_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_ATK_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::ATK_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::ATK_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_ATK_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->ATK_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_DEF_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::DEF_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::DEF_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::DEF_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_DEF_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->DEF_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_DEF_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::DEF_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::DEF_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_DEF_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->DEF_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_DEF_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::DEF_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::DEF_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::DEF_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_DEF_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->DEF_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_DEF_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::DEF_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::DEF_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_DEF_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->DEF_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_HIT_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::HIT_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::HIT_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::HIT_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_HIT_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->HIT_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_HIT_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::HIT_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::HIT_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_HIT_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->HIT_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_HIT_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::HIT_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::HIT_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::HIT_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_HIT_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->HIT_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_HIT_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::HIT_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::HIT_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_HIT_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->HIT_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_EVA_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::EVA_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::EVA_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::EVA_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_EVA_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->EVA_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_EVA_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::EVA_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::EVA_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_EVA_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->EVA_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_EVA_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::EVA_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::EVA_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::EVA_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_EVA_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->EVA_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_EVA_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::EVA_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::EVA_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_EVA_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->EVA_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_POW_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::POW_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::POW_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::POW_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_POW_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->POW_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_POW_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::POW_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::POW_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_POW_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->POW_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_POW_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::POW_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::POW_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::POW_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_POW_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->POW_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_POW_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::POW_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::POW_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_POW_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->POW_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_SPD_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::SPD_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::SPD_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::SPD_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_SPD_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->SPD_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_SPD_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::SPD_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::SPD_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_SPD_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->SPD_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_SPD_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::SPD_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::SPD_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::SPD_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_SPD_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->SPD_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_SPD_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::SPD_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::SPD_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_SPD_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->SPD_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_maxHP_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::maxHP_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::maxHP_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::maxHP_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_maxHP_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxHP_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_maxHP_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::maxHP_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::maxHP_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_maxHP_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->maxHP_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_maxHP_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::maxHP_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::maxHP_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::maxHP_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_maxHP_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxHP_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_maxHP_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::maxHP_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::maxHP_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_maxHP_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->maxHP_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_maxSP_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::maxSP_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::maxSP_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::maxSP_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_maxSP_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxSP_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_maxSP_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::maxSP_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::maxSP_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_maxSP_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->maxSP_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_maxSP_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::maxSP_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::maxSP_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::maxSP_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_maxSP_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxSP_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_maxSP_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::maxSP_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::maxSP_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_maxSP_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->maxSP_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_maxVP_d_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::maxVP_d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::maxVP_d",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::maxVP_d",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_maxVP_d_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxVP_d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_maxVP_d_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::maxVP_d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::maxVP_d",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_maxVP_d_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->maxVP_d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_maxVP_u_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("ItemData::maxVP_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::maxVP_u",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::maxVP_u",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_maxVP_u_set",1,SWIGTYPE_p_ItemData);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxVP_u = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_maxVP_u_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("ItemData::maxVP_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::maxVP_u",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_maxVP_u_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (Int16) ((arg1)->maxVP_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_iconLight_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  SWIG_check_num_args("ItemData::iconLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::iconLight",1,"ItemData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ItemData::iconLight",2,"BYTE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_iconLight_set",1,SWIGTYPE_p_ItemData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BYTE,0))){
    SWIG_fail_ptr("ItemData_iconLight_set",2,SWIGTYPE_p_BYTE);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->iconLight = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_iconLight_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  BYTE result;
  
  SWIG_check_num_args("ItemData::iconLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::iconLight",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_iconLight_get",1,SWIGTYPE_p_ItemData);
  }
  
  result =  ((arg1)->iconLight);
  {
    BYTE * resultptr = new BYTE((const BYTE &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BYTE,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_weaponLight_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  SWIG_check_num_args("ItemData::weaponLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::weaponLight",1,"ItemData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ItemData::weaponLight",2,"BYTE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_weaponLight_set",1,SWIGTYPE_p_ItemData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BYTE,0))){
    SWIG_fail_ptr("ItemData_weaponLight_set",2,SWIGTYPE_p_BYTE);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->weaponLight = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_weaponLight_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  BYTE result;
  
  SWIG_check_num_args("ItemData::weaponLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::weaponLight",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_weaponLight_get",1,SWIGTYPE_p_ItemData);
  }
  
  result =  ((arg1)->weaponLight);
  {
    BYTE * resultptr = new BYTE((const BYTE &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BYTE,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_icon1_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  TCHAR *arg2 ;
  
  SWIG_check_num_args("ItemData::icon1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::icon1",1,"ItemData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ItemData::icon1",2,"TCHAR [33]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_icon1_set",1,SWIGTYPE_p_ItemData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCHAR,0))){
    SWIG_fail_ptr("ItemData_icon1_set",2,SWIGTYPE_p_TCHAR);
  }
  
  {
    size_t ii;
    TCHAR *b = (TCHAR *) arg1->icon1;
    for (ii = 0; ii < (size_t)33; ii++) b[ii] = *((TCHAR *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_icon1_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  TCHAR *result = 0 ;
  
  SWIG_check_num_args("ItemData::icon1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::icon1",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_icon1_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (TCHAR *)(TCHAR *) ((arg1)->icon1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCHAR,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_icon2_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  TCHAR *arg2 ;
  
  SWIG_check_num_args("ItemData::icon2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::icon2",1,"ItemData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ItemData::icon2",2,"TCHAR [33]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_icon2_set",1,SWIGTYPE_p_ItemData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCHAR,0))){
    SWIG_fail_ptr("ItemData_icon2_set",2,SWIGTYPE_p_TCHAR);
  }
  
  {
    size_t ii;
    TCHAR *b = (TCHAR *) arg1->icon2;
    for (ii = 0; ii < (size_t)33; ii++) b[ii] = *((TCHAR *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_icon2_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  TCHAR *result = 0 ;
  
  SWIG_check_num_args("ItemData::icon2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::icon2",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_icon2_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (TCHAR *)(TCHAR *) ((arg1)->icon2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCHAR,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_icon2_id_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::icon2_id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::icon2_id",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::icon2_id",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_icon2_id_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->icon2_id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_icon2_id_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::icon2_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::icon2_id",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_icon2_id_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->icon2_id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eq_Color_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::eq_Color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eq_Color",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::eq_Color",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eq_Color_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->eq_Color = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_eq_Color_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::eq_Color",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::eq_Color",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_eq_Color_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->eq_Color);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_sellable_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::sellable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::sellable",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::sellable",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_sellable_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->sellable = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_sellable_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::sellable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::sellable",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_sellable_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->sellable);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_repair_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::repair",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::repair",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::repair",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_repair_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->repair = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_repair_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::repair",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::repair",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_repair_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->repair);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_Identify_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::Identify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::Identify",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::Identify",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_Identify_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->Identify = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_Identify_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::Identify",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::Identify",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_Identify_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->Identify);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_GenerateLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("ItemData::item_GenerateLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_GenerateLimit",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::item_GenerateLimit",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_GenerateLimit_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->item_GenerateLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_GenerateLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("ItemData::item_GenerateLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_GenerateLimit",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_GenerateLimit_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt8) ((arg1)->item_GenerateLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_GenerateLimit_Time_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::item_GenerateLimit_Time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_GenerateLimit_Time",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::item_GenerateLimit_Time",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_GenerateLimit_Time_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->item_GenerateLimit_Time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_GenerateLimit_Time_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::item_GenerateLimit_Time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_GenerateLimit_Time",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_GenerateLimit_Time_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->item_GenerateLimit_Time);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_GenerateLimit_Count_set(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("ItemData::item_GenerateLimit_Count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_GenerateLimit_Count",1,"ItemData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ItemData::item_GenerateLimit_Count",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_GenerateLimit_Count_set",1,SWIGTYPE_p_ItemData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->item_GenerateLimit_Count = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ItemData_item_GenerateLimit_Count_get(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *arg1 = (ItemData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("ItemData::item_GenerateLimit_Count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ItemData::item_GenerateLimit_Count",1,"ItemData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ItemData,0))){
    SWIG_fail_ptr("ItemData_item_GenerateLimit_Count_get",1,SWIGTYPE_p_ItemData);
  }
  
  result = (UInt16) ((arg1)->item_GenerateLimit_Count);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ItemData(lua_State* L) {
  int SWIG_arg = 0;
  ItemData *result = 0 ;
  
  SWIG_check_num_args("ItemData::ItemData",0,0)
  result = (ItemData *)new ItemData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ItemData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ItemData(void *obj) {
ItemData *arg1 = (ItemData *) obj;
delete arg1;
}
static swig_lua_method swig_ItemData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ItemData_attributes[] = {
    { "item_id", _wrap_ItemData_item_id_get, _wrap_ItemData_item_id_set},
    { "item_type", _wrap_ItemData_item_type_get, _wrap_ItemData_item_type_set},
    { "eqType", _wrap_ItemData_eqType_get, _wrap_ItemData_eqType_set},
    { "color", _wrap_ItemData_color_get, _wrap_ItemData_color_set},
    { "rare", _wrap_ItemData_rare_get, _wrap_ItemData_rare_set},
    { "root_id", _wrap_ItemData_root_id_get, _wrap_ItemData_root_id_set},
    { "g_price", _wrap_ItemData_g_price_get, _wrap_ItemData_g_price_set},
    { "m_price", _wrap_ItemData_m_price_get, _wrap_ItemData_m_price_set},
    { "memberUse", _wrap_ItemData_memberUse_get, _wrap_ItemData_memberUse_set},
    { "item_unique", _wrap_ItemData_item_unique_get, _wrap_ItemData_item_unique_set},
    { "item_TimeLimit", _wrap_ItemData_item_TimeLimit_get, _wrap_ItemData_item_TimeLimit_set},
    { "item_TimeLimitType", _wrap_ItemData_item_TimeLimitType_get, _wrap_ItemData_item_TimeLimitType_set},
    { "reqSexClass1", _wrap_ItemData_reqSexClass1_get, _wrap_ItemData_reqSexClass1_set},
    { "reqSexClass2", _wrap_ItemData_reqSexClass2_get, _wrap_ItemData_reqSexClass2_set},
    { "reqFaction", _wrap_ItemData_reqFaction_get, _wrap_ItemData_reqFaction_set},
    { "reqLv", _wrap_ItemData_reqLv_get, _wrap_ItemData_reqLv_set},
    { "consume", _wrap_ItemData_consume_get, _wrap_ItemData_consume_set},
    { "questItem", _wrap_ItemData_questItem_get, _wrap_ItemData_questItem_set},
    { "soulBound", _wrap_ItemData_soulBound_get, _wrap_ItemData_soulBound_set},
    { "dumpable", _wrap_ItemData_dumpable_get, _wrap_ItemData_dumpable_set},
    { "droppable", _wrap_ItemData_droppable_get, _wrap_ItemData_droppable_set},
    { "godWeapon", _wrap_ItemData_godWeapon_get, _wrap_ItemData_godWeapon_set},
    { "steal", _wrap_ItemData_steal_get, _wrap_ItemData_steal_set},
    { "useCount", _wrap_ItemData_useCount_get, _wrap_ItemData_useCount_set},
    { "overlap", _wrap_ItemData_overlap_get, _wrap_ItemData_overlap_set},
    { "usePlace", _wrap_ItemData_usePlace_get, _wrap_ItemData_usePlace_set},
    { "bBuff", _wrap_ItemData_bBuff_get, _wrap_ItemData_bBuff_set},
    { "form", _wrap_ItemData_form_get, _wrap_ItemData_form_set},
    { "targetType", _wrap_ItemData_targetType_get, _wrap_ItemData_targetType_set},
    { "target", _wrap_ItemData_target_get, _wrap_ItemData_target_set},
    { "stateCaster", _wrap_ItemData_stateCaster_get, _wrap_ItemData_stateCaster_set},
    { "stateTarget", _wrap_ItemData_stateTarget_get, _wrap_ItemData_stateTarget_set},
    { "stateClear", _wrap_ItemData_stateClear_get, _wrap_ItemData_stateClear_set},
    { "coolType", _wrap_ItemData_coolType_get, _wrap_ItemData_coolType_set},
    { "coolTime", _wrap_ItemData_coolTime_get, _wrap_ItemData_coolTime_set},
    { "periodType", _wrap_ItemData_periodType_get, _wrap_ItemData_periodType_set},
    { "period", _wrap_ItemData_period_get, _wrap_ItemData_period_set},
    { "nTarget", _wrap_ItemData_nTarget_get, _wrap_ItemData_nTarget_set},
    { "restoreType", _wrap_ItemData_restoreType_get, _wrap_ItemData_restoreType_set},
    { "restore_HP", _wrap_ItemData_restore_HP_get, _wrap_ItemData_restore_HP_set},
    { "restore_mHP", _wrap_ItemData_restore_mHP_get, _wrap_ItemData_restore_mHP_set},
    { "restore_SP", _wrap_ItemData_restore_SP_get, _wrap_ItemData_restore_SP_set},
    { "restore_mSP", _wrap_ItemData_restore_mSP_get, _wrap_ItemData_restore_mSP_set},
    { "restore_VP", _wrap_ItemData_restore_VP_get, _wrap_ItemData_restore_VP_set},
    { "restore_DP", _wrap_ItemData_restore_DP_get, _wrap_ItemData_restore_DP_set},
    { "restore_WC", _wrap_ItemData_restore_WC_get, _wrap_ItemData_restore_WC_set},
    { "restore_favor", _wrap_ItemData_restore_favor_get, _wrap_ItemData_restore_favor_set},
    { "bagSlot", _wrap_ItemData_bagSlot_get, _wrap_ItemData_bagSlot_set},
    { "eq_baseElement", _wrap_ItemData_eq_baseElement_get, _wrap_ItemData_eq_baseElement_set},
    { "eq_maxEndure", _wrap_ItemData_eq_maxEndure_get, _wrap_ItemData_eq_maxEndure_set},
    { "eq_maxUpgrade", _wrap_ItemData_eq_maxUpgrade_get, _wrap_ItemData_eq_maxUpgrade_set},
    { "eq_minGem", _wrap_ItemData_eq_minGem_get, _wrap_ItemData_eq_minGem_set},
    { "eq_maxGem", _wrap_ItemData_eq_maxGem_get, _wrap_ItemData_eq_maxGem_set},
    { "STA_d", _wrap_ItemData_STA_d_get, _wrap_ItemData_STA_d_set},
    { "STA_u", _wrap_ItemData_STA_u_get, _wrap_ItemData_STA_u_set},
    { "SPR_d", _wrap_ItemData_SPR_d_get, _wrap_ItemData_SPR_d_set},
    { "SPR_u", _wrap_ItemData_SPR_u_get, _wrap_ItemData_SPR_u_set},
    { "STR_d", _wrap_ItemData_STR_d_get, _wrap_ItemData_STR_d_set},
    { "STR_u", _wrap_ItemData_STR_u_get, _wrap_ItemData_STR_u_set},
    { "CON_d", _wrap_ItemData_CON_d_get, _wrap_ItemData_CON_d_set},
    { "CON_u", _wrap_ItemData_CON_u_get, _wrap_ItemData_CON_u_set},
    { "AGI_d", _wrap_ItemData_AGI_d_get, _wrap_ItemData_AGI_d_set},
    { "AGI_u", _wrap_ItemData_AGI_u_get, _wrap_ItemData_AGI_u_set},
    { "ATK_d", _wrap_ItemData_ATK_d_get, _wrap_ItemData_ATK_d_set},
    { "ATK_u", _wrap_ItemData_ATK_u_get, _wrap_ItemData_ATK_u_set},
    { "DEF_d", _wrap_ItemData_DEF_d_get, _wrap_ItemData_DEF_d_set},
    { "DEF_u", _wrap_ItemData_DEF_u_get, _wrap_ItemData_DEF_u_set},
    { "HIT_d", _wrap_ItemData_HIT_d_get, _wrap_ItemData_HIT_d_set},
    { "HIT_u", _wrap_ItemData_HIT_u_get, _wrap_ItemData_HIT_u_set},
    { "EVA_d", _wrap_ItemData_EVA_d_get, _wrap_ItemData_EVA_d_set},
    { "EVA_u", _wrap_ItemData_EVA_u_get, _wrap_ItemData_EVA_u_set},
    { "POW_d", _wrap_ItemData_POW_d_get, _wrap_ItemData_POW_d_set},
    { "POW_u", _wrap_ItemData_POW_u_get, _wrap_ItemData_POW_u_set},
    { "SPD_d", _wrap_ItemData_SPD_d_get, _wrap_ItemData_SPD_d_set},
    { "SPD_u", _wrap_ItemData_SPD_u_get, _wrap_ItemData_SPD_u_set},
    { "maxHP_d", _wrap_ItemData_maxHP_d_get, _wrap_ItemData_maxHP_d_set},
    { "maxHP_u", _wrap_ItemData_maxHP_u_get, _wrap_ItemData_maxHP_u_set},
    { "maxSP_d", _wrap_ItemData_maxSP_d_get, _wrap_ItemData_maxSP_d_set},
    { "maxSP_u", _wrap_ItemData_maxSP_u_get, _wrap_ItemData_maxSP_u_set},
    { "maxVP_d", _wrap_ItemData_maxVP_d_get, _wrap_ItemData_maxVP_d_set},
    { "maxVP_u", _wrap_ItemData_maxVP_u_get, _wrap_ItemData_maxVP_u_set},
    { "iconLight", _wrap_ItemData_iconLight_get, _wrap_ItemData_iconLight_set},
    { "weaponLight", _wrap_ItemData_weaponLight_get, _wrap_ItemData_weaponLight_set},
    { "icon1", _wrap_ItemData_icon1_get, _wrap_ItemData_icon1_set},
    { "icon2", _wrap_ItemData_icon2_get, _wrap_ItemData_icon2_set},
    { "icon2_id", _wrap_ItemData_icon2_id_get, _wrap_ItemData_icon2_id_set},
    { "eq_Color", _wrap_ItemData_eq_Color_get, _wrap_ItemData_eq_Color_set},
    { "sellable", _wrap_ItemData_sellable_get, _wrap_ItemData_sellable_set},
    { "repair", _wrap_ItemData_repair_get, _wrap_ItemData_repair_set},
    { "Identify", _wrap_ItemData_Identify_get, _wrap_ItemData_Identify_set},
    { "item_GenerateLimit", _wrap_ItemData_item_GenerateLimit_get, _wrap_ItemData_item_GenerateLimit_set},
    { "item_GenerateLimit_Time", _wrap_ItemData_item_GenerateLimit_Time_get, _wrap_ItemData_item_GenerateLimit_Time_set},
    { "item_GenerateLimit_Count", _wrap_ItemData_item_GenerateLimit_Count_get, _wrap_ItemData_item_GenerateLimit_Count_set},
    {0,0,0}
};
static swig_lua_class *swig_ItemData_bases[] = {0};
static const char *swig_ItemData_base_names[] = {0};
static swig_lua_class _wrap_class_ItemData = { "ItemData", &SWIGTYPE_p_ItemData,_wrap_new_ItemData, swig_delete_ItemData, swig_ItemData_methods, swig_ItemData_attributes, swig_ItemData_bases, swig_ItemData_base_names };

static int _wrap_SkillData_id_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("SkillData::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::id",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::id",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_id_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_id_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("SkillData::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::id",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_id_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt16) ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_type_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::type",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::type",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_type_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_type_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::type",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_type_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_faction_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::faction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::faction",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::faction",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_faction_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->faction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_faction_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::faction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::faction",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_faction_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->faction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_class_skill_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::class_skill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::class_skill",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::class_skill",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_class_skill_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->class_skill = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_class_skill_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::class_skill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::class_skill",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_class_skill_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->class_skill);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_reqBaseSkill_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("SkillData::reqBaseSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::reqBaseSkill",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::reqBaseSkill",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_reqBaseSkill_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->reqBaseSkill = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_reqBaseSkill_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("SkillData::reqBaseSkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::reqBaseSkill",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_reqBaseSkill_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt16) ((arg1)->reqBaseSkill);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_reqBaseSkillRank_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("SkillData::reqBaseSkillRank",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::reqBaseSkillRank",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::reqBaseSkillRank",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_reqBaseSkillRank_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->reqBaseSkillRank = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_reqBaseSkillRank_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("SkillData::reqBaseSkillRank",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::reqBaseSkillRank",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_reqBaseSkillRank_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt16) ((arg1)->reqBaseSkillRank);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_reqLv_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("SkillData::reqLv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::reqLv",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::reqLv",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_reqLv_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->reqLv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_reqLv_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("SkillData::reqLv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::reqLv",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_reqLv_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt16) ((arg1)->reqLv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_Req_Exp_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("SkillData::Req_Exp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::Req_Exp",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::Req_Exp",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_Req_Exp_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  if (arg1) (arg1)->Req_Exp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_Req_Exp_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("SkillData::Req_Exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::Req_Exp",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_Req_Exp_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt32) ((arg1)->Req_Exp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_maxRank_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("SkillData::maxRank",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::maxRank",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::maxRank",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_maxRank_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxRank = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_maxRank_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("SkillData::maxRank",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::maxRank",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_maxRank_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt16) ((arg1)->maxRank);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_active_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::active",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::active",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::active",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_active_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->active = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_active_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::active",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::active",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_active_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->active);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_battleorField_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::battleorField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::battleorField",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::battleorField",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_battleorField_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->battleorField = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_battleorField_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::battleorField",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::battleorField",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_battleorField_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->battleorField);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_form_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::form",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::form",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::form",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_form_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->form = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_form_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::form",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::form",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_form_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->form);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_targetType_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::targetType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::targetType",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::targetType",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_targetType_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->targetType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_targetType_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::targetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::targetType",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_targetType_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->targetType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_skill_UseElement_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::skill_UseElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::skill_UseElement",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::skill_UseElement",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_skill_UseElement_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->skill_UseElement = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_skill_UseElement_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::skill_UseElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::skill_UseElement",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_skill_UseElement_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->skill_UseElement);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_skill_Script_Type_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::skill_Script_Type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::skill_Script_Type",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::skill_Script_Type",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_skill_Script_Type_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->skill_Script_Type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_skill_Script_Type_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::skill_Script_Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::skill_Script_Type",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_skill_Script_Type_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->skill_Script_Type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_skill_cooldownType_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::skill_cooldownType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::skill_cooldownType",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::skill_cooldownType",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_skill_cooldownType_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->skill_cooldownType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_skill_cooldownType_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::skill_cooldownType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::skill_cooldownType",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_skill_cooldownType_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->skill_cooldownType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_Skill_ThrowItemType_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::Skill_ThrowItemType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::Skill_ThrowItemType",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::Skill_ThrowItemType",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_Skill_ThrowItemType_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->Skill_ThrowItemType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_Skill_ThrowItemType_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::Skill_ThrowItemType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::Skill_ThrowItemType",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_Skill_ThrowItemType_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->Skill_ThrowItemType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_AtkType_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::AtkType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::AtkType",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::AtkType",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_AtkType_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->AtkType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_AtkType_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::AtkType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::AtkType",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_AtkType_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->AtkType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_atk_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::mod_atk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_atk",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::mod_atk",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_atk_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->mod_atk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_atk_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::mod_atk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_atk",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_atk_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->mod_atk);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_Def_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::mod_Def",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_Def",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::mod_Def",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_Def_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->mod_Def = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_Def_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::mod_Def",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_Def",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_Def_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->mod_Def);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_Spd_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::mod_Spd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_Spd",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::mod_Spd",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_Spd_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->mod_Spd = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_Spd_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::mod_Spd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_Spd",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_Spd_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->mod_Spd);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_Pow_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::mod_Pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_Pow",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::mod_Pow",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_Pow_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->mod_Pow = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_Pow_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::mod_Pow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_Pow",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_Pow_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->mod_Pow);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_Hit_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::mod_Hit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_Hit",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::mod_Hit",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_Hit_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->mod_Hit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_Hit_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::mod_Hit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_Hit",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_Hit_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->mod_Hit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_Eva_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::mod_Eva",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_Eva",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::mod_Eva",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_Eva_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->mod_Eva = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_Eva_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::mod_Eva",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_Eva",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_Eva_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->mod_Eva);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_maxHP_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::mod_maxHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_maxHP",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::mod_maxHP",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_maxHP_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->mod_maxHP = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_maxHP_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::mod_maxHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_maxHP",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_maxHP_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->mod_maxHP);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_maxSP_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::mod_maxSP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_maxSP",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::mod_maxSP",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_maxSP_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->mod_maxSP = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_maxSP_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::mod_maxSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_maxSP",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_maxSP_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->mod_maxSP);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_maxDP_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::mod_maxDP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_maxDP",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::mod_maxDP",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_maxDP_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->mod_maxDP = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_maxDP_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::mod_maxDP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_maxDP",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_maxDP_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->mod_maxDP);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_maxWc_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::mod_maxWc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_maxWc",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::mod_maxWc",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_maxWc_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->mod_maxWc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_mod_maxWc_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::mod_maxWc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::mod_maxWc",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_mod_maxWc_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->mod_maxWc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_preSkill_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("SkillData::preSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::preSkill",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::preSkill",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_preSkill_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->preSkill = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_preSkill_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("SkillData::preSkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::preSkill",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_preSkill_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt16) ((arg1)->preSkill);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_animation_Motion_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::animation_Motion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::animation_Motion",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::animation_Motion",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_animation_Motion_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->animation_Motion = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_animation_Motion_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::animation_Motion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::animation_Motion",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_animation_Motion_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->animation_Motion);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_animation_Type_set(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("SkillData::animation_Type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::animation_Type",1,"SkillData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SkillData::animation_Type",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_animation_Type_set",1,SWIGTYPE_p_SkillData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  if (arg1) (arg1)->animation_Type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_animation_Type_get(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::animation_Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::animation_Type",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_animation_Type_get",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8) ((arg1)->animation_Type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkillData_GetAnimationType(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *arg1 = (SkillData *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("SkillData::GetAnimationType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SkillData::GetAnimationType",1,"SkillData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SkillData,0))){
    SWIG_fail_ptr("SkillData_GetAnimationType",1,SWIGTYPE_p_SkillData);
  }
  
  result = (UInt8)(arg1)->GetAnimationType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SkillData(lua_State* L) {
  int SWIG_arg = 0;
  SkillData *result = 0 ;
  
  SWIG_check_num_args("SkillData::SkillData",0,0)
  result = (SkillData *)new SkillData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SkillData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SkillData(void *obj) {
SkillData *arg1 = (SkillData *) obj;
delete arg1;
}
static swig_lua_method swig_SkillData_methods[] = {
    {"GetAnimationType", _wrap_SkillData_GetAnimationType}, 
    {0,0}
};
static swig_lua_attribute swig_SkillData_attributes[] = {
    { "id", _wrap_SkillData_id_get, _wrap_SkillData_id_set},
    { "type", _wrap_SkillData_type_get, _wrap_SkillData_type_set},
    { "faction", _wrap_SkillData_faction_get, _wrap_SkillData_faction_set},
    { "class_skill", _wrap_SkillData_class_skill_get, _wrap_SkillData_class_skill_set},
    { "reqBaseSkill", _wrap_SkillData_reqBaseSkill_get, _wrap_SkillData_reqBaseSkill_set},
    { "reqBaseSkillRank", _wrap_SkillData_reqBaseSkillRank_get, _wrap_SkillData_reqBaseSkillRank_set},
    { "reqLv", _wrap_SkillData_reqLv_get, _wrap_SkillData_reqLv_set},
    { "Req_Exp", _wrap_SkillData_Req_Exp_get, _wrap_SkillData_Req_Exp_set},
    { "maxRank", _wrap_SkillData_maxRank_get, _wrap_SkillData_maxRank_set},
    { "active", _wrap_SkillData_active_get, _wrap_SkillData_active_set},
    { "battleorField", _wrap_SkillData_battleorField_get, _wrap_SkillData_battleorField_set},
    { "form", _wrap_SkillData_form_get, _wrap_SkillData_form_set},
    { "targetType", _wrap_SkillData_targetType_get, _wrap_SkillData_targetType_set},
    { "skill_UseElement", _wrap_SkillData_skill_UseElement_get, _wrap_SkillData_skill_UseElement_set},
    { "skill_Script_Type", _wrap_SkillData_skill_Script_Type_get, _wrap_SkillData_skill_Script_Type_set},
    { "skill_cooldownType", _wrap_SkillData_skill_cooldownType_get, _wrap_SkillData_skill_cooldownType_set},
    { "Skill_ThrowItemType", _wrap_SkillData_Skill_ThrowItemType_get, _wrap_SkillData_Skill_ThrowItemType_set},
    { "AtkType", _wrap_SkillData_AtkType_get, _wrap_SkillData_AtkType_set},
    { "mod_atk", _wrap_SkillData_mod_atk_get, _wrap_SkillData_mod_atk_set},
    { "mod_Def", _wrap_SkillData_mod_Def_get, _wrap_SkillData_mod_Def_set},
    { "mod_Spd", _wrap_SkillData_mod_Spd_get, _wrap_SkillData_mod_Spd_set},
    { "mod_Pow", _wrap_SkillData_mod_Pow_get, _wrap_SkillData_mod_Pow_set},
    { "mod_Hit", _wrap_SkillData_mod_Hit_get, _wrap_SkillData_mod_Hit_set},
    { "mod_Eva", _wrap_SkillData_mod_Eva_get, _wrap_SkillData_mod_Eva_set},
    { "mod_maxHP", _wrap_SkillData_mod_maxHP_get, _wrap_SkillData_mod_maxHP_set},
    { "mod_maxSP", _wrap_SkillData_mod_maxSP_get, _wrap_SkillData_mod_maxSP_set},
    { "mod_maxDP", _wrap_SkillData_mod_maxDP_get, _wrap_SkillData_mod_maxDP_set},
    { "mod_maxWc", _wrap_SkillData_mod_maxWc_get, _wrap_SkillData_mod_maxWc_set},
    { "preSkill", _wrap_SkillData_preSkill_get, _wrap_SkillData_preSkill_set},
    { "animation_Motion", _wrap_SkillData_animation_Motion_get, _wrap_SkillData_animation_Motion_set},
    { "animation_Type", _wrap_SkillData_animation_Type_get, _wrap_SkillData_animation_Type_set},
    {0,0,0}
};
static swig_lua_class *swig_SkillData_bases[] = {0};
static const char *swig_SkillData_base_names[] = {0};
static swig_lua_class _wrap_class_SkillData = { "SkillData", &SWIGTYPE_p_SkillData,_wrap_new_SkillData, swig_delete_SkillData, swig_SkillData_methods, swig_SkillData_attributes, swig_SkillData_bases, swig_SkillData_base_names };

static int _wrap_StartCharData_GetMaxHP_STA(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetMaxHP_STA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetMaxHP_STA",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetMaxHP_STA",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetMaxHP_STA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetMaxSP_SPR(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetMaxSP_SPR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetMaxSP_SPR",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetMaxSP_SPR",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetMaxSP_SPR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetAtk_STR(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetAtk_STR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetAtk_STR",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetAtk_STR",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetAtk_STR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetDef_CON(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetDef_CON",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetDef_CON",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetDef_CON",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetDef_CON();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetHit_AGI(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetHit_AGI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetHit_AGI",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetHit_AGI",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetHit_AGI();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetEva_AGI(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetEva_AGI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetEva_AGI",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetEva_AGI",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetEva_AGI();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetPwd_SPR(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetPwd_SPR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetPwd_SPR",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetPwd_SPR",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetPwd_SPR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetPwd_STA(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetPwd_STA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetPwd_STA",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetPwd_STA",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetPwd_STA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetPwd_CON(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetPwd_CON",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetPwd_CON",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetPwd_CON",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetPwd_CON();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetPwd_STR(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetPwd_STR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetPwd_STR",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetPwd_STR",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetPwd_STR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetSpd_AGI(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetSpd_AGI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetSpd_AGI",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetSpd_AGI",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetSpd_AGI();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetSpd_STR(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetSpd_STR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetSpd_STR",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetSpd_STR",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetSpd_STR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetSpd_CON(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetSpd_CON",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetSpd_CON",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetSpd_CON",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetSpd_CON();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartCharData_GetSpd_STA(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *arg1 = (StartCharData *) 0 ;
  float result;
  
  SWIG_check_num_args("StartCharData::GetSpd_STA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StartCharData::GetSpd_STA",1,"StartCharData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StartCharData,0))){
    SWIG_fail_ptr("StartCharData_GetSpd_STA",1,SWIGTYPE_p_StartCharData);
  }
  
  result = (float)(arg1)->GetSpd_STA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StartCharData(lua_State* L) {
  int SWIG_arg = 0;
  StartCharData *result = 0 ;
  
  SWIG_check_num_args("StartCharData::StartCharData",0,0)
  result = (StartCharData *)new StartCharData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StartCharData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StartCharData(void *obj) {
StartCharData *arg1 = (StartCharData *) obj;
delete arg1;
}
static swig_lua_method swig_StartCharData_methods[] = {
    {"GetMaxHP_STA", _wrap_StartCharData_GetMaxHP_STA}, 
    {"GetMaxSP_SPR", _wrap_StartCharData_GetMaxSP_SPR}, 
    {"GetAtk_STR", _wrap_StartCharData_GetAtk_STR}, 
    {"GetDef_CON", _wrap_StartCharData_GetDef_CON}, 
    {"GetHit_AGI", _wrap_StartCharData_GetHit_AGI}, 
    {"GetEva_AGI", _wrap_StartCharData_GetEva_AGI}, 
    {"GetPwd_SPR", _wrap_StartCharData_GetPwd_SPR}, 
    {"GetPwd_STA", _wrap_StartCharData_GetPwd_STA}, 
    {"GetPwd_CON", _wrap_StartCharData_GetPwd_CON}, 
    {"GetPwd_STR", _wrap_StartCharData_GetPwd_STR}, 
    {"GetSpd_AGI", _wrap_StartCharData_GetSpd_AGI}, 
    {"GetSpd_STR", _wrap_StartCharData_GetSpd_STR}, 
    {"GetSpd_CON", _wrap_StartCharData_GetSpd_CON}, 
    {"GetSpd_STA", _wrap_StartCharData_GetSpd_STA}, 
    {0,0}
};
static swig_lua_attribute swig_StartCharData_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_StartCharData_bases[] = {0};
static const char *swig_StartCharData_base_names[] = {0};
static swig_lua_class _wrap_class_StartCharData = { "StartCharData", &SWIGTYPE_p_StartCharData,_wrap_new_StartCharData, swig_delete_StartCharData, swig_StartCharData_methods, swig_StartCharData_attributes, swig_StartCharData_bases, swig_StartCharData_base_names };

static int _wrap_BatActorLinkLst_GetActor(lua_State* L) {
  int SWIG_arg = 0;
  BatActorLinkLst *arg1 = (BatActorLinkLst *) 0 ;
  CBatActor *result = 0 ;
  
  SWIG_check_num_args("BatActorLinkLst::GetActor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BatActorLinkLst::GetActor",1,"BatActorLinkLst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BatActorLinkLst,0))){
    SWIG_fail_ptr("BatActorLinkLst_GetActor",1,SWIGTYPE_p_BatActorLinkLst);
  }
  
  result = (CBatActor *)(arg1)->GetActor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatActor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BatActorLinkLst_GetNext(lua_State* L) {
  int SWIG_arg = 0;
  BatActorLinkLst *arg1 = (BatActorLinkLst *) 0 ;
  BatActorLinkLst *result = 0 ;
  
  SWIG_check_num_args("BatActorLinkLst::GetNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BatActorLinkLst::GetNext",1,"BatActorLinkLst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BatActorLinkLst,0))){
    SWIG_fail_ptr("BatActorLinkLst_GetNext",1,SWIGTYPE_p_BatActorLinkLst);
  }
  
  result = (BatActorLinkLst *)(arg1)->GetNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BatActorLinkLst,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BatActorLinkLst(lua_State* L) {
  int SWIG_arg = 0;
  BatActorLinkLst *result = 0 ;
  
  SWIG_check_num_args("BatActorLinkLst::BatActorLinkLst",0,0)
  result = (BatActorLinkLst *)new BatActorLinkLst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BatActorLinkLst,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BatActorLinkLst(void *obj) {
BatActorLinkLst *arg1 = (BatActorLinkLst *) obj;
delete arg1;
}
static swig_lua_method swig_BatActorLinkLst_methods[] = {
    {"GetActor", _wrap_BatActorLinkLst_GetActor}, 
    {"GetNext", _wrap_BatActorLinkLst_GetNext}, 
    {0,0}
};
static swig_lua_attribute swig_BatActorLinkLst_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_BatActorLinkLst_bases[] = {0};
static const char *swig_BatActorLinkLst_base_names[] = {0};
static swig_lua_class _wrap_class_BatActorLinkLst = { "BatActorLinkLst", &SWIGTYPE_p_BatActorLinkLst,_wrap_new_BatActorLinkLst, swig_delete_BatActorLinkLst, swig_BatActorLinkLst_methods, swig_BatActorLinkLst_attributes, swig_BatActorLinkLst_bases, swig_BatActorLinkLst_base_names };

static int _wrap_actorlist_GetCurrActor(lua_State* L) {
  int SWIG_arg = 0;
  actorlist *arg1 = (actorlist *) 0 ;
  CBatActor *result = 0 ;
  
  SWIG_check_num_args("actorlist::GetCurrActor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("actorlist::GetCurrActor",1,"actorlist *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_actorlist,0))){
    SWIG_fail_ptr("actorlist_GetCurrActor",1,SWIGTYPE_p_actorlist);
  }
  
  result = (CBatActor *)(arg1)->GetCurrActor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatActor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_actorlist_GetNext(lua_State* L) {
  int SWIG_arg = 0;
  actorlist *arg1 = (actorlist *) 0 ;
  actorlist *result = 0 ;
  
  SWIG_check_num_args("actorlist::GetNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("actorlist::GetNext",1,"actorlist *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_actorlist,0))){
    SWIG_fail_ptr("actorlist_GetNext",1,SWIGTYPE_p_actorlist);
  }
  
  result = (actorlist *)(arg1)->GetNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_actorlist,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_actorlist(lua_State* L) {
  int SWIG_arg = 0;
  actorlist *result = 0 ;
  
  SWIG_check_num_args("actorlist::actorlist",0,0)
  result = (actorlist *)new actorlist();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_actorlist,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_actorlist(void *obj) {
actorlist *arg1 = (actorlist *) obj;
delete arg1;
}
static swig_lua_method swig_actorlist_methods[] = {
    {"GetCurrActor", _wrap_actorlist_GetCurrActor}, 
    {"GetNext", _wrap_actorlist_GetNext}, 
    {0,0}
};
static swig_lua_attribute swig_actorlist_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_actorlist_bases[] = {0};
static const char *swig_actorlist_base_names[] = {0};
static swig_lua_class _wrap_class_actorlist = { "actorlist", &SWIGTYPE_p_actorlist,_wrap_new_actorlist, swig_delete_actorlist, swig_actorlist_methods, swig_actorlist_attributes, swig_actorlist_bases, swig_actorlist_base_names };

static int _wrap_BuffData_id_set(lua_State* L) {
  int SWIG_arg = 0;
  BuffData *arg1 = (BuffData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("BuffData::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BuffData::id",1,"BuffData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BuffData::id",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BuffData,0))){
    SWIG_fail_ptr("BuffData_id_set",1,SWIGTYPE_p_BuffData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuffData_id_get(lua_State* L) {
  int SWIG_arg = 0;
  BuffData *arg1 = (BuffData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("BuffData::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BuffData::id",1,"BuffData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BuffData,0))){
    SWIG_fail_ptr("BuffData_id_get",1,SWIGTYPE_p_BuffData);
  }
  
  result = (UInt16) ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuffData_Buff_type_set(lua_State* L) {
  int SWIG_arg = 0;
  BuffData *arg1 = (BuffData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("BuffData::Buff_type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BuffData::Buff_type",1,"BuffData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BuffData::Buff_type",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BuffData,0))){
    SWIG_fail_ptr("BuffData_Buff_type_set",1,SWIGTYPE_p_BuffData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->Buff_type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuffData_Buff_type_get(lua_State* L) {
  int SWIG_arg = 0;
  BuffData *arg1 = (BuffData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("BuffData::Buff_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BuffData::Buff_type",1,"BuffData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BuffData,0))){
    SWIG_fail_ptr("BuffData_Buff_type_get",1,SWIGTYPE_p_BuffData);
  }
  
  result = (UInt16) ((arg1)->Buff_type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuffData_Buff_school_set(lua_State* L) {
  int SWIG_arg = 0;
  BuffData *arg1 = (BuffData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("BuffData::Buff_school",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BuffData::Buff_school",1,"BuffData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BuffData::Buff_school",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BuffData,0))){
    SWIG_fail_ptr("BuffData_Buff_school_set",1,SWIGTYPE_p_BuffData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->Buff_school = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuffData_Buff_school_get(lua_State* L) {
  int SWIG_arg = 0;
  BuffData *arg1 = (BuffData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("BuffData::Buff_school",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BuffData::Buff_school",1,"BuffData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BuffData,0))){
    SWIG_fail_ptr("BuffData_Buff_school_get",1,SWIGTYPE_p_BuffData);
  }
  
  result = (UInt16) ((arg1)->Buff_school);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuffData_Buff_endtype_set(lua_State* L) {
  int SWIG_arg = 0;
  BuffData *arg1 = (BuffData *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("BuffData::Buff_endtype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BuffData::Buff_endtype",1,"BuffData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BuffData::Buff_endtype",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BuffData,0))){
    SWIG_fail_ptr("BuffData_Buff_endtype_set",1,SWIGTYPE_p_BuffData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if (arg1) (arg1)->Buff_endtype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuffData_Buff_endtype_get(lua_State* L) {
  int SWIG_arg = 0;
  BuffData *arg1 = (BuffData *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("BuffData::Buff_endtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BuffData::Buff_endtype",1,"BuffData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BuffData,0))){
    SWIG_fail_ptr("BuffData_Buff_endtype_get",1,SWIGTYPE_p_BuffData);
  }
  
  result = (UInt16) ((arg1)->Buff_endtype);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BuffData(lua_State* L) {
  int SWIG_arg = 0;
  BuffData *result = 0 ;
  
  SWIG_check_num_args("BuffData::BuffData",0,0)
  result = (BuffData *)new BuffData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BuffData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BuffData(void *obj) {
BuffData *arg1 = (BuffData *) obj;
delete arg1;
}
static swig_lua_method swig_BuffData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_BuffData_attributes[] = {
    { "id", _wrap_BuffData_id_get, _wrap_BuffData_id_set},
    { "Buff_type", _wrap_BuffData_Buff_type_get, _wrap_BuffData_Buff_type_set},
    { "Buff_school", _wrap_BuffData_Buff_school_get, _wrap_BuffData_Buff_school_set},
    { "Buff_endtype", _wrap_BuffData_Buff_endtype_get, _wrap_BuffData_Buff_endtype_set},
    {0,0,0}
};
static swig_lua_class *swig_BuffData_bases[] = {0};
static const char *swig_BuffData_base_names[] = {0};
static swig_lua_class _wrap_class_BuffData = { "BuffData", &SWIGTYPE_p_BuffData,_wrap_new_BuffData, swig_delete_BuffData, swig_BuffData_methods, swig_BuffData_attributes, swig_BuffData_bases, swig_BuffData_base_names };

static int _wrap_CMap_GetMap_id(lua_State* L) {
  int SWIG_arg = 0;
  CMap *arg1 = (CMap *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CMap::GetMap_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMap::GetMap_id",1,"CMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMap,0))){
    SWIG_fail_ptr("CMap_GetMap_id",1,SWIGTYPE_p_CMap);
  }
  
  result = (UInt32)(arg1)->GetMap_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMap_GetLine_id(lua_State* L) {
  int SWIG_arg = 0;
  CMap *arg1 = (CMap *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CMap::GetLine_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMap::GetLine_id",1,"CMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMap,0))){
    SWIG_fail_ptr("CMap_GetLine_id",1,SWIGTYPE_p_CMap);
  }
  
  result = (UInt32)(arg1)->GetLine_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMap_GetInst_id(lua_State* L) {
  int SWIG_arg = 0;
  CMap *arg1 = (CMap *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CMap::GetInst_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMap::GetInst_id",1,"CMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMap,0))){
    SWIG_fail_ptr("CMap_GetInst_id",1,SWIGTYPE_p_CMap);
  }
  
  result = (UInt32)(arg1)->GetInst_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMap_GetOwner_id(lua_State* L) {
  int SWIG_arg = 0;
  CMap *arg1 = (CMap *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CMap::GetOwner_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMap::GetOwner_id",1,"CMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMap,0))){
    SWIG_fail_ptr("CMap_GetOwner_id",1,SWIGTYPE_p_CMap);
  }
  
  result = (UInt32)(arg1)->GetOwner_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMap_GetWidth(lua_State* L) {
  int SWIG_arg = 0;
  CMap *arg1 = (CMap *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CMap::GetWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMap::GetWidth",1,"CMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMap,0))){
    SWIG_fail_ptr("CMap_GetWidth",1,SWIGTYPE_p_CMap);
  }
  
  result = (UInt16)(arg1)->GetWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMap_GetHeight(lua_State* L) {
  int SWIG_arg = 0;
  CMap *arg1 = (CMap *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CMap::GetHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMap::GetHeight",1,"CMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMap,0))){
    SWIG_fail_ptr("CMap_GetHeight",1,SWIGTYPE_p_CMap);
  }
  
  result = (UInt16)(arg1)->GetHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMap_IsBlocked(lua_State* L) {
  int SWIG_arg = 0;
  CMap *arg1 = (CMap *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  bool result;
  
  SWIG_check_num_args("CMap::IsBlocked",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMap::IsBlocked",1,"CMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CMap::IsBlocked",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CMap::IsBlocked",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMap,0))){
    SWIG_fail_ptr("CMap_IsBlocked",1,SWIGTYPE_p_CMap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  result = (bool)(arg1)->IsBlocked(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMap_IsOccupied(lua_State* L) {
  int SWIG_arg = 0;
  CMap *arg1 = (CMap *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  bool result;
  
  SWIG_check_num_args("CMap::IsOccupied",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMap::IsOccupied",1,"CMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CMap::IsOccupied",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CMap::IsOccupied",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMap,0))){
    SWIG_fail_ptr("CMap_IsOccupied",1,SWIGTYPE_p_CMap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  result = (bool)(arg1)->IsOccupied(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMap_IsJumpPoint(lua_State* L) {
  int SWIG_arg = 0;
  CMap *arg1 = (CMap *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  int result;
  
  SWIG_check_num_args("CMap::IsJumpPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMap::IsJumpPoint",1,"CMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CMap::IsJumpPoint",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CMap::IsJumpPoint",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMap,0))){
    SWIG_fail_ptr("CMap_IsJumpPoint",1,SWIGTYPE_p_CMap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  result = (int)(arg1)->IsJumpPoint(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMap_GetName(lua_State* L) {
  int SWIG_arg = 0;
  CMap *arg1 = (CMap *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CMap::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMap::GetName",1,"CMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMap,0))){
    SWIG_fail_ptr("CMap_GetName",1,SWIGTYPE_p_CMap);
  }
  
  result = (char *)CMap_GetName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CMap(lua_State* L) {
  int SWIG_arg = 0;
  CMap *result = 0 ;
  
  SWIG_check_num_args("CMap::CMap",0,0)
  result = (CMap *)new CMap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CMap,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CMap(void *obj) {
CMap *arg1 = (CMap *) obj;
delete arg1;
}
static swig_lua_method swig_CMap_methods[] = {
    {"GetMap_id", _wrap_CMap_GetMap_id}, 
    {"GetLine_id", _wrap_CMap_GetLine_id}, 
    {"GetInst_id", _wrap_CMap_GetInst_id}, 
    {"GetOwner_id", _wrap_CMap_GetOwner_id}, 
    {"GetWidth", _wrap_CMap_GetWidth}, 
    {"GetHeight", _wrap_CMap_GetHeight}, 
    {"IsBlocked", _wrap_CMap_IsBlocked}, 
    {"IsOccupied", _wrap_CMap_IsOccupied}, 
    {"IsJumpPoint", _wrap_CMap_IsJumpPoint}, 
    {"GetName", _wrap_CMap_GetName}, 
    {0,0}
};
static swig_lua_attribute swig_CMap_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CMap_bases[] = {0};
static const char *swig_CMap_base_names[] = {0};
static swig_lua_class _wrap_class_CMap = { "CMap", &SWIGTYPE_p_CMap,_wrap_new_CMap, swig_delete_CMap, swig_CMap_methods, swig_CMap_attributes, swig_CMap_bases, swig_CMap_base_names };

static int _wrap_CMapActor_GetMap(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  CMap *result = 0 ;
  
  SWIG_check_num_args("CMapActor::GetMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetMap",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetMap",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (CMap *)(arg1)->GetMap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CMap,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetSex(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CMapActor::GetSex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetSex",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetSex",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt8)(arg1)->GetSex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetCclass(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CMapActor::GetCclass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetCclass",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetCclass",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt8)(arg1)->GetCclass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetSexClass(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CMapActor::GetSexClass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetSexClass",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetSexClass",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt8)(arg1)->GetSexClass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetFaction(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CMapActor::GetFaction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetFaction",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetFaction",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt8)(arg1)->GetFaction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetState(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CMapActor::GetState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetState",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetState",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt8)(arg1)->GetState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetMap_id(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CMapActor::GetMap_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetMap_id",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetMap_id",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt32)(arg1)->GetMap_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetMap_ownerId(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CMapActor::GetMap_ownerId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetMap_ownerId",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetMap_ownerId",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt32)(arg1)->GetMap_ownerId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetReborn_map(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CMapActor::GetReborn_map",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetReborn_map",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetReborn_map",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt16)(arg1)->GetReborn_map();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetReborn_x(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CMapActor::GetReborn_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetReborn_x",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetReborn_x",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt16)(arg1)->GetReborn_x();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetReborn_y(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CMapActor::GetReborn_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetReborn_y",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetReborn_y",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt16)(arg1)->GetReborn_y();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetCurPosX(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CMapActor::GetCurPosX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetCurPosX",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetCurPosX",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt16)(arg1)->GetCurPosX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetCurPosY(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CMapActor::GetCurPosY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetCurPosY",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetCurPosY",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt16)(arg1)->GetCurPosY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetDstPosX(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CMapActor::GetDstPosX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetDstPosX",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetDstPosX",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt16)(arg1)->GetDstPosX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetDstPosY(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CMapActor::GetDstPosY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetDstPosY",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetDstPosY",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt16)(arg1)->GetDstPosY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetAction(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CMapActor::GetAction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetAction",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetAction",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt16)(arg1)->GetAction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetSpeed(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CMapActor::GetSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetSpeed",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetSpeed",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt32)(arg1)->GetSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetFollowId(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CMapActor::GetFollowId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetFollowId",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetFollowId",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt32)(arg1)->GetFollowId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_SetReborn(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  
  SWIG_check_num_args("CMapActor::SetReborn",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::SetReborn",1,"CMapActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CMapActor::SetReborn",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CMapActor::SetReborn",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CMapActor::SetReborn",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_SetReborn",1,SWIGTYPE_p_CMapActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  (arg1)->SetReborn(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_SetSpeed(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CMapActor::SetSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::SetSpeed",1,"CMapActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CMapActor::SetSpeed",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_SetSpeed",1,SWIGTYPE_p_CMapActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetUserType(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CMapActor::GetUserType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetUserType",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetUserType",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt8)CMapActor_GetUserType(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetJob(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CMapActor::GetJob",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetJob",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetJob",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (UInt8)CMapActor_GetJob(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapActor_GetName(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *arg1 = (CMapActor *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CMapActor::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapActor::GetName",1,"CMapActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapActor,0))){
    SWIG_fail_ptr("CMapActor_GetName",1,SWIGTYPE_p_CMapActor);
  }
  
  result = (char *)CMapActor_GetName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CMapActor(lua_State* L) {
  int SWIG_arg = 0;
  CMapActor *result = 0 ;
  
  SWIG_check_num_args("CMapActor::CMapActor",0,0)
  result = (CMapActor *)new CMapActor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CMapActor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CMapActor(void *obj) {
CMapActor *arg1 = (CMapActor *) obj;
delete arg1;
}
static swig_lua_method swig_CMapActor_methods[] = {
    {"GetMap", _wrap_CMapActor_GetMap}, 
    {"GetSex", _wrap_CMapActor_GetSex}, 
    {"GetCclass", _wrap_CMapActor_GetCclass}, 
    {"GetSexClass", _wrap_CMapActor_GetSexClass}, 
    {"GetFaction", _wrap_CMapActor_GetFaction}, 
    {"GetState", _wrap_CMapActor_GetState}, 
    {"GetMap_id", _wrap_CMapActor_GetMap_id}, 
    {"GetMap_ownerId", _wrap_CMapActor_GetMap_ownerId}, 
    {"GetReborn_map", _wrap_CMapActor_GetReborn_map}, 
    {"GetReborn_x", _wrap_CMapActor_GetReborn_x}, 
    {"GetReborn_y", _wrap_CMapActor_GetReborn_y}, 
    {"GetCurPosX", _wrap_CMapActor_GetCurPosX}, 
    {"GetCurPosY", _wrap_CMapActor_GetCurPosY}, 
    {"GetDstPosX", _wrap_CMapActor_GetDstPosX}, 
    {"GetDstPosY", _wrap_CMapActor_GetDstPosY}, 
    {"GetAction", _wrap_CMapActor_GetAction}, 
    {"GetSpeed", _wrap_CMapActor_GetSpeed}, 
    {"GetFollowId", _wrap_CMapActor_GetFollowId}, 
    {"SetReborn", _wrap_CMapActor_SetReborn}, 
    {"SetSpeed", _wrap_CMapActor_SetSpeed}, 
    {"GetUserType", _wrap_CMapActor_GetUserType}, 
    {"GetJob", _wrap_CMapActor_GetJob}, 
    {"GetName", _wrap_CMapActor_GetName}, 
    {0,0}
};
static swig_lua_attribute swig_CMapActor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CMapActor_bases[] = {0};
static const char *swig_CMapActor_base_names[] = {0};
static swig_lua_class _wrap_class_CMapActor = { "CMapActor", &SWIGTYPE_p_CMapActor,_wrap_new_CMapActor, swig_delete_CMapActor, swig_CMapActor_methods, swig_CMapActor_attributes, swig_CMapActor_bases, swig_CMapActor_base_names };

static int _wrap_CCharacter_GetParty(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CParty *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetParty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetParty",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetParty",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (CParty *)(arg1)->GetParty();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CParty,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetBag(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CItemBag *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetBag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetBag",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetBag",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (CItemBag *)(arg1)->GetBag();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CItemBag,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetItems(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CItemBag *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetItems",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetItems",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetItems",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (CItemBag *)(arg1)->GetItems();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CItemBag,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPartners(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CPartnerGroup *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetPartners",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPartners",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPartners",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (CPartnerGroup *)(arg1)->GetPartners();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPartnerGroup,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPets(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CPetGroup *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetPets",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPets",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPets",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (CPetGroup *)(arg1)->GetPets();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPetGroup,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetQuests(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CQuestSystem *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetQuests",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetQuests",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetQuests",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (CQuestSystem *)(arg1)->GetQuests();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CQuestSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetScript(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CScriptSystem *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetScript",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetScript",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetScript",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (CScriptSystem *)(arg1)->GetScript();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CScriptSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetCurPartner(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CPartner *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetCurPartner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetCurPartner",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetCurPartner",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (CPartner *)(arg1)->GetCurPartner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPartner,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetCurPet(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CPet *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetCurPet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetCurPet",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetCurPet",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (CPet *)(arg1)->GetCurPet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetAcct_id(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetAcct_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetAcct_id",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetAcct_id",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetAcct_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetChar_id(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetChar_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetChar_id",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetChar_id",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetChar_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetLevel(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetLevel",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetLevel",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetLevel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetNextLvExp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetNextLvExp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetNextLvExp",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetNextLvExp",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetNextLvExp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetExp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetExp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetExp",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetExp",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetExp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetSTA(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetSTA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetSTA",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetSTA",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetSTA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetSPR(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetSPR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetSPR",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetSPR",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetSPR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetSTR(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetSTR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetSTR",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetSTR",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetSTR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetCON(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetCON",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetCON",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetCON",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetCON();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetAGI(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetAGI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetAGI",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetAGI",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetAGI();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetATK(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetATK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetATK",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetATK",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetATK();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetDEF(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetDEF",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetDEF",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetDEF",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetDEF();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetHIT(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetHIT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetHIT",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetHIT",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetHIT();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEVA(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetEVA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEVA",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEVA",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetEVA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPOW(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetPOW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPOW",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPOW",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetPOW();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetSPD(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetSPD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetSPD",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetSPD",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetSPD();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetAttrPoint(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetAttrPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetAttrPoint",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetAttrPoint",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetAttrPoint();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetHP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetHP",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetHP",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetMHP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetMHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetMHP",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetMHP",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetMHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetMaxHP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetMaxHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetMaxHP",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetMaxHP",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetMaxHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetSP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetSP",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetSP",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetMSP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetMSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetMSP",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetMSP",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetMSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetMaxSP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetMaxSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetMaxSP",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetMaxSP",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetMaxSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetDP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetDP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetDP",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetDP",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetDP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetMDP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetMDP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetMDP",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetMDP",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetMDP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetMaxDP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetMaxDP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetMaxDP",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetMaxDP",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetMaxDP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetWC(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetWC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetWC",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetWC",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetWC();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetMaxWC(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetMaxWC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetMaxWC",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetMaxWC",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetMaxWC();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetWcExp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetWcExp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetWcExp",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetWcExp",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetWcExp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetVP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetVP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetVP",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetVP",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetVP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetMaxVP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetMaxVP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetMaxVP",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetMaxVP",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetMaxVP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetGoodness(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int32 result;
  
  SWIG_check_num_args("CCharacter::GetGoodness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetGoodness",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetGoodness",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (Int32)(arg1)->GetGoodness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetHonor(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetHonor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetHonor",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetHonor",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetHonor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetManor(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetManor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetManor",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetManor",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetManor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetFDonate(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetFDonate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetFDonate",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetFDonate",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetFDonate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetTotalFDonate(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetTotalFDonate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetTotalFDonate",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetTotalFDonate",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetTotalFDonate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetMDonate(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetMDonate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetMDonate",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetMDonate",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetMDonate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetTotalMDonate(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetTotalMDonate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetTotalMDonate",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetTotalMDonate",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetTotalMDonate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetYuanBao(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetYuanBao",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetYuanBao",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetYuanBao",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetYuanBao();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetMoney(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetMoney",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetMoney",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetMoney",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetMoney();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetBankMoney(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetBankMoney",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetBankMoney",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetBankMoney",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetBankMoney();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetSMoney(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetSMoney",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetSMoney",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetSMoney",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetSMoney();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPartner_id(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetPartner_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPartner_id",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPartner_id",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetPartner_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPartnerMob_id(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetPartnerMob_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPartnerMob_id",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPartnerMob_id",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetPartnerMob_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPartnerColorIndex(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetPartnerColorIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPartnerColorIndex",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPartnerColorIndex",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetPartnerColorIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPet_uid(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetPet_uid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPet_uid",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPet_uid",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetPet_uid();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPet_id(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetPet_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPet_id",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPet_id",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetPet_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPetColorIndex(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetPetColorIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPetColorIndex",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPetColorIndex",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetPetColorIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetMaxPartner(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CCharacter::GetMaxPartner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetMaxPartner",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetMaxPartner",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt8)(arg1)->GetMaxPartner();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetMaxPet(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CCharacter::GetMaxPet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetMaxPet",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetMaxPet",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt8)(arg1)->GetMaxPet();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPhoto_id(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetPhoto_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPhoto_id",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPhoto_id",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetPhoto_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetHairStyle1(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetHairStyle1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetHairStyle1",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetHairStyle1",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetHairStyle1();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetHairStyle2(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetHairStyle2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetHairStyle2",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetHairStyle2",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetHairStyle2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetHairColor(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetHairColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetHairColor",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetHairColor",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetHairColor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEq_weapon(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetEq_weapon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEq_weapon",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEq_weapon",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetEq_weapon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEq_weaponColor(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetEq_weaponColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEq_weaponColor",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEq_weaponColor",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetEq_weaponColor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEq_headBand(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetEq_headBand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEq_headBand",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEq_headBand",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetEq_headBand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEq_headColor(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetEq_headColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEq_headColor",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEq_headColor",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetEq_headColor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEq_cloth(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetEq_cloth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEq_cloth",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEq_cloth",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetEq_cloth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEq_clothColor(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetEq_clothColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEq_clothColor",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEq_clothColor",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetEq_clothColor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetState(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CCharacter::GetState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetState",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetState",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt8)(arg1)->GetState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetShortcut(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetShortcut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetShortcut",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetShortcut",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetShortcut",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetShortcut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetHasParty(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::GetHasParty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetHasParty",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetHasParty",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->GetHasParty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetIsLeader(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::GetIsLeader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetIsLeader",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetIsLeader",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->GetIsLeader();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPartyNetID(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  RPCNetID result;
  
  SWIG_check_num_args("CCharacter::GetPartyNetID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPartyNetID",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPartyNetID",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (arg1)->GetPartyNetID();
  {
    RPCNetID * resultptr = new RPCNetID((const RPCNetID &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RPCNetID,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPK_Value(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetPK_Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPK_Value",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPK_Value",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetPK_Value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEnablePK(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::GetEnablePK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEnablePK",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEnablePK",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->GetEnablePK();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEnableBlockGiven(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::GetEnableBlockGiven",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEnableBlockGiven",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEnableBlockGiven",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->GetEnableBlockGiven();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEnableBlockParty(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::GetEnableBlockParty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEnableBlockParty",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEnableBlockParty",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->GetEnableBlockParty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEnableBlockMsg(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::GetEnableBlockMsg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEnableBlockMsg",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEnableBlockMsg",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->GetEnableBlockMsg();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEnableBlockTrading(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::GetEnableBlockTrading",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEnableBlockTrading",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEnableBlockTrading",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->GetEnableBlockTrading();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetEnableBlockMakeFriend(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::GetEnableBlockMakeFriend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetEnableBlockMakeFriend",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetEnableBlockMakeFriend",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->GetEnableBlockMakeFriend();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetShortcuttype(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  UInt8 result;
  
  SWIG_check_num_args("CCharacter::GetShortcuttype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetShortcuttype",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetShortcuttype",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetShortcuttype",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (UInt8)(arg1)->GetShortcuttype(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetHawkerTime(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetHawkerTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetHawkerTime",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetHawkerTime",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetHawkerTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetAvailBackPack(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CCharacter::GetAvailBackPack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetAvailBackPack",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetAvailBackPack",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt8)(arg1)->GetAvailBackPack();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetAvailItemWareHouse(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CCharacter::GetAvailItemWareHouse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetAvailItemWareHouse",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetAvailItemWareHouse",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt8)(arg1)->GetAvailItemWareHouse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetAvailPartnerWareHouse(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CCharacter::GetAvailPartnerWareHouse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetAvailPartnerWareHouse",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetAvailPartnerWareHouse",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt8)(arg1)->GetAvailPartnerWareHouse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetAvailPetWareHouse(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CCharacter::GetAvailPetWareHouse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetAvailPetWareHouse",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetAvailPetWareHouse",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt8)(arg1)->GetAvailPetWareHouse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPvPScoreSingle(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetPvPScoreSingle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPvPScoreSingle",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPvPScoreSingle",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetPvPScoreSingle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetGuildUid(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetGuildUid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetGuildUid",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetGuildUid",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetGuildUid();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetGuildManorScale(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetGuildManorScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetGuildManorScale",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetGuildManorScale",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetGuildManorScale();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeBaseSpeed(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeBaseSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeBaseSpeed",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeBaseSpeed",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeBaseSpeed",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->ChangeBaseSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeSTA(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeSTA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeSTA",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeSTA",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeSTA",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeSTA(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeSPR(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeSPR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeSPR",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeSPR",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeSPR",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeSPR(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeSTR(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeSTR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeSTR",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeSTR",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeSTR",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeSTR(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeCON(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeCON",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeCON",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeCON",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeCON",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeCON(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeAGI(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeAGI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeAGI",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeAGI",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeAGI",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeAGI(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeATK(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeATK",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeATK",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeATK",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeATK",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeATK(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeDEF(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeDEF",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeDEF",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeDEF",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeDEF",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeDEF(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeHIT(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeHIT",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeHIT",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeHIT",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeHIT",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeHIT(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeEVA(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeEVA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeEVA",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeEVA",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeEVA",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeEVA(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangePOW(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangePOW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangePOW",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangePOW",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangePOW",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangePOW(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeSPD(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeSPD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeSPD",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeSPD",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeSPD",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeSPD(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeHP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeHP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeHP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeHP",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeMHP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeMHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeMHP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeMHP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeMHP",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeMHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeMaxHP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeMaxHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeMaxHP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeMaxHP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeMaxHP",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeMaxHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeSP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeSP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeSP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeSP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeSP",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeSP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeMSP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeMSP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeMSP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeMSP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeMSP",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeMSP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeMaxSP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeMaxSP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeMaxSP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeMaxSP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeMaxSP",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeMaxSP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeDP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeDP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeDP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeDP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeDP",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeDP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeMDP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeMDP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeMDP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeMDP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeMDP",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeMDP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeMaxDP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeMaxDP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeMaxDP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeMaxDP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeMaxDP",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeMaxDP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeWC(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeWC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeWC",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeWC",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeWC",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeWC(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeMaxWC(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeMaxWC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeMaxWC",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeMaxWC",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeMaxWC",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeMaxWC(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeWcExp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeWcExp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeWcExp",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeWcExp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeWcExp",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeWcExp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeVP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeVP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeVP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeVP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeVP",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeVP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeMaxVP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeMaxVP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeMaxVP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeMaxVP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeMaxVP",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeMaxVP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeFDonate(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeFDonate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeFDonate",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeFDonate",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeFDonate",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeFDonate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeGDonate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  UInt8 arg3 ;
  
  SWIG_check_num_args("CCharacter::ChangeGDonate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeGDonate",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeGDonate",2,"Int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::ChangeGDonate",3,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeGDonate",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  (arg1)->ChangeGDonate(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeGDonate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeGDonate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeGDonate",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeGDonate",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeGDonate",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeGDonate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeGDonate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CCharacter_ChangeGDonate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CCharacter_ChangeGDonate__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CCharacter_ChangeGDonate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CCharacter::ChangeGDonate(Int,UInt8)\n"
    "    CCharacter::ChangeGDonate(Int)\n");
  lua_error(L);return 0;
}


static int _wrap_CCharacter_ChangeMDonate(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeMDonate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeMDonate",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeMDonate",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeMDonate",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeMDonate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetGDonate(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetGDonate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetGDonate",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetGDonate",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetGDonate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetGTotalDonate(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetGTotalDonate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetGTotalDonate",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetGTotalDonate",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetGTotalDonate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeSpeakCount(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeSpeakCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeSpeakCount",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeSpeakCount",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeSpeakCount",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  (arg1)->ChangeSpeakCount(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeLevel(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int16 arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeLevel",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeLevel",2,"Int16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeLevel",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int16)lua_tonumber(L, 2);
  (arg1)->ChangeLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeExp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int32 arg2 ;
  Int32 arg3 = (Int32) 0 ;
  
  SWIG_check_num_args("CCharacter::ChangeExp",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeExp",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeExp",2,"Int32");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::ChangeExp",3,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeExp",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (Int32)lua_tonumber(L, 3);
  }
  (arg1)->ChangeExp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeMoney(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int32 arg2 ;
  Int32 arg3 = (Int32) 0 ;
  
  SWIG_check_num_args("CCharacter::ChangeMoney",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeMoney",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeMoney",2,"Int32");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::ChangeMoney",3,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeMoney",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (Int32)lua_tonumber(L, 3);
  }
  (arg1)->ChangeMoney(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeBankMoney(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int32 arg2 ;
  Int32 arg3 = (Int32) 0 ;
  
  SWIG_check_num_args("CCharacter::ChangeBankMoney",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeBankMoney",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeBankMoney",2,"Int32");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::ChangeBankMoney",3,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeBankMoney",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (Int32)lua_tonumber(L, 3);
  }
  (arg1)->ChangeBankMoney(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeHonor(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int32 arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeHonor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeHonor",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeHonor",2,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeHonor",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  (arg1)->ChangeHonor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeGoodness__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int32 arg2 ;
  Int32 arg3 ;
  
  SWIG_check_num_args("CCharacter::ChangeGoodness",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeGoodness",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeGoodness",2,"Int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::ChangeGoodness",3,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeGoodness",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  arg3 = (Int32)lua_tonumber(L, 3);
  (arg1)->ChangeGoodness(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeGoodness__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int32 arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeGoodness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeGoodness",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeGoodness",2,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeGoodness",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  (arg1)->ChangeGoodness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeGoodness(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CCharacter_ChangeGoodness__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CCharacter_ChangeGoodness__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CCharacter_ChangeGoodness'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CCharacter::ChangeGoodness(Int32,Int32)\n"
    "    CCharacter::ChangeGoodness(Int32)\n");
  lua_error(L);return 0;
}


static int _wrap_CCharacter_ChangeSMoney(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int32 arg2 ;
  Int32 arg3 = (Int32) 0 ;
  
  SWIG_check_num_args("CCharacter::ChangeSMoney",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeSMoney",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeSMoney",2,"Int32");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::ChangeSMoney",3,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeSMoney",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (Int32)lua_tonumber(L, 3);
  }
  (arg1)->ChangeSMoney(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangePvPScoreSingle(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int32 arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangePvPScoreSingle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangePvPScoreSingle",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangePvPScoreSingle",2,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangePvPScoreSingle",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  (arg1)->ChangePvPScoreSingle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetFaction(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetFaction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetFaction",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetFaction",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetFaction",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->SetFaction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetLevel(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetLevel",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetLevel",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetLevel",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetExp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetExp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetExp",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetExp",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetExp",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetExp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetAttrib1(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  UInt16 arg5 ;
  UInt16 arg6 ;
  
  SWIG_check_num_args("CCharacter::SetAttrib1",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetAttrib1",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetAttrib1",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::SetAttrib1",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CCharacter::SetAttrib1",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CCharacter::SetAttrib1",5,"UInt16");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CCharacter::SetAttrib1",6,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetAttrib1",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt16)lua_tonumber(L, 6);
  (arg1)->SetAttrib1(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetAttrib2(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  UInt16 arg5 ;
  UInt16 arg6 ;
  UInt16 arg7 ;
  
  SWIG_check_num_args("CCharacter::SetAttrib2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetAttrib2",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetAttrib2",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::SetAttrib2",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CCharacter::SetAttrib2",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CCharacter::SetAttrib2",5,"UInt16");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CCharacter::SetAttrib2",6,"UInt16");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CCharacter::SetAttrib2",7,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetAttrib2",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt16)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt16)lua_tonumber(L, 7);
  (arg1)->SetAttrib2(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetGoodness(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int32 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetGoodness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetGoodness",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetGoodness",2,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetGoodness",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  (arg1)->SetGoodness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetHonor(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetHonor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetHonor",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetHonor",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetHonor",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetHonor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetMoney(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetMoney",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetMoney",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetMoney",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetMoney",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetMoney(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetBankMoney(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetBankMoney",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetBankMoney",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetBankMoney",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetBankMoney",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetBankMoney(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetSMoney(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetSMoney",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetSMoney",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetSMoney",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetSMoney",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetSMoney(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetPK_Value(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetPK_Value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetPK_Value",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetPK_Value",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetPK_Value",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetPK_Value(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetEnablePKEx(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CCharacter::SetEnablePKEx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetEnablePKEx",1,"CCharacter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CCharacter::SetEnablePKEx",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetEnablePKEx",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetEnablePKEx(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetReborn(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  
  SWIG_check_num_args("CCharacter::SetReborn",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetReborn",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetReborn",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::SetReborn",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CCharacter::SetReborn",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetReborn",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  (arg1)->SetReborn(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetHP__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  
  SWIG_check_num_args("CCharacter::SetHP",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetHP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetHP",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::SetHP",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CCharacter::SetHP",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetHP",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  (arg1)->SetHP(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetSP__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  
  SWIG_check_num_args("CCharacter::SetSP",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetSP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetSP",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::SetSP",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CCharacter::SetSP",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetSP",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  (arg1)->SetSP(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetHP__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetHP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetHP",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetHP",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetHP(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CCharacter_SetHP__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CCharacter_SetHP__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CCharacter_SetHP'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CCharacter::SetHP(UInt16,UInt16,UInt16)\n"
    "    CCharacter::SetHP(UInt16)\n");
  lua_error(L);return 0;
}


static int _wrap_CCharacter_SetMHP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetMHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetMHP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetMHP",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetMHP",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetMHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetMaxHP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetMaxHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetMaxHP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetMaxHP",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetMaxHP",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetMaxHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetSP__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetSP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetSP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetSP",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetSP",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetSP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetSP(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CCharacter_SetSP__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CCharacter_SetSP__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CCharacter_SetSP'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CCharacter::SetSP(UInt16,UInt16,UInt16)\n"
    "    CCharacter::SetSP(UInt16)\n");
  lua_error(L);return 0;
}


static int _wrap_CCharacter_SetMSP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetMSP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetMSP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetMSP",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetMSP",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetMSP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetMaxSP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetMaxSP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetMaxSP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetMaxSP",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetMaxSP",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetMaxSP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetDP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetDP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetDP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetDP",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetDP",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetDP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetMDP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetMDP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetMDP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetMDP",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetMDP",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetMDP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetMaxDP(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetMaxDP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetMaxDP",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetMaxDP",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetMaxDP",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetMaxDP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetMaxPartner(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetMaxPartner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetMaxPartner",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetMaxPartner",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetMaxPartner",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->SetMaxPartner(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetMaxPet(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetMaxPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetMaxPet",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetMaxPet",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetMaxPet",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->SetMaxPet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetPet_id(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetPet_id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetPet_id",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetPet_id",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetPet_id",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetPet_id(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetHawkerTime(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetHawkerTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetHawkerTime",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetHawkerTime",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetHawkerTime",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetHawkerTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetFull(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool arg2 = (bool) true ;
  bool arg3 = (bool) true ;
  bool arg4 = (bool) true ;
  bool arg5 = (bool) true ;
  
  SWIG_check_num_args("CCharacter::SetFull",1,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetFull",1,"CCharacter *");
  if(lua_gettop(L)>=2 && !lua_isboolean(L,2)) SWIG_fail_arg("CCharacter::SetFull",2,"bool");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CCharacter::SetFull",3,"bool");
  if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("CCharacter::SetFull",4,"bool");
  if(lua_gettop(L)>=5 && !lua_isboolean(L,5)) SWIG_fail_arg("CCharacter::SetFull",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetFull",1,SWIGTYPE_p_CCharacter);
  }
  
  if(lua_gettop(L)>=2){
    arg2 = (lua_toboolean(L, 2)!=0);
  }
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  if(lua_gettop(L)>=4){
    arg4 = (lua_toboolean(L, 4)!=0);
  }
  if(lua_gettop(L)>=5){
    arg5 = (lua_toboolean(L, 5)!=0);
  }
  (arg1)->SetFull(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ForceAntiHackPopUp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::ForceAntiHackPopUp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ForceAntiHackPopUp",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ForceAntiHackPopUp",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->ForceAntiHackPopUp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_IsHawking(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::IsHawking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::IsHawking",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_IsHawking",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->IsHawking();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_IsInMap(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::IsInMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::IsInMap",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_IsInMap",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->IsInMap();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_IsInBattle(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::IsInBattle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::IsInBattle",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_IsInBattle",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->IsInBattle();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_IsSit(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::IsSit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::IsSit",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_IsSit",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->IsSit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_HasBuff(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::HasBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::HasBuff",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::HasBuff",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_HasBuff",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasBuff(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_AddBuff(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt32 arg3 ;
  UInt32 arg4 ;
  UInt32 arg5 ;
  UInt32 arg6 ;
  UInt8 arg7 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::AddBuff",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::AddBuff",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::AddBuff",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::AddBuff",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CCharacter::AddBuff",4,"UInt32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CCharacter::AddBuff",5,"UInt32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CCharacter::AddBuff",6,"UInt32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CCharacter::AddBuff",7,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_AddBuff",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt32)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt32)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt8)lua_tonumber(L, 7);
  result = (bool)(arg1)->AddBuff(arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_HasEquipment(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::HasEquipment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::HasEquipment",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::HasEquipment",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_HasEquipment",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasEquipment(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_RemoveBuff(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::RemoveBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::RemoveBuff",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::RemoveBuff",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_RemoveBuff",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->RemoveBuff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_RemoveBuffSchool(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::RemoveBuffSchool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::RemoveBuffSchool",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::RemoveBuffSchool",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_RemoveBuffSchool",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->RemoveBuffSchool(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_FindBuff(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  ExtractedBuffData *result = 0 ;
  
  SWIG_check_num_args("CCharacter::FindBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::FindBuff",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::FindBuff",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_FindBuff",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (ExtractedBuffData *)(arg1)->FindBuff(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ExtractedBuffData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_CheckBattle(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::CheckBattle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::CheckBattle",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_CheckBattle",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->CheckBattle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_EncounterBattle(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CCharacter::EncounterBattle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::EncounterBattle",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::EncounterBattle",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_EncounterBattle",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->EncounterBattle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_CanJumpMap(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::CanJumpMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::CanJumpMap",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_CanJumpMap",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->CanJumpMap();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_JumpMap(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  UInt8 arg5 = (UInt8) 0 ;
  UInt32 arg6 = (UInt32) 0 ;
  UInt16 arg7 = (UInt16) 0 ;
  bool arg8 = (bool) BOOLEAN_TRUE ;
  
  SWIG_check_num_args("CCharacter::JumpMap",4,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::JumpMap",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::JumpMap",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::JumpMap",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CCharacter::JumpMap",4,"UInt16");
  if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("CCharacter::JumpMap",5,"UInt8");
  if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("CCharacter::JumpMap",6,"UInt32");
  if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("CCharacter::JumpMap",7,"UInt16");
  if(lua_gettop(L)>=8 && !lua_isboolean(L,8)) SWIG_fail_arg("CCharacter::JumpMap",8,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_JumpMap",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  if(lua_gettop(L)>=5){
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
    arg5 = (UInt8)lua_tonumber(L, 5);
  }
  if(lua_gettop(L)>=6){
    SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
    arg6 = (UInt32)lua_tonumber(L, 6);
  }
  if(lua_gettop(L)>=7){
    SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
    arg7 = (UInt16)lua_tonumber(L, 7);
  }
  if(lua_gettop(L)>=8){
    arg8 = (lua_toboolean(L, 8)!=0);
  }
  (arg1)->JumpMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_OpenHawkerOwnerMenu(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::OpenHawkerOwnerMenu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::OpenHawkerOwnerMenu",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_OpenHawkerOwnerMenu",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->OpenHawkerOwnerMenu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_JumpReborn(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::JumpReborn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::JumpReborn",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_JumpReborn",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->JumpReborn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ShowRumor(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("CCharacter::ShowRumor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ShowRumor",1,"CCharacter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CCharacter::ShowRumor",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("CCharacter::ShowRumor",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ShowRumor",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->ShowRumor((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ShowRank(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CCharacter::ShowRank",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ShowRank",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ShowRank",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ShowRank",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->ShowRank(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ShowGuildRank(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::ShowGuildRank",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ShowGuildRank",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ShowGuildRank",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->ShowGuildRank();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_EnterInstance(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  UInt16 arg3 ;
  UInt32 arg4 ;
  UInt16 arg5 ;
  UInt16 arg6 ;
  UInt16 arg7 ;
  
  SWIG_check_num_args("CCharacter::EnterInstance",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::EnterInstance",1,"CCharacter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CCharacter::EnterInstance",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::EnterInstance",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CCharacter::EnterInstance",4,"UInt32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CCharacter::EnterInstance",5,"UInt16");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CCharacter::EnterInstance",6,"UInt16");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CCharacter::EnterInstance",7,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_EnterInstance",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt16)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt16)lua_tonumber(L, 7);
  (arg1)->EnterInstance((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_EnterEmptyInstance(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  UInt16 arg3 ;
  UInt32 arg4 ;
  UInt16 arg5 ;
  UInt16 arg6 ;
  UInt16 arg7 ;
  
  SWIG_check_num_args("CCharacter::EnterEmptyInstance",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::EnterEmptyInstance",1,"CCharacter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CCharacter::EnterEmptyInstance",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::EnterEmptyInstance",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CCharacter::EnterEmptyInstance",4,"UInt32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CCharacter::EnterEmptyInstance",5,"UInt16");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CCharacter::EnterEmptyInstance",6,"UInt16");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CCharacter::EnterEmptyInstance",7,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_EnterEmptyInstance",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt16)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt16)lua_tonumber(L, 7);
  (arg1)->EnterEmptyInstance((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_LeaveInstance(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  UInt16 arg5 ;
  UInt16 arg6 ;
  UInt8 arg7 ;
  
  SWIG_check_num_args("CCharacter::LeaveInstance",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::LeaveInstance",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::LeaveInstance",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::LeaveInstance",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CCharacter::LeaveInstance",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CCharacter::LeaveInstance",5,"UInt16");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CCharacter::LeaveInstance",6,"UInt16");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CCharacter::LeaveInstance",7,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_LeaveInstance",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt16)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt8)lua_tonumber(L, 7);
  (arg1)->LeaveInstance(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ResetInstance(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  
  SWIG_check_num_args("CCharacter::ResetInstance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ResetInstance",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ResetInstance",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::ResetInstance",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ResetInstance",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  (arg1)->ResetInstance(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_CloseInstance(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  
  SWIG_check_num_args("CCharacter::CloseInstance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::CloseInstance",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::CloseInstance",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::CloseInstance",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_CloseInstance",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  (arg1)->CloseInstance(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_HasSkill(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::HasSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::HasSkill",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::HasSkill",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_HasSkill",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasSkill(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_AddSkill(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::AddSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::AddSkill",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::AddSkill",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_AddSkill",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->AddSkill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_RemoveSkill(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::RemoveSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::RemoveSkill",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::RemoveSkill",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_RemoveSkill",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->RemoveSkill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_HasParty(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::HasParty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::HasParty",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_HasParty",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->HasParty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_HasTempParty(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::HasTempParty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::HasTempParty",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_HasTempParty",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->HasTempParty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_IsLeader(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::IsLeader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::IsLeader",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_IsLeader",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->IsLeader();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ItemFail(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CCharacter::ItemFail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ItemFail",1,"CCharacter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CCharacter::ItemFail",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ItemFail",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->ItemFail((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_UseItemMsg(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CCharacter::UseItemMsg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::UseItemMsg",1,"CCharacter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CCharacter::UseItemMsg",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_UseItemMsg",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->UseItemMsg((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SkillFail(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CCharacter::SkillFail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SkillFail",1,"CCharacter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CCharacter::SkillFail",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SkillFail",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SkillFail((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_UseSkillMsg(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CCharacter::UseSkillMsg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::UseSkillMsg",1,"CCharacter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CCharacter::UseSkillMsg",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_UseSkillMsg",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->UseSkillMsg((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetSkillCount(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetSkillCount",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetSkillCount",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetSkillCount",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::GetSkillCount",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetSkillCount",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  result = (UInt16)(arg1)->GetSkillCount(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetSkillLv(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetSkillLv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetSkillLv",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetSkillLv",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetSkillLv",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetSkillLv(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeSkillLv(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  Int arg3 ;
  
  SWIG_check_num_args("CCharacter::ChangeSkillLv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeSkillLv",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeSkillLv",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::ChangeSkillLv",3,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeSkillLv",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  arg3 = (Int)lua_tonumber(L, 3);
  (arg1)->ChangeSkillLv(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetSkillCoolDown(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  DWORD arg3 ;
  DWORD *argp3 ;
  
  SWIG_check_num_args("CCharacter::SetSkillCoolDown",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetSkillCoolDown",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetSkillCoolDown",2,"UInt16");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("CCharacter::SetSkillCoolDown",3,"DWORD");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetSkillCoolDown",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_DWORD,0))){
    SWIG_fail_ptr("CCharacter_SetSkillCoolDown",3,SWIGTYPE_p_DWORD);
  }
  arg3 = *argp3;
  
  (arg1)->SetSkillCoolDown(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetEncounterBattle(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CCharacter::SetEncounterBattle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetEncounterBattle",1,"CCharacter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CCharacter::SetEncounterBattle",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetEncounterBattle",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetEncounterBattle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetStepMod(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("CCharacter::SetStepMod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetStepMod",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetStepMod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetStepMod",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetStepMod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ResetCharLevel(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::ResetCharLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ResetCharLevel",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ResetCharLevel",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ResetCharLevel",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->ResetCharLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ReverseAttrib(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  UInt16 arg3 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::ReverseAttrib",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ReverseAttrib",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ReverseAttrib",2,"UInt8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::ReverseAttrib",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ReverseAttrib",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  result = (bool)(arg1)->ReverseAttrib(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_HasTitle(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::HasTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::HasTitle",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::HasTitle",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_HasTitle",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasTitle(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_AddTitle(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::AddTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::AddTitle",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::AddTitle",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_AddTitle",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->AddTitle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_RemoveTitle(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::RemoveTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::RemoveTitle",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::RemoveTitle",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_RemoveTitle",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->RemoveTitle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetTradingTarget(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  RPCNetID arg2 ;
  RPCNetID *argp2 ;
  
  SWIG_check_num_args("CCharacter::SetTradingTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetTradingTarget",1,"CCharacter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CCharacter::SetTradingTarget",2,"RPCNetID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetTradingTarget",1,SWIGTYPE_p_CCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_RPCNetID,0))){
    SWIG_fail_ptr("CCharacter_SetTradingTarget",2,SWIGTYPE_p_RPCNetID);
  }
  arg2 = *argp2;
  
  (arg1)->SetTradingTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ResetTradingTarget(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::ResetTradingTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ResetTradingTarget",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ResetTradingTarget",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->ResetTradingTarget();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetTradingObject(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CTrading *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetTradingObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetTradingObject",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetTradingObject",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (CTrading *)(arg1)->GetTradingObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CTrading,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetTradingObject(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CTrading *arg2 = (CTrading *) 0 ;
  
  SWIG_check_num_args("CCharacter::SetTradingObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetTradingObject",1,"CCharacter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CCharacter::SetTradingObject",2,"CTrading *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetTradingObject",1,SWIGTYPE_p_CCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CTrading,0))){
    SWIG_fail_ptr("CCharacter_SetTradingObject",2,SWIGTYPE_p_CTrading);
  }
  
  (arg1)->SetTradingObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_IsTrading(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::IsTrading",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::IsTrading",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_IsTrading",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->IsTrading();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ClearReqTrading(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::ClearReqTrading",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ClearReqTrading",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ClearReqTrading",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->ClearReqTrading();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_RaiseUpdate(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::RaiseUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::RaiseUpdate",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_RaiseUpdate",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->RaiseUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_CancelUpdate(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::CancelUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::CancelUpdate",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_CancelUpdate",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->CancelUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_AddEquipmentBuff(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  UInt16 arg3 ;
  UInt32 arg4 ;
  UInt32 arg5 ;
  UInt32 arg6 ;
  UInt32 arg7 ;
  UInt8 arg8 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::AddEquipmentBuff",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::AddEquipmentBuff",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::AddEquipmentBuff",2,"UInt8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::AddEquipmentBuff",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CCharacter::AddEquipmentBuff",4,"UInt32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CCharacter::AddEquipmentBuff",5,"UInt32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CCharacter::AddEquipmentBuff",6,"UInt32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CCharacter::AddEquipmentBuff",7,"UInt32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CCharacter::AddEquipmentBuff",8,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_AddEquipmentBuff",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt32)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt32)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt32)lua_tonumber(L, 7);
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (UInt8)lua_tonumber(L, 8);
  result = (bool)(arg1)->AddEquipmentBuff(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_OpenGuildApplyMenu(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::OpenGuildApplyMenu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::OpenGuildApplyMenu",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_OpenGuildApplyMenu",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->OpenGuildApplyMenu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_CreateGuild(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::CreateGuild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::CreateGuild",1,"CCharacter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CCharacter::CreateGuild",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_CreateGuild",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->CreateGuild((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_OpenCreateGuildMenu(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::OpenCreateGuildMenu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::OpenCreateGuildMenu",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_OpenCreateGuildMenu",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->OpenCreateGuildMenu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_HasGuild(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::HasGuild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::HasGuild",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_HasGuild",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->HasGuild();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_OpenGiftBox(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::OpenGiftBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::OpenGiftBox",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_OpenGiftBox",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->OpenGiftBox();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_RemoveGuildApply(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::RemoveGuildApply",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::RemoveGuildApply",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_RemoveGuildApply",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->RemoveGuildApply();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_AddAvailBackPack(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CCharacter::AddAvailBackPack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::AddAvailBackPack",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::AddAvailBackPack",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_AddAvailBackPack",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->AddAvailBackPack(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_AddAvailItemWareHouse(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CCharacter::AddAvailItemWareHouse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::AddAvailItemWareHouse",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::AddAvailItemWareHouse",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_AddAvailItemWareHouse",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->AddAvailItemWareHouse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_AddAvailPartnerWareHouse(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CCharacter::AddAvailPartnerWareHouse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::AddAvailPartnerWareHouse",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::AddAvailPartnerWareHouse",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_AddAvailPartnerWareHouse",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->AddAvailPartnerWareHouse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_AddAvailPetWareHouse(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CCharacter::AddAvailPetWareHouse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::AddAvailPetWareHouse",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::AddAvailPetWareHouse",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_AddAvailPetWareHouse",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->AddAvailPetWareHouse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_HasFollower(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::HasFollower",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::HasFollower",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::HasFollower",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_HasFollower",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasFollower(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetFollowerId(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetFollowerId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetFollowerId",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetFollowerId",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetFollowerId",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetFollowerId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetFollowerCount(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetFollowerCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetFollowerCount",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetFollowerCount",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetFollowerCount",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetFollowerCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetFollowerTotal(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetFollowerTotal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetFollowerTotal",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetFollowerTotal",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetFollowerTotal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_OpenWareHouse(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::OpenWareHouse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::OpenWareHouse",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_OpenWareHouse",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->OpenWareHouse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetGuild(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CGuild *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetGuild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetGuild",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetGuild",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (CGuild *)(arg1)->GetGuild();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGuild,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetGuildPos(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CCharacter::GetGuildPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetGuildPos",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetGuildPos",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt8)(arg1)->GetGuildPos();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetJoinGuildPeriod(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetJoinGuildPeriod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetJoinGuildPeriod",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetJoinGuildPeriod",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetJoinGuildPeriod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetInitAutoCount(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetInitAutoCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetInitAutoCount",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetInitAutoCount",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetInitAutoCount",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetInitAutoCount(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetInitAutoCount(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetInitAutoCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetInitAutoCount",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetInitAutoCount",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt16)(arg1)->GetInitAutoCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetAntiHackEnable(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CCharacter::SetAntiHackEnable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetAntiHackEnable",1,"CCharacter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CCharacter::SetAntiHackEnable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetAntiHackEnable",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetAntiHackEnable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetAntiHackEnable(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::GetAntiHackEnable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetAntiHackEnable",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetAntiHackEnable",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->GetAntiHackEnable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_IsGuildWarWin(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::IsGuildWarWin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::IsGuildWarWin",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_IsGuildWarWin",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->IsGuildWarWin();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetRelationSystem(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  CRelationSystem *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetRelationSystem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetRelationSystem",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetRelationSystem",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (CRelationSystem *)(arg1)->GetRelationSystem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CRelationSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetSibling_id(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetSibling_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetSibling_id",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetSibling_id",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetSibling_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetWantedReward(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CCharacter::GetWantedReward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetWantedReward",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetWantedReward",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt32)(arg1)->GetWantedReward();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_SetWantedReward(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CCharacter::SetWantedReward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::SetWantedReward",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::SetWantedReward",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_SetWantedReward",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetWantedReward(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_OpenSellYuanBao(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::OpenSellYuanBao",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::OpenSellYuanBao",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_OpenSellYuanBao",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->OpenSellYuanBao();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_UpdateWantedReward(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  Int32 arg3 ;
  
  SWIG_check_num_args("CCharacter::UpdateWantedReward",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::UpdateWantedReward",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::UpdateWantedReward",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::UpdateWantedReward",3,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_UpdateWantedReward",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  arg3 = (Int32)lua_tonumber(L, 3);
  (arg1)->UpdateWantedReward(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_RequestJailDeliveryId(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::RequestJailDeliveryId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::RequestJailDeliveryId",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_RequestJailDeliveryId",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->RequestJailDeliveryId();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_RequestBailId(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::RequestBailId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::RequestBailId",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_RequestBailId",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->RequestBailId();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_RequestTraceId(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::RequestTraceId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::RequestTraceId",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_RequestTraceId",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->RequestTraceId();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_IsExcuteMarriage(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::IsExcuteMarriage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::IsExcuteMarriage",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_IsExcuteMarriage",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->IsExcuteMarriage();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_OpenBusinessShop(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::OpenBusinessShop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::OpenBusinessShop",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::OpenBusinessShop",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_OpenBusinessShop",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->OpenBusinessShop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeBusinessProfit(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int32 arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeBusinessProfit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeBusinessProfit",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeBusinessProfit",2,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeBusinessProfit",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  (arg1)->ChangeBusinessProfit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_OpenBusinessLog(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::OpenBusinessLog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::OpenBusinessLog",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_OpenBusinessLog",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->OpenBusinessLog();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ApplyTrader(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::ApplyTrader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ApplyTrader",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ApplyTrader",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->ApplyTrader();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPartnerCollectionCount(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CCharacter::GetPartnerCollectionCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPartnerCollectionCount",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetPartnerCollectionCount",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPartnerCollectionCount",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetPartnerCollectionCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_Sit(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::Sit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::Sit",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_Sit",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->Sit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ShowGuildMsg(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  UInt32 arg3 ;
  
  SWIG_check_num_args("CCharacter::ShowGuildMsg",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ShowGuildMsg",1,"CCharacter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CCharacter::ShowGuildMsg",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::ShowGuildMsg",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ShowGuildMsg",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  (arg1)->ShowGuildMsg((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ShowAwardMsg(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CCharacter::ShowAwardMsg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ShowAwardMsg",1,"CCharacter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CCharacter::ShowAwardMsg",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ShowAwardMsg",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->ShowAwardMsg((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_OpenSearchPartyPanel(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::OpenSearchPartyPanel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::OpenSearchPartyPanel",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_OpenSearchPartyPanel",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->OpenSearchPartyPanel();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_OpenWeaponsRankPanel(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CCharacter::OpenWeaponsRankPanel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::OpenWeaponsRankPanel",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_OpenWeaponsRankPanel",1,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->OpenWeaponsRankPanel();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPlayerEquipData(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  CItemBag *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetPlayerEquipData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPlayerEquipData",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetPlayerEquipData",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPlayerEquipData",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (CItemBag *)(arg1)->GetPlayerEquipData(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CItemBag,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_HandleGuideEvent(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CCharacter::HandleGuideEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::HandleGuideEvent",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::HandleGuideEvent",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_HandleGuideEvent",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->HandleGuideEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeToMob(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeToMob",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeToMob",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeToMob",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeToMob",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->ChangeToMob(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeModel(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeModel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeModel",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeModel",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeModel",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->ChangeModel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeModelSkill(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeModelSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeModelSkill",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeModelSkill",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeModelSkill",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->ChangeModelSkill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_AddPartnerCollection(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::AddPartnerCollection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::AddPartnerCollection",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::AddPartnerCollection",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_AddPartnerCollection",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->AddPartnerCollection(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetUserType(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CCharacter::GetUserType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetUserType",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetUserType",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (UInt8)CCharacter_GetUserType(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetTitle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetTitle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetTitle",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetTitle",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (char *)CCharacter_GetTitle__SWIG_0(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetTitle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetTitle",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetTitle",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetTitle",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (char *)CCharacter_GetTitle__SWIG_1(arg1,arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetTitle(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CCharacter_GetTitle__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CCharacter_GetTitle__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CCharacter_GetTitle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CCharacter::GetTitle()\n"
    "    CCharacter::GetTitle(UInt16)\n");
  lua_error(L);return 0;
}


static int _wrap_CCharacter_GetPartnerName(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetPartnerName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPartnerName",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPartnerName",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (char *)CCharacter_GetPartnerName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetPetName(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetPetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetPetName",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetPetName",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (char *)CCharacter_GetPetName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetCharNameLink(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetCharNameLink",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetCharNameLink",1,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetCharNameLink",1,SWIGTYPE_p_CCharacter);
  }
  
  result = (char *)CCharacter_GetCharNameLink(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetCharPartnerNameLink__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetCharPartnerNameLink",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetCharPartnerNameLink",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetCharPartnerNameLink",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::GetCharPartnerNameLink",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetCharPartnerNameLink",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  result = (char *)CCharacter_GetCharPartnerNameLink__SWIG_0(arg1,arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetCharPartnerNameLink__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetCharPartnerNameLink",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetCharPartnerNameLink",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetCharPartnerNameLink",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetCharPartnerNameLink",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (char *)CCharacter_GetCharPartnerNameLink__SWIG_0(arg1,arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetCharPartnerNameLink(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CCharacter_GetCharPartnerNameLink__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CCharacter_GetCharPartnerNameLink__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CCharacter_GetCharPartnerNameLink'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CCharacter::GetCharPartnerNameLink(UInt32,UInt16)\n"
    "    CCharacter::GetCharPartnerNameLink(UInt32)\n");
  lua_error(L);return 0;
}


static int _wrap_CCharacter_GetCharPetNameLink__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetCharPetNameLink",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetCharPetNameLink",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetCharPetNameLink",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::GetCharPetNameLink",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetCharPetNameLink",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  result = (char *)CCharacter_GetCharPetNameLink__SWIG_0(arg1,arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetCharPetNameLink__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetCharPetNameLink",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetCharPetNameLink",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetCharPetNameLink",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetCharPetNameLink",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (char *)CCharacter_GetCharPetNameLink__SWIG_0(arg1,arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetCharPetNameLink(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CCharacter_GetCharPetNameLink__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CCharacter_GetCharPetNameLink__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CCharacter_GetCharPetNameLink'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CCharacter::GetCharPetNameLink(UInt32,UInt16)\n"
    "    CCharacter::GetCharPetNameLink(UInt32)\n");
  lua_error(L);return 0;
}


static int _wrap_CCharacter_GetCharItemNameLink__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  UInt8 arg3 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetCharItemNameLink",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetCharItemNameLink",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetCharItemNameLink",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CCharacter::GetCharItemNameLink",3,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetCharItemNameLink",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  result = (char *)CCharacter_GetCharItemNameLink__SWIG_0(arg1,arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetCharItemNameLink__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt32 arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CCharacter::GetCharItemNameLink",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::GetCharItemNameLink",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::GetCharItemNameLink",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_GetCharItemNameLink",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (char *)CCharacter_GetCharItemNameLink__SWIG_0(arg1,arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_GetCharItemNameLink(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CCharacter_GetCharItemNameLink__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CCharacter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CCharacter_GetCharItemNameLink__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CCharacter_GetCharItemNameLink'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CCharacter::GetCharItemNameLink(UInt32,UInt8)\n"
    "    CCharacter::GetCharItemNameLink(UInt32)\n");
  lua_error(L);return 0;
}


static int _wrap_CCharacter_ChangeHp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeHp",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeHp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeHp",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CCharacter_ChangeHp(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeVp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeVp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeVp",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeVp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeVp",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CCharacter_ChangeVp(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeMHp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeMHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeMHp",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeMHp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeMHp",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CCharacter_ChangeMHp(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeSp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeSp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeSp",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeSp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeSp",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CCharacter_ChangeSp(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeMSp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeMSp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeMSp",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeMSp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeMSp",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CCharacter_ChangeMSp(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeDp(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeDp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeDp",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeDp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeDp",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CCharacter_ChangeDp(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_ChangeWc(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CCharacter::ChangeWc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::ChangeWc",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::ChangeWc",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_ChangeWc",1,SWIGTYPE_p_CCharacter);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CCharacter_ChangeWc(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCharacter_IsBuffExist(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *arg1 = (CCharacter *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CCharacter::IsBuffExist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCharacter::IsBuffExist",1,"CCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CCharacter::IsBuffExist",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CCharacter_IsBuffExist",1,SWIGTYPE_p_CCharacter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)CCharacter_IsBuffExist(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CCharacter(lua_State* L) {
  int SWIG_arg = 0;
  CCharacter *result = 0 ;
  
  SWIG_check_num_args("CCharacter::CCharacter",0,0)
  result = (CCharacter *)new CCharacter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCharacter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CCharacter(void *obj) {
CCharacter *arg1 = (CCharacter *) obj;
delete arg1;
}
static swig_lua_method swig_CCharacter_methods[] = {
    {"GetParty", _wrap_CCharacter_GetParty}, 
    {"GetBag", _wrap_CCharacter_GetBag}, 
    {"GetItems", _wrap_CCharacter_GetItems}, 
    {"GetPartners", _wrap_CCharacter_GetPartners}, 
    {"GetPets", _wrap_CCharacter_GetPets}, 
    {"GetQuests", _wrap_CCharacter_GetQuests}, 
    {"GetScript", _wrap_CCharacter_GetScript}, 
    {"GetCurPartner", _wrap_CCharacter_GetCurPartner}, 
    {"GetCurPet", _wrap_CCharacter_GetCurPet}, 
    {"GetAcct_id", _wrap_CCharacter_GetAcct_id}, 
    {"GetChar_id", _wrap_CCharacter_GetChar_id}, 
    {"GetLevel", _wrap_CCharacter_GetLevel}, 
    {"GetNextLvExp", _wrap_CCharacter_GetNextLvExp}, 
    {"GetExp", _wrap_CCharacter_GetExp}, 
    {"GetSTA", _wrap_CCharacter_GetSTA}, 
    {"GetSPR", _wrap_CCharacter_GetSPR}, 
    {"GetSTR", _wrap_CCharacter_GetSTR}, 
    {"GetCON", _wrap_CCharacter_GetCON}, 
    {"GetAGI", _wrap_CCharacter_GetAGI}, 
    {"GetATK", _wrap_CCharacter_GetATK}, 
    {"GetDEF", _wrap_CCharacter_GetDEF}, 
    {"GetHIT", _wrap_CCharacter_GetHIT}, 
    {"GetEVA", _wrap_CCharacter_GetEVA}, 
    {"GetPOW", _wrap_CCharacter_GetPOW}, 
    {"GetSPD", _wrap_CCharacter_GetSPD}, 
    {"GetAttrPoint", _wrap_CCharacter_GetAttrPoint}, 
    {"GetHP", _wrap_CCharacter_GetHP}, 
    {"GetMHP", _wrap_CCharacter_GetMHP}, 
    {"GetMaxHP", _wrap_CCharacter_GetMaxHP}, 
    {"GetSP", _wrap_CCharacter_GetSP}, 
    {"GetMSP", _wrap_CCharacter_GetMSP}, 
    {"GetMaxSP", _wrap_CCharacter_GetMaxSP}, 
    {"GetDP", _wrap_CCharacter_GetDP}, 
    {"GetMDP", _wrap_CCharacter_GetMDP}, 
    {"GetMaxDP", _wrap_CCharacter_GetMaxDP}, 
    {"GetWC", _wrap_CCharacter_GetWC}, 
    {"GetMaxWC", _wrap_CCharacter_GetMaxWC}, 
    {"GetWcExp", _wrap_CCharacter_GetWcExp}, 
    {"GetVP", _wrap_CCharacter_GetVP}, 
    {"GetMaxVP", _wrap_CCharacter_GetMaxVP}, 
    {"GetGoodness", _wrap_CCharacter_GetGoodness}, 
    {"GetHonor", _wrap_CCharacter_GetHonor}, 
    {"GetManor", _wrap_CCharacter_GetManor}, 
    {"GetFDonate", _wrap_CCharacter_GetFDonate}, 
    {"GetTotalFDonate", _wrap_CCharacter_GetTotalFDonate}, 
    {"GetMDonate", _wrap_CCharacter_GetMDonate}, 
    {"GetTotalMDonate", _wrap_CCharacter_GetTotalMDonate}, 
    {"GetYuanBao", _wrap_CCharacter_GetYuanBao}, 
    {"GetMoney", _wrap_CCharacter_GetMoney}, 
    {"GetBankMoney", _wrap_CCharacter_GetBankMoney}, 
    {"GetSMoney", _wrap_CCharacter_GetSMoney}, 
    {"GetPartner_id", _wrap_CCharacter_GetPartner_id}, 
    {"GetPartnerMob_id", _wrap_CCharacter_GetPartnerMob_id}, 
    {"GetPartnerColorIndex", _wrap_CCharacter_GetPartnerColorIndex}, 
    {"GetPet_uid", _wrap_CCharacter_GetPet_uid}, 
    {"GetPet_id", _wrap_CCharacter_GetPet_id}, 
    {"GetPetColorIndex", _wrap_CCharacter_GetPetColorIndex}, 
    {"GetMaxPartner", _wrap_CCharacter_GetMaxPartner}, 
    {"GetMaxPet", _wrap_CCharacter_GetMaxPet}, 
    {"GetPhoto_id", _wrap_CCharacter_GetPhoto_id}, 
    {"GetHairStyle1", _wrap_CCharacter_GetHairStyle1}, 
    {"GetHairStyle2", _wrap_CCharacter_GetHairStyle2}, 
    {"GetHairColor", _wrap_CCharacter_GetHairColor}, 
    {"GetEq_weapon", _wrap_CCharacter_GetEq_weapon}, 
    {"GetEq_weaponColor", _wrap_CCharacter_GetEq_weaponColor}, 
    {"GetEq_headBand", _wrap_CCharacter_GetEq_headBand}, 
    {"GetEq_headColor", _wrap_CCharacter_GetEq_headColor}, 
    {"GetEq_cloth", _wrap_CCharacter_GetEq_cloth}, 
    {"GetEq_clothColor", _wrap_CCharacter_GetEq_clothColor}, 
    {"GetState", _wrap_CCharacter_GetState}, 
    {"GetShortcut", _wrap_CCharacter_GetShortcut}, 
    {"GetHasParty", _wrap_CCharacter_GetHasParty}, 
    {"GetIsLeader", _wrap_CCharacter_GetIsLeader}, 
    {"GetPartyNetID", _wrap_CCharacter_GetPartyNetID}, 
    {"GetPK_Value", _wrap_CCharacter_GetPK_Value}, 
    {"GetEnablePK", _wrap_CCharacter_GetEnablePK}, 
    {"GetEnableBlockGiven", _wrap_CCharacter_GetEnableBlockGiven}, 
    {"GetEnableBlockParty", _wrap_CCharacter_GetEnableBlockParty}, 
    {"GetEnableBlockMsg", _wrap_CCharacter_GetEnableBlockMsg}, 
    {"GetEnableBlockTrading", _wrap_CCharacter_GetEnableBlockTrading}, 
    {"GetEnableBlockMakeFriend", _wrap_CCharacter_GetEnableBlockMakeFriend}, 
    {"GetShortcuttype", _wrap_CCharacter_GetShortcuttype}, 
    {"GetHawkerTime", _wrap_CCharacter_GetHawkerTime}, 
    {"GetAvailBackPack", _wrap_CCharacter_GetAvailBackPack}, 
    {"GetAvailItemWareHouse", _wrap_CCharacter_GetAvailItemWareHouse}, 
    {"GetAvailPartnerWareHouse", _wrap_CCharacter_GetAvailPartnerWareHouse}, 
    {"GetAvailPetWareHouse", _wrap_CCharacter_GetAvailPetWareHouse}, 
    {"GetPvPScoreSingle", _wrap_CCharacter_GetPvPScoreSingle}, 
    {"GetGuildUid", _wrap_CCharacter_GetGuildUid}, 
    {"GetGuildManorScale", _wrap_CCharacter_GetGuildManorScale}, 
    {"ChangeBaseSpeed", _wrap_CCharacter_ChangeBaseSpeed}, 
    {"ChangeSTA", _wrap_CCharacter_ChangeSTA}, 
    {"ChangeSPR", _wrap_CCharacter_ChangeSPR}, 
    {"ChangeSTR", _wrap_CCharacter_ChangeSTR}, 
    {"ChangeCON", _wrap_CCharacter_ChangeCON}, 
    {"ChangeAGI", _wrap_CCharacter_ChangeAGI}, 
    {"ChangeATK", _wrap_CCharacter_ChangeATK}, 
    {"ChangeDEF", _wrap_CCharacter_ChangeDEF}, 
    {"ChangeHIT", _wrap_CCharacter_ChangeHIT}, 
    {"ChangeEVA", _wrap_CCharacter_ChangeEVA}, 
    {"ChangePOW", _wrap_CCharacter_ChangePOW}, 
    {"ChangeSPD", _wrap_CCharacter_ChangeSPD}, 
    {"ChangeHP", _wrap_CCharacter_ChangeHP}, 
    {"ChangeMHP", _wrap_CCharacter_ChangeMHP}, 
    {"ChangeMaxHP", _wrap_CCharacter_ChangeMaxHP}, 
    {"ChangeSP", _wrap_CCharacter_ChangeSP}, 
    {"ChangeMSP", _wrap_CCharacter_ChangeMSP}, 
    {"ChangeMaxSP", _wrap_CCharacter_ChangeMaxSP}, 
    {"ChangeDP", _wrap_CCharacter_ChangeDP}, 
    {"ChangeMDP", _wrap_CCharacter_ChangeMDP}, 
    {"ChangeMaxDP", _wrap_CCharacter_ChangeMaxDP}, 
    {"ChangeWC", _wrap_CCharacter_ChangeWC}, 
    {"ChangeMaxWC", _wrap_CCharacter_ChangeMaxWC}, 
    {"ChangeWcExp", _wrap_CCharacter_ChangeWcExp}, 
    {"ChangeVP", _wrap_CCharacter_ChangeVP}, 
    {"ChangeMaxVP", _wrap_CCharacter_ChangeMaxVP}, 
    {"ChangeFDonate", _wrap_CCharacter_ChangeFDonate}, 
    {"ChangeGDonate", _wrap_CCharacter_ChangeGDonate}, 
    {"ChangeMDonate", _wrap_CCharacter_ChangeMDonate}, 
    {"GetGDonate", _wrap_CCharacter_GetGDonate}, 
    {"GetGTotalDonate", _wrap_CCharacter_GetGTotalDonate}, 
    {"ChangeSpeakCount", _wrap_CCharacter_ChangeSpeakCount}, 
    {"ChangeLevel", _wrap_CCharacter_ChangeLevel}, 
    {"ChangeExp", _wrap_CCharacter_ChangeExp}, 
    {"ChangeMoney", _wrap_CCharacter_ChangeMoney}, 
    {"ChangeBankMoney", _wrap_CCharacter_ChangeBankMoney}, 
    {"ChangeHonor", _wrap_CCharacter_ChangeHonor}, 
    {"ChangeGoodness", _wrap_CCharacter_ChangeGoodness}, 
    {"ChangeSMoney", _wrap_CCharacter_ChangeSMoney}, 
    {"ChangePvPScoreSingle", _wrap_CCharacter_ChangePvPScoreSingle}, 
    {"SetFaction", _wrap_CCharacter_SetFaction}, 
    {"SetLevel", _wrap_CCharacter_SetLevel}, 
    {"SetExp", _wrap_CCharacter_SetExp}, 
    {"SetAttrib1", _wrap_CCharacter_SetAttrib1}, 
    {"SetAttrib2", _wrap_CCharacter_SetAttrib2}, 
    {"SetGoodness", _wrap_CCharacter_SetGoodness}, 
    {"SetHonor", _wrap_CCharacter_SetHonor}, 
    {"SetMoney", _wrap_CCharacter_SetMoney}, 
    {"SetBankMoney", _wrap_CCharacter_SetBankMoney}, 
    {"SetSMoney", _wrap_CCharacter_SetSMoney}, 
    {"SetPK_Value", _wrap_CCharacter_SetPK_Value}, 
    {"SetEnablePKEx", _wrap_CCharacter_SetEnablePKEx}, 
    {"SetReborn", _wrap_CCharacter_SetReborn}, 
    {"SetHP", _wrap_CCharacter_SetHP}, 
    {"SetMHP", _wrap_CCharacter_SetMHP}, 
    {"SetMaxHP", _wrap_CCharacter_SetMaxHP}, 
    {"SetSP", _wrap_CCharacter_SetSP}, 
    {"SetMSP", _wrap_CCharacter_SetMSP}, 
    {"SetMaxSP", _wrap_CCharacter_SetMaxSP}, 
    {"SetDP", _wrap_CCharacter_SetDP}, 
    {"SetMDP", _wrap_CCharacter_SetMDP}, 
    {"SetMaxDP", _wrap_CCharacter_SetMaxDP}, 
    {"SetMaxPartner", _wrap_CCharacter_SetMaxPartner}, 
    {"SetMaxPet", _wrap_CCharacter_SetMaxPet}, 
    {"SetPet_id", _wrap_CCharacter_SetPet_id}, 
    {"SetHawkerTime", _wrap_CCharacter_SetHawkerTime}, 
    {"SetFull", _wrap_CCharacter_SetFull}, 
    {"ForceAntiHackPopUp", _wrap_CCharacter_ForceAntiHackPopUp}, 
    {"IsHawking", _wrap_CCharacter_IsHawking}, 
    {"IsInMap", _wrap_CCharacter_IsInMap}, 
    {"IsInBattle", _wrap_CCharacter_IsInBattle}, 
    {"IsSit", _wrap_CCharacter_IsSit}, 
    {"HasBuff", _wrap_CCharacter_HasBuff}, 
    {"AddBuff", _wrap_CCharacter_AddBuff}, 
    {"HasEquipment", _wrap_CCharacter_HasEquipment}, 
    {"RemoveBuff", _wrap_CCharacter_RemoveBuff}, 
    {"RemoveBuffSchool", _wrap_CCharacter_RemoveBuffSchool}, 
    {"FindBuff", _wrap_CCharacter_FindBuff}, 
    {"CheckBattle", _wrap_CCharacter_CheckBattle}, 
    {"EncounterBattle", _wrap_CCharacter_EncounterBattle}, 
    {"CanJumpMap", _wrap_CCharacter_CanJumpMap}, 
    {"JumpMap", _wrap_CCharacter_JumpMap}, 
    {"OpenHawkerOwnerMenu", _wrap_CCharacter_OpenHawkerOwnerMenu}, 
    {"JumpReborn", _wrap_CCharacter_JumpReborn}, 
    {"ShowRumor", _wrap_CCharacter_ShowRumor}, 
    {"ShowRank", _wrap_CCharacter_ShowRank}, 
    {"ShowGuildRank", _wrap_CCharacter_ShowGuildRank}, 
    {"EnterInstance", _wrap_CCharacter_EnterInstance}, 
    {"EnterEmptyInstance", _wrap_CCharacter_EnterEmptyInstance}, 
    {"LeaveInstance", _wrap_CCharacter_LeaveInstance}, 
    {"ResetInstance", _wrap_CCharacter_ResetInstance}, 
    {"CloseInstance", _wrap_CCharacter_CloseInstance}, 
    {"HasSkill", _wrap_CCharacter_HasSkill}, 
    {"AddSkill", _wrap_CCharacter_AddSkill}, 
    {"RemoveSkill", _wrap_CCharacter_RemoveSkill}, 
    {"HasParty", _wrap_CCharacter_HasParty}, 
    {"HasTempParty", _wrap_CCharacter_HasTempParty}, 
    {"IsLeader", _wrap_CCharacter_IsLeader}, 
    {"ItemFail", _wrap_CCharacter_ItemFail}, 
    {"UseItemMsg", _wrap_CCharacter_UseItemMsg}, 
    {"SkillFail", _wrap_CCharacter_SkillFail}, 
    {"UseSkillMsg", _wrap_CCharacter_UseSkillMsg}, 
    {"GetSkillCount", _wrap_CCharacter_GetSkillCount}, 
    {"GetSkillLv", _wrap_CCharacter_GetSkillLv}, 
    {"ChangeSkillLv", _wrap_CCharacter_ChangeSkillLv}, 
    {"SetSkillCoolDown", _wrap_CCharacter_SetSkillCoolDown}, 
    {"SetEncounterBattle", _wrap_CCharacter_SetEncounterBattle}, 
    {"SetStepMod", _wrap_CCharacter_SetStepMod}, 
    {"ResetCharLevel", _wrap_CCharacter_ResetCharLevel}, 
    {"ReverseAttrib", _wrap_CCharacter_ReverseAttrib}, 
    {"HasTitle", _wrap_CCharacter_HasTitle}, 
    {"AddTitle", _wrap_CCharacter_AddTitle}, 
    {"RemoveTitle", _wrap_CCharacter_RemoveTitle}, 
    {"SetTradingTarget", _wrap_CCharacter_SetTradingTarget}, 
    {"ResetTradingTarget", _wrap_CCharacter_ResetTradingTarget}, 
    {"GetTradingObject", _wrap_CCharacter_GetTradingObject}, 
    {"SetTradingObject", _wrap_CCharacter_SetTradingObject}, 
    {"IsTrading", _wrap_CCharacter_IsTrading}, 
    {"ClearReqTrading", _wrap_CCharacter_ClearReqTrading}, 
    {"RaiseUpdate", _wrap_CCharacter_RaiseUpdate}, 
    {"CancelUpdate", _wrap_CCharacter_CancelUpdate}, 
    {"AddEquipmentBuff", _wrap_CCharacter_AddEquipmentBuff}, 
    {"OpenGuildApplyMenu", _wrap_CCharacter_OpenGuildApplyMenu}, 
    {"CreateGuild", _wrap_CCharacter_CreateGuild}, 
    {"OpenCreateGuildMenu", _wrap_CCharacter_OpenCreateGuildMenu}, 
    {"HasGuild", _wrap_CCharacter_HasGuild}, 
    {"OpenGiftBox", _wrap_CCharacter_OpenGiftBox}, 
    {"RemoveGuildApply", _wrap_CCharacter_RemoveGuildApply}, 
    {"AddAvailBackPack", _wrap_CCharacter_AddAvailBackPack}, 
    {"AddAvailItemWareHouse", _wrap_CCharacter_AddAvailItemWareHouse}, 
    {"AddAvailPartnerWareHouse", _wrap_CCharacter_AddAvailPartnerWareHouse}, 
    {"AddAvailPetWareHouse", _wrap_CCharacter_AddAvailPetWareHouse}, 
    {"HasFollower", _wrap_CCharacter_HasFollower}, 
    {"GetFollowerId", _wrap_CCharacter_GetFollowerId}, 
    {"GetFollowerCount", _wrap_CCharacter_GetFollowerCount}, 
    {"GetFollowerTotal", _wrap_CCharacter_GetFollowerTotal}, 
    {"OpenWareHouse", _wrap_CCharacter_OpenWareHouse}, 
    {"GetGuild", _wrap_CCharacter_GetGuild}, 
    {"GetGuildPos", _wrap_CCharacter_GetGuildPos}, 
    {"GetJoinGuildPeriod", _wrap_CCharacter_GetJoinGuildPeriod}, 
    {"SetInitAutoCount", _wrap_CCharacter_SetInitAutoCount}, 
    {"GetInitAutoCount", _wrap_CCharacter_GetInitAutoCount}, 
    {"SetAntiHackEnable", _wrap_CCharacter_SetAntiHackEnable}, 
    {"GetAntiHackEnable", _wrap_CCharacter_GetAntiHackEnable}, 
    {"IsGuildWarWin", _wrap_CCharacter_IsGuildWarWin}, 
    {"GetRelationSystem", _wrap_CCharacter_GetRelationSystem}, 
    {"GetSibling_id", _wrap_CCharacter_GetSibling_id}, 
    {"GetWantedReward", _wrap_CCharacter_GetWantedReward}, 
    {"SetWantedReward", _wrap_CCharacter_SetWantedReward}, 
    {"OpenSellYuanBao", _wrap_CCharacter_OpenSellYuanBao}, 
    {"UpdateWantedReward", _wrap_CCharacter_UpdateWantedReward}, 
    {"RequestJailDeliveryId", _wrap_CCharacter_RequestJailDeliveryId}, 
    {"RequestBailId", _wrap_CCharacter_RequestBailId}, 
    {"RequestTraceId", _wrap_CCharacter_RequestTraceId}, 
    {"IsExcuteMarriage", _wrap_CCharacter_IsExcuteMarriage}, 
    {"OpenBusinessShop", _wrap_CCharacter_OpenBusinessShop}, 
    {"ChangeBusinessProfit", _wrap_CCharacter_ChangeBusinessProfit}, 
    {"OpenBusinessLog", _wrap_CCharacter_OpenBusinessLog}, 
    {"ApplyTrader", _wrap_CCharacter_ApplyTrader}, 
    {"GetPartnerCollectionCount", _wrap_CCharacter_GetPartnerCollectionCount}, 
    {"Sit", _wrap_CCharacter_Sit}, 
    {"ShowGuildMsg", _wrap_CCharacter_ShowGuildMsg}, 
    {"ShowAwardMsg", _wrap_CCharacter_ShowAwardMsg}, 
    {"OpenSearchPartyPanel", _wrap_CCharacter_OpenSearchPartyPanel}, 
    {"OpenWeaponsRankPanel", _wrap_CCharacter_OpenWeaponsRankPanel}, 
    {"GetPlayerEquipData", _wrap_CCharacter_GetPlayerEquipData}, 
    {"HandleGuideEvent", _wrap_CCharacter_HandleGuideEvent}, 
    {"ChangeToMob", _wrap_CCharacter_ChangeToMob}, 
    {"ChangeModel", _wrap_CCharacter_ChangeModel}, 
    {"ChangeModelSkill", _wrap_CCharacter_ChangeModelSkill}, 
    {"AddPartnerCollection", _wrap_CCharacter_AddPartnerCollection}, 
    {"GetUserType", _wrap_CCharacter_GetUserType}, 
    {"GetTitle", _wrap_CCharacter_GetTitle}, 
    {"GetPartnerName", _wrap_CCharacter_GetPartnerName}, 
    {"GetPetName", _wrap_CCharacter_GetPetName}, 
    {"GetCharNameLink", _wrap_CCharacter_GetCharNameLink}, 
    {"GetCharPartnerNameLink", _wrap_CCharacter_GetCharPartnerNameLink}, 
    {"GetCharPetNameLink", _wrap_CCharacter_GetCharPetNameLink}, 
    {"GetCharItemNameLink", _wrap_CCharacter_GetCharItemNameLink}, 
    {"ChangeHp", _wrap_CCharacter_ChangeHp}, 
    {"ChangeVp", _wrap_CCharacter_ChangeVp}, 
    {"ChangeMHp", _wrap_CCharacter_ChangeMHp}, 
    {"ChangeSp", _wrap_CCharacter_ChangeSp}, 
    {"ChangeMSp", _wrap_CCharacter_ChangeMSp}, 
    {"ChangeDp", _wrap_CCharacter_ChangeDp}, 
    {"ChangeWc", _wrap_CCharacter_ChangeWc}, 
    {"IsBuffExist", _wrap_CCharacter_IsBuffExist}, 
    {0,0}
};
static swig_lua_attribute swig_CCharacter_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CCharacter_bases[] = {0,0};
static const char *swig_CCharacter_base_names[] = {"CMapActor *",0};
static swig_lua_class _wrap_class_CCharacter = { "CCharacter", &SWIGTYPE_p_CCharacter,_wrap_new_CCharacter, swig_delete_CCharacter, swig_CCharacter_methods, swig_CCharacter_attributes, swig_CCharacter_bases, swig_CCharacter_base_names };

static int _wrap_CMapNPC_GetNpc_uid(lua_State* L) {
  int SWIG_arg = 0;
  CMapNPC *arg1 = (CMapNPC *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CMapNPC::GetNpc_uid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapNPC::GetNpc_uid",1,"CMapNPC *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapNPC,0))){
    SWIG_fail_ptr("CMapNPC_GetNpc_uid",1,SWIGTYPE_p_CMapNPC);
  }
  
  result = (UInt32)(arg1)->GetNpc_uid();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapNPC_GetNpc_id(lua_State* L) {
  int SWIG_arg = 0;
  CMapNPC *arg1 = (CMapNPC *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CMapNPC::GetNpc_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapNPC::GetNpc_id",1,"CMapNPC *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapNPC,0))){
    SWIG_fail_ptr("CMapNPC_GetNpc_id",1,SWIGTYPE_p_CMapNPC);
  }
  
  result = (UInt32)(arg1)->GetNpc_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapNPC_GetAppearWorld(lua_State* L) {
  int SWIG_arg = 0;
  CMapNPC *arg1 = (CMapNPC *) 0 ;
  bool result;
  
  SWIG_check_num_args("CMapNPC::GetAppearWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapNPC::GetAppearWorld",1,"CMapNPC *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapNPC,0))){
    SWIG_fail_ptr("CMapNPC_GetAppearWorld",1,SWIGTYPE_p_CMapNPC);
  }
  
  result = (bool)(arg1)->GetAppearWorld();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapNPC_Destroy(lua_State* L) {
  int SWIG_arg = 0;
  CMapNPC *arg1 = (CMapNPC *) 0 ;
  
  SWIG_check_num_args("CMapNPC::Destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapNPC::Destroy",1,"CMapNPC *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapNPC,0))){
    SWIG_fail_ptr("CMapNPC_Destroy",1,SWIGTYPE_p_CMapNPC);
  }
  
  (arg1)->Destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapNPC_SetQuestHint(lua_State* L) {
  int SWIG_arg = 0;
  CMapNPC *arg1 = (CMapNPC *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  UInt8 arg5 ;
  UInt8 arg6 ;
  UInt8 arg7 ;
  
  SWIG_check_num_args("CMapNPC::SetQuestHint",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapNPC::SetQuestHint",1,"CMapNPC *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CMapNPC::SetQuestHint",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CMapNPC::SetQuestHint",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CMapNPC::SetQuestHint",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CMapNPC::SetQuestHint",5,"UInt8");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CMapNPC::SetQuestHint",6,"UInt8");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CMapNPC::SetQuestHint",7,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapNPC,0))){
    SWIG_fail_ptr("CMapNPC_SetQuestHint",1,SWIGTYPE_p_CMapNPC);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt8)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt8)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt8)lua_tonumber(L, 7);
  (arg1)->SetQuestHint(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapNPC_AddHintFlag(lua_State* L) {
  int SWIG_arg = 0;
  CMapNPC *arg1 = (CMapNPC *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  
  SWIG_check_num_args("CMapNPC::AddHintFlag",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapNPC::AddHintFlag",1,"CMapNPC *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CMapNPC::AddHintFlag",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CMapNPC::AddHintFlag",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CMapNPC::AddHintFlag",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapNPC,0))){
    SWIG_fail_ptr("CMapNPC_AddHintFlag",1,SWIGTYPE_p_CMapNPC);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  (arg1)->AddHintFlag(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapNPC_SetEnableBattle(lua_State* L) {
  int SWIG_arg = 0;
  CMapNPC *arg1 = (CMapNPC *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CMapNPC::SetEnableBattle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapNPC::SetEnableBattle",1,"CMapNPC *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CMapNPC::SetEnableBattle",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapNPC,0))){
    SWIG_fail_ptr("CMapNPC_SetEnableBattle",1,SWIGTYPE_p_CMapNPC);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetEnableBattle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapNPC_GetEnableBattle(lua_State* L) {
  int SWIG_arg = 0;
  CMapNPC *arg1 = (CMapNPC *) 0 ;
  bool result;
  
  SWIG_check_num_args("CMapNPC::GetEnableBattle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapNPC::GetEnableBattle",1,"CMapNPC *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapNPC,0))){
    SWIG_fail_ptr("CMapNPC_GetEnableBattle",1,SWIGTYPE_p_CMapNPC);
  }
  
  result = (bool)(arg1)->GetEnableBattle();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapNPC_CanTalk(lua_State* L) {
  int SWIG_arg = 0;
  CMapNPC *arg1 = (CMapNPC *) 0 ;
  CCharacter *arg2 = (CCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CMapNPC::CanTalk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapNPC::CanTalk",1,"CMapNPC *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CMapNPC::CanTalk",2,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapNPC,0))){
    SWIG_fail_ptr("CMapNPC_CanTalk",1,SWIGTYPE_p_CMapNPC);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CMapNPC_CanTalk",2,SWIGTYPE_p_CCharacter);
  }
  
  result = (bool)(arg1)->CanTalk(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapNPC_SetCreaterCharId(lua_State* L) {
  int SWIG_arg = 0;
  CMapNPC *arg1 = (CMapNPC *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CMapNPC::SetCreaterCharId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapNPC::SetCreaterCharId",1,"CMapNPC *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CMapNPC::SetCreaterCharId",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapNPC,0))){
    SWIG_fail_ptr("CMapNPC_SetCreaterCharId",1,SWIGTYPE_p_CMapNPC);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetCreaterCharId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CMapNPC_GetCreaterCharId(lua_State* L) {
  int SWIG_arg = 0;
  CMapNPC *arg1 = (CMapNPC *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CMapNPC::GetCreaterCharId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CMapNPC::GetCreaterCharId",1,"CMapNPC *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CMapNPC,0))){
    SWIG_fail_ptr("CMapNPC_GetCreaterCharId",1,SWIGTYPE_p_CMapNPC);
  }
  
  result = (UInt32)(arg1)->GetCreaterCharId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CMapNPC(lua_State* L) {
  int SWIG_arg = 0;
  CMapNPC *result = 0 ;
  
  SWIG_check_num_args("CMapNPC::CMapNPC",0,0)
  result = (CMapNPC *)new CMapNPC();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CMapNPC,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CMapNPC(void *obj) {
CMapNPC *arg1 = (CMapNPC *) obj;
delete arg1;
}
static swig_lua_method swig_CMapNPC_methods[] = {
    {"GetNpc_uid", _wrap_CMapNPC_GetNpc_uid}, 
    {"GetNpc_id", _wrap_CMapNPC_GetNpc_id}, 
    {"GetAppearWorld", _wrap_CMapNPC_GetAppearWorld}, 
    {"Destroy", _wrap_CMapNPC_Destroy}, 
    {"SetQuestHint", _wrap_CMapNPC_SetQuestHint}, 
    {"AddHintFlag", _wrap_CMapNPC_AddHintFlag}, 
    {"SetEnableBattle", _wrap_CMapNPC_SetEnableBattle}, 
    {"GetEnableBattle", _wrap_CMapNPC_GetEnableBattle}, 
    {"CanTalk", _wrap_CMapNPC_CanTalk}, 
    {"SetCreaterCharId", _wrap_CMapNPC_SetCreaterCharId}, 
    {"GetCreaterCharId", _wrap_CMapNPC_GetCreaterCharId}, 
    {0,0}
};
static swig_lua_attribute swig_CMapNPC_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CMapNPC_bases[] = {0,0};
static const char *swig_CMapNPC_base_names[] = {"CMapActor *",0};
static swig_lua_class _wrap_class_CMapNPC = { "CMapNPC", &SWIGTYPE_p_CMapNPC,_wrap_new_CMapNPC, swig_delete_CMapNPC, swig_CMapNPC_methods, swig_CMapNPC_attributes, swig_CMapNPC_bases, swig_CMapNPC_base_names };

static int _wrap_CItemBag_Get(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  int arg2 ;
  CItem *result = 0 ;
  
  SWIG_check_num_args("CItemBag::Get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::Get",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::Get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_Get",1,SWIGTYPE_p_CItemBag);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CItem *)(arg1)->Get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CItem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_GetItem(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt8 arg2 ;
  CItem *result = 0 ;
  
  SWIG_check_num_args("CItemBag::GetItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::GetItem",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::GetItem",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_GetItem",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (CItem *)(arg1)->GetItem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CItem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_FindItemById(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt32 arg2 ;
  UInt8 arg3 ;
  UInt8 arg4 = (UInt8) 0 ;
  CItem *result = 0 ;
  
  SWIG_check_num_args("CItemBag::FindItemById",3,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::FindItemById",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::FindItemById",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CItemBag::FindItemById",3,"UInt8");
  if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("CItemBag::FindItemById",4,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_FindItemById",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  if(lua_gettop(L)>=4){
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
    arg4 = (UInt8)lua_tonumber(L, 4);
  }
  result = (CItem *)(arg1)->FindItemById(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CItem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_FindEmptyIndex(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt8 arg2 ;
  UInt8 *arg3 = 0 ;
  UInt8 arg4 = (UInt8) 0 ;
  bool result;
  
  SWIG_check_num_args("CItemBag::FindEmptyIndex",3,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::FindEmptyIndex",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::FindEmptyIndex",2,"UInt8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("CItemBag::FindEmptyIndex",3,"UInt8 &");
  if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("CItemBag::FindEmptyIndex",4,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_FindEmptyIndex",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("CItemBag_FindEmptyIndex",3,SWIGTYPE_p_unsigned_char);
  }
  
  if(lua_gettop(L)>=4){
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
    arg4 = (UInt8)lua_tonumber(L, 4);
  }
  result = (bool)(arg1)->FindEmptyIndex(arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_HasItem(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("CItemBag::HasItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::HasItem",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::HasItem",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_HasItem",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasItem(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_IsSlotFree(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt8 arg2 ;
  bool result;
  
  SWIG_check_num_args("CItemBag::IsSlotFree",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::IsSlotFree",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::IsSlotFree",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_IsSlotFree",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (bool)(arg1)->IsSlotFree(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_NewItem(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt32 arg2 ;
  UInt8 arg3 ;
  CItem *result = 0 ;
  
  SWIG_check_num_args("CItemBag::NewItem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::NewItem",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::NewItem",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CItemBag::NewItem",3,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_NewItem",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  result = (CItem *)(arg1)->NewItem(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CItem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_AddItem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 = (UInt16) 1 ;
  UInt16 arg4 = (UInt16) 0 ;
  UInt8 arg5 = (UInt8) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItemBag::AddItem",2,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::AddItem",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::AddItem",2,"UInt32");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CItemBag::AddItem",3,"UInt16");
  if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("CItemBag::AddItem",4,"UInt16");
  if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("CItemBag::AddItem",5,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_AddItem",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
    arg3 = (UInt16)lua_tonumber(L, 3);
  }
  if(lua_gettop(L)>=4){
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
    arg4 = (UInt16)lua_tonumber(L, 4);
  }
  if(lua_gettop(L)>=5){
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
    arg5 = (UInt8)lua_tonumber(L, 5);
  }
  result = (UInt16)(arg1)->AddItem(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_RemoveItem(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 = (UInt16) 1 ;
  bool result;
  
  SWIG_check_num_args("CItemBag::RemoveItem",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::RemoveItem",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::RemoveItem",2,"UInt32");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CItemBag::RemoveItem",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_RemoveItem",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
    arg3 = (UInt16)lua_tonumber(L, 3);
  }
  result = (bool)(arg1)->RemoveItem(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_AddItem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  CItem *arg2 = (CItem *) 0 ;
  UInt8 arg3 ;
  bool result;
  
  SWIG_check_num_args("CItemBag::AddItem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::AddItem",1,"CItemBag *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CItemBag::AddItem",2,"CItem *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CItemBag::AddItem",3,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_AddItem",1,SWIGTYPE_p_CItemBag);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItemBag_AddItem",2,SWIGTYPE_p_CItem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  result = (bool)(arg1)->AddItem(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_AddItem(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if ((argc >= 2) && (argc <= 5)) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CItemBag, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_CItemBag_AddItem__SWIG_0(L);
        }
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_CItemBag_AddItem__SWIG_0(L);
          }
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_CItemBag_AddItem__SWIG_0(L);
            }
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_CItemBag_AddItem__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CItemBag, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CItem, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CItemBag_AddItem__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CItemBag_AddItem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CItemBag::AddItem(UInt32,UInt16,UInt16,UInt8)\n"
    "    CItemBag::AddItem(CItem *,UInt8)\n");
  lua_error(L);return 0;
}


static int _wrap_CItemBag_IsEquiped(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("CItemBag::IsEquiped",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::IsEquiped",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::IsEquiped",2,"UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_IsEquiped",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32 const)lua_tonumber(L, 2);
  result = (bool)(arg1)->IsEquiped(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_GetFreeSlot(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt8 arg2 ;
  UInt8 result;
  
  SWIG_check_num_args("CItemBag::GetFreeSlot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::GetFreeSlot",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::GetFreeSlot",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_GetFreeSlot",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (UInt8)(arg1)->GetFreeSlot(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_GetTotalFreeSlot(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItemBag::GetTotalFreeSlot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::GetTotalFreeSlot",1,"CItemBag *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_GetTotalFreeSlot",1,SWIGTYPE_p_CItemBag);
  }
  
  result = (UInt16)(arg1)->GetTotalFreeSlot();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_GetItemCount(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt32 arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CItemBag::GetItemCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::GetItemCount",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::GetItemCount",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_GetItemCount",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetItemCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_GetUnlockItemCount(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt32 arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CItemBag::GetUnlockItemCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::GetUnlockItemCount",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::GetUnlockItemCount",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_GetUnlockItemCount",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetUnlockItemCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_IsBagEnabled(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt8 arg2 ;
  bool result;
  
  SWIG_check_num_args("CItemBag::IsBagEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::IsBagEnabled",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::IsBagEnabled",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_IsBagEnabled",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (bool)(arg1)->IsBagEnabled(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_RaiseUpdate(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  
  SWIG_check_num_args("CItemBag::RaiseUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::RaiseUpdate",1,"CItemBag *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_RaiseUpdate",1,SWIGTYPE_p_CItemBag);
  }
  
  (arg1)->RaiseUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_CancelUpdate(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  
  SWIG_check_num_args("CItemBag::CancelUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::CancelUpdate",1,"CItemBag *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_CancelUpdate",1,SWIGTYPE_p_CItemBag);
  }
  
  (arg1)->CancelUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_CanAddItem(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt8 arg2 ;
  UInt32 arg3 ;
  UInt32 arg4 ;
  bool result;
  
  SWIG_check_num_args("CItemBag::CanAddItem",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::CanAddItem",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::CanAddItem",2,"UInt8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CItemBag::CanAddItem",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CItemBag::CanAddItem",4,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_CanAddItem",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  result = (bool)(arg1)->CanAddItem(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_CanCreateLimitItem(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 ;
  bool result;
  
  SWIG_check_num_args("CItemBag::CanCreateLimitItem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::CanCreateLimitItem",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::CanCreateLimitItem",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CItemBag::CanCreateLimitItem",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_CanCreateLimitItem",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  result = (bool)(arg1)->CanCreateLimitItem(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_RemoveUnLockItem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 ;
  bool result;
  
  SWIG_check_num_args("CItemBag::RemoveUnLockItem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::RemoveUnLockItem",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::RemoveUnLockItem",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CItemBag::RemoveUnLockItem",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_RemoveUnLockItem",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  result = (bool)(arg1)->RemoveUnLockItem(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_RemoveUnLockItem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("CItemBag::RemoveUnLockItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::RemoveUnLockItem",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::RemoveUnLockItem",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_RemoveUnLockItem",1,SWIGTYPE_p_CItemBag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->RemoveUnLockItem(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_RemoveUnLockItem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CItemBag, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CItemBag_RemoveUnLockItem__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CItemBag, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CItemBag_RemoveUnLockItem__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CItemBag_RemoveUnLockItem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CItemBag::RemoveUnLockItem(UInt32,UInt16)\n"
    "    CItemBag::RemoveUnLockItem(UInt32)\n");
  lua_error(L);return 0;
}


static int _wrap_CItemBag_GetBusinessItemCount(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItemBag::GetBusinessItemCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::GetBusinessItemCount",1,"CItemBag *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_GetBusinessItemCount",1,SWIGTYPE_p_CItemBag);
  }
  
  result = (UInt16)(arg1)->GetBusinessItemCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_RemoveAllBusinessItem(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  
  SWIG_check_num_args("CItemBag::RemoveAllBusinessItem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::RemoveAllBusinessItem",1,"CItemBag *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_RemoveAllBusinessItem",1,SWIGTYPE_p_CItemBag);
  }
  
  (arg1)->RemoveAllBusinessItem();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_GetBusinessMoney(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CItemBag::GetBusinessMoney",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::GetBusinessMoney",1,"CItemBag *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_GetBusinessMoney",1,SWIGTYPE_p_CItemBag);
  }
  
  result = (UInt32)(arg1)->GetBusinessMoney();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_ChangeBusinessMoney(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  Int32 arg2 ;
  bool result;
  
  SWIG_check_num_args("CItemBag::ChangeBusinessMoney",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::ChangeBusinessMoney",1,"CItemBag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItemBag::ChangeBusinessMoney",2,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_ChangeBusinessMoney",1,SWIGTYPE_p_CItemBag);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  result = (bool)(arg1)->ChangeBusinessMoney(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_GetUserType(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CItemBag::GetUserType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::GetUserType",1,"CItemBag *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_GetUserType",1,SWIGTYPE_p_CItemBag);
  }
  
  result = (UInt8)CItemBag_GetUserType(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItemBag_AddRandItem(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *arg1 = (CItemBag *) 0 ;
  char *arg2 = (char *) 0 ;
  CItem *result = 0 ;
  
  SWIG_check_num_args("CItemBag::AddRandItem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItemBag::AddRandItem",1,"CItemBag *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CItemBag::AddRandItem",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItemBag,0))){
    SWIG_fail_ptr("CItemBag_AddRandItem",1,SWIGTYPE_p_CItemBag);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (CItem *)CItemBag_AddRandItem(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CItem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CItemBag(lua_State* L) {
  int SWIG_arg = 0;
  CItemBag *result = 0 ;
  
  SWIG_check_num_args("CItemBag::CItemBag",0,0)
  result = (CItemBag *)new CItemBag();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CItemBag,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CItemBag(void *obj) {
CItemBag *arg1 = (CItemBag *) obj;
delete arg1;
}
static swig_lua_method swig_CItemBag_methods[] = {
    {"Get", _wrap_CItemBag_Get}, 
    {"GetItem", _wrap_CItemBag_GetItem}, 
    {"FindItemById", _wrap_CItemBag_FindItemById}, 
    {"FindEmptyIndex", _wrap_CItemBag_FindEmptyIndex}, 
    {"HasItem", _wrap_CItemBag_HasItem}, 
    {"IsSlotFree", _wrap_CItemBag_IsSlotFree}, 
    {"NewItem", _wrap_CItemBag_NewItem}, 
    {"RemoveItem", _wrap_CItemBag_RemoveItem}, 
    {"AddItem", _wrap_CItemBag_AddItem}, 
    {"IsEquiped", _wrap_CItemBag_IsEquiped}, 
    {"GetFreeSlot", _wrap_CItemBag_GetFreeSlot}, 
    {"GetTotalFreeSlot", _wrap_CItemBag_GetTotalFreeSlot}, 
    {"GetItemCount", _wrap_CItemBag_GetItemCount}, 
    {"GetUnlockItemCount", _wrap_CItemBag_GetUnlockItemCount}, 
    {"IsBagEnabled", _wrap_CItemBag_IsBagEnabled}, 
    {"RaiseUpdate", _wrap_CItemBag_RaiseUpdate}, 
    {"CancelUpdate", _wrap_CItemBag_CancelUpdate}, 
    {"CanAddItem", _wrap_CItemBag_CanAddItem}, 
    {"CanCreateLimitItem", _wrap_CItemBag_CanCreateLimitItem}, 
    {"RemoveUnLockItem", _wrap_CItemBag_RemoveUnLockItem}, 
    {"GetBusinessItemCount", _wrap_CItemBag_GetBusinessItemCount}, 
    {"RemoveAllBusinessItem", _wrap_CItemBag_RemoveAllBusinessItem}, 
    {"GetBusinessMoney", _wrap_CItemBag_GetBusinessMoney}, 
    {"ChangeBusinessMoney", _wrap_CItemBag_ChangeBusinessMoney}, 
    {"GetUserType", _wrap_CItemBag_GetUserType}, 
    {"AddRandItem", _wrap_CItemBag_AddRandItem}, 
    {0,0}
};
static swig_lua_attribute swig_CItemBag_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CItemBag_bases[] = {0};
static const char *swig_CItemBag_base_names[] = {0};
static swig_lua_class _wrap_class_CItemBag = { "CItemBag", &SWIGTYPE_p_CItemBag,_wrap_new_CItemBag, swig_delete_CItemBag, swig_CItemBag_methods, swig_CItemBag_attributes, swig_CItemBag_bases, swig_CItemBag_base_names };

static int _wrap_CItem_GetItem_uid(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CItem::GetItem_uid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetItem_uid",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetItem_uid",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt32)(arg1)->GetItem_uid();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetItem_id(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CItem::GetItem_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetItem_id",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetItem_id",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt32)(arg1)->GetItem_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetOwner_id(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CItem::GetOwner_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetOwner_id",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetOwner_id",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt32)(arg1)->GetOwner_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetItemColor(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CItem::GetItemColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetItemColor",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetItemColor",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt8)(arg1)->GetItemColor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetEqGemID(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt8 arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CItem::GetEqGemID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetEqGemID",1,"CItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItem::GetEqGemID",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetEqGemID",1,SWIGTYPE_p_CItem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetEqGemID(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetBagIndex(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CItem::GetBagIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetBagIndex",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetBagIndex",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt8)(arg1)->GetBagIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetStack(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CItem::GetStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetStack",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetStack",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt8)(arg1)->GetStack();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetRemain(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CItem::GetRemain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetRemain",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetRemain",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt8)(arg1)->GetRemain();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetSTA(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetSTA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetSTA",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetSTA",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetSTA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetSPR(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetSPR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetSPR",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetSPR",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetSPR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetSTR(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetSTR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetSTR",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetSTR",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetSTR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetCON(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetCON",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetCON",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetCON",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetCON();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetAGI(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetAGI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetAGI",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetAGI",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetAGI();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetATK(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetATK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetATK",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetATK",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetATK();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetDEF(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetDEF",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetDEF",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetDEF",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetDEF();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetHIT(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetHIT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetHIT",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetHIT",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetHIT();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetEVA(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetEVA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetEVA",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetEVA",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetEVA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetPOW(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetPOW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetPOW",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetPOW",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetPOW();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetSPD(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetSPD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetSPD",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetSPD",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetSPD();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetMaxHP(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetMaxHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetMaxHP",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetMaxHP",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetMaxHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetMaxSP(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetMaxSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetMaxSP",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetMaxSP",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetMaxSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetMaxVP(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetMaxVP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetMaxVP",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetMaxVP",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetMaxVP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetItemValue1(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetItemValue1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetItemValue1",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetItemValue1",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetItemValue1();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetItemValue2(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetItemValue2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetItemValue2",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetItemValue2",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetItemValue2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetItemValue3(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetItemValue3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetItemValue3",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetItemValue3",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetItemValue3();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_SetItemValue1(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CItem::SetItemValue1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::SetItemValue1",1,"CItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItem::SetItemValue1",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_SetItemValue1",1,SWIGTYPE_p_CItem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetItemValue1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_SetItemValue2(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CItem::SetItemValue2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::SetItemValue2",1,"CItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItem::SetItemValue2",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_SetItemValue2",1,SWIGTYPE_p_CItem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetItemValue2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_SetItemValue3(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CItem::SetItemValue3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::SetItemValue3",1,"CItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItem::SetItemValue3",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_SetItemValue3",1,SWIGTYPE_p_CItem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetItemValue3(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetBuffID(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetBuffID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetBuffID",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetBuffID",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetBuffID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetBuffValue1(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CItem::GetBuffValue1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetBuffValue1",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetBuffValue1",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt32)(arg1)->GetBuffValue1();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetBuffValue2(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CItem::GetBuffValue2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetBuffValue2",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetBuffValue2",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt32)(arg1)->GetBuffValue2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetBuffValue3(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CItem::GetBuffValue3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetBuffValue3",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetBuffValue3",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt32)(arg1)->GetBuffValue3();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetBuffCoolDown(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CItem::GetBuffCoolDown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetBuffCoolDown",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetBuffCoolDown",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt32)(arg1)->GetBuffCoolDown();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetBuffPro(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CItem::GetBuffPro",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetBuffPro",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetBuffPro",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt8)(arg1)->GetBuffPro();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetLock(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  bool result;
  
  SWIG_check_num_args("CItem::GetLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetLock",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetLock",1,SWIGTYPE_p_CItem);
  }
  
  result = (bool)(arg1)->GetLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_SetBuffValue1(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CItem::SetBuffValue1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::SetBuffValue1",1,"CItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItem::SetBuffValue1",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_SetBuffValue1",1,SWIGTYPE_p_CItem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetBuffValue1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_SetBuffValue2(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CItem::SetBuffValue2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::SetBuffValue2",1,"CItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItem::SetBuffValue2",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_SetBuffValue2",1,SWIGTYPE_p_CItem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetBuffValue2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_SetBuffValue3(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CItem::SetBuffValue3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::SetBuffValue3",1,"CItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItem::SetBuffValue3",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_SetBuffValue3",1,SWIGTYPE_p_CItem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetBuffValue3(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_IsExist(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  bool result;
  
  SWIG_check_num_args("CItem::IsExist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::IsExist",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_IsExist",1,SWIGTYPE_p_CItem);
  }
  
  result = (bool)(arg1)->IsExist();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_ReduceCount(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  bool result;
  
  SWIG_check_num_args("CItem::ReduceCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::ReduceCount",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_ReduceCount",1,SWIGTYPE_p_CItem);
  }
  
  result = (bool)(arg1)->ReduceCount();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_AddBuff(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 arg2 ;
  UInt32 arg3 ;
  UInt32 arg4 ;
  UInt32 arg5 ;
  UInt32 arg6 ;
  UInt8 arg7 ;
  
  SWIG_check_num_args("CItem::AddBuff",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::AddBuff",1,"CItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CItem::AddBuff",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CItem::AddBuff",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CItem::AddBuff",4,"UInt32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CItem::AddBuff",5,"UInt32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CItem::AddBuff",6,"UInt32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CItem::AddBuff",7,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_AddBuff",1,SWIGTYPE_p_CItem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt32)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt32)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt8)lua_tonumber(L, 7);
  (arg1)->AddBuff(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_RemoveBuff(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  
  SWIG_check_num_args("CItem::RemoveBuff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::RemoveBuff",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_RemoveBuff",1,SWIGTYPE_p_CItem);
  }
  
  (arg1)->RemoveBuff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_AddSkill(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  bool result;
  
  SWIG_check_num_args("CItem::AddSkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::AddSkill",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_AddSkill",1,SWIGTYPE_p_CItem);
  }
  
  result = (bool)(arg1)->AddSkill();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_RemoveSkill(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  
  SWIG_check_num_args("CItem::RemoveSkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::RemoveSkill",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_RemoveSkill",1,SWIGTYPE_p_CItem);
  }
  
  (arg1)->RemoveSkill();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CItem_GetItem_quality(lua_State* L) {
  int SWIG_arg = 0;
  CItem *arg1 = (CItem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CItem::GetItem_quality",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CItem::GetItem_quality",1,"CItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CItem,0))){
    SWIG_fail_ptr("CItem_GetItem_quality",1,SWIGTYPE_p_CItem);
  }
  
  result = (UInt16)(arg1)->GetItem_quality();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CItem(lua_State* L) {
  int SWIG_arg = 0;
  CItem *result = 0 ;
  
  SWIG_check_num_args("CItem::CItem",0,0)
  result = (CItem *)new CItem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CItem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CItem(void *obj) {
CItem *arg1 = (CItem *) obj;
delete arg1;
}
static swig_lua_method swig_CItem_methods[] = {
    {"GetItem_uid", _wrap_CItem_GetItem_uid}, 
    {"GetItem_id", _wrap_CItem_GetItem_id}, 
    {"GetOwner_id", _wrap_CItem_GetOwner_id}, 
    {"GetItemColor", _wrap_CItem_GetItemColor}, 
    {"GetEqGemID", _wrap_CItem_GetEqGemID}, 
    {"GetBagIndex", _wrap_CItem_GetBagIndex}, 
    {"GetStack", _wrap_CItem_GetStack}, 
    {"GetRemain", _wrap_CItem_GetRemain}, 
    {"GetSTA", _wrap_CItem_GetSTA}, 
    {"GetSPR", _wrap_CItem_GetSPR}, 
    {"GetSTR", _wrap_CItem_GetSTR}, 
    {"GetCON", _wrap_CItem_GetCON}, 
    {"GetAGI", _wrap_CItem_GetAGI}, 
    {"GetATK", _wrap_CItem_GetATK}, 
    {"GetDEF", _wrap_CItem_GetDEF}, 
    {"GetHIT", _wrap_CItem_GetHIT}, 
    {"GetEVA", _wrap_CItem_GetEVA}, 
    {"GetPOW", _wrap_CItem_GetPOW}, 
    {"GetSPD", _wrap_CItem_GetSPD}, 
    {"GetMaxHP", _wrap_CItem_GetMaxHP}, 
    {"GetMaxSP", _wrap_CItem_GetMaxSP}, 
    {"GetMaxVP", _wrap_CItem_GetMaxVP}, 
    {"GetItemValue1", _wrap_CItem_GetItemValue1}, 
    {"GetItemValue2", _wrap_CItem_GetItemValue2}, 
    {"GetItemValue3", _wrap_CItem_GetItemValue3}, 
    {"SetItemValue1", _wrap_CItem_SetItemValue1}, 
    {"SetItemValue2", _wrap_CItem_SetItemValue2}, 
    {"SetItemValue3", _wrap_CItem_SetItemValue3}, 
    {"GetBuffID", _wrap_CItem_GetBuffID}, 
    {"GetBuffValue1", _wrap_CItem_GetBuffValue1}, 
    {"GetBuffValue2", _wrap_CItem_GetBuffValue2}, 
    {"GetBuffValue3", _wrap_CItem_GetBuffValue3}, 
    {"GetBuffCoolDown", _wrap_CItem_GetBuffCoolDown}, 
    {"GetBuffPro", _wrap_CItem_GetBuffPro}, 
    {"GetLock", _wrap_CItem_GetLock}, 
    {"SetBuffValue1", _wrap_CItem_SetBuffValue1}, 
    {"SetBuffValue2", _wrap_CItem_SetBuffValue2}, 
    {"SetBuffValue3", _wrap_CItem_SetBuffValue3}, 
    {"IsExist", _wrap_CItem_IsExist}, 
    {"ReduceCount", _wrap_CItem_ReduceCount}, 
    {"AddBuff", _wrap_CItem_AddBuff}, 
    {"RemoveBuff", _wrap_CItem_RemoveBuff}, 
    {"AddSkill", _wrap_CItem_AddSkill}, 
    {"RemoveSkill", _wrap_CItem_RemoveSkill}, 
    {"GetItem_quality", _wrap_CItem_GetItem_quality}, 
    {0,0}
};
static swig_lua_attribute swig_CItem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CItem_bases[] = {0};
static const char *swig_CItem_base_names[] = {0};
static swig_lua_class _wrap_class_CItem = { "CItem", &SWIGTYPE_p_CItem,_wrap_new_CItem, swig_delete_CItem, swig_CItem_methods, swig_CItem_attributes, swig_CItem_bases, swig_CItem_base_names };

static int _wrap_CParty_GetLeader(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  CCharacter *result = 0 ;
  
  SWIG_check_num_args("CParty::GetLeader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::GetLeader",1,"CParty *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_GetLeader",1,SWIGTYPE_p_CParty);
  }
  
  result = (CCharacter *)(arg1)->GetLeader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCharacter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_SetLeader(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  CCharacter *arg2 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CParty::SetLeader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::SetLeader",1,"CParty *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CParty::SetLeader",2,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_SetLeader",1,SWIGTYPE_p_CParty);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CParty_SetLeader",2,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->SetLeader(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_Join(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  CCharacter *arg2 = (CCharacter *) 0 ;
  bool arg3 ;
  bool arg4 = (bool) BOOLEAN_FALSE ;
  bool arg5 = (bool) BOOLEAN_TRUE ;
  bool result;
  
  SWIG_check_num_args("CParty::Join",3,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::Join",1,"CParty *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CParty::Join",2,"CCharacter *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("CParty::Join",3,"bool");
  if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("CParty::Join",4,"bool");
  if(lua_gettop(L)>=5 && !lua_isboolean(L,5)) SWIG_fail_arg("CParty::Join",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_Join",1,SWIGTYPE_p_CParty);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CParty_Join",2,SWIGTYPE_p_CCharacter);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  if(lua_gettop(L)>=4){
    arg4 = (lua_toboolean(L, 4)!=0);
  }
  if(lua_gettop(L)>=5){
    arg5 = (lua_toboolean(L, 5)!=0);
  }
  result = (bool)(arg1)->Join(arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_Leave(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  CCharacter *arg2 = (CCharacter *) 0 ;
  bool arg3 = (bool) BOOLEAN_FALSE ;
  bool arg4 = (bool) BOOLEAN_TRUE ;
  bool result;
  
  SWIG_check_num_args("CParty::Leave",2,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::Leave",1,"CParty *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CParty::Leave",2,"CCharacter *");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CParty::Leave",3,"bool");
  if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("CParty::Leave",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_Leave",1,SWIGTYPE_p_CParty);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CParty_Leave",2,SWIGTYPE_p_CCharacter);
  }
  
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  if(lua_gettop(L)>=4){
    arg4 = (lua_toboolean(L, 4)!=0);
  }
  result = (bool)(arg1)->Leave(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_Destroy(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  bool arg2 = (bool) BOOLEAN_TRUE ;
  
  SWIG_check_num_args("CParty::Destroy",1,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::Destroy",1,"CParty *");
  if(lua_gettop(L)>=2 && !lua_isboolean(L,2)) SWIG_fail_arg("CParty::Destroy",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_Destroy",1,SWIGTYPE_p_CParty);
  }
  
  if(lua_gettop(L)>=2){
    arg2 = (lua_toboolean(L, 2)!=0);
  }
  (arg1)->Destroy(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_Promote(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  CCharacter *arg2 = (CCharacter *) 0 ;
  bool arg3 = (bool) BOOLEAN_FALSE ;
  bool arg4 = (bool) BOOLEAN_TRUE ;
  bool result;
  
  SWIG_check_num_args("CParty::Promote",2,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::Promote",1,"CParty *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CParty::Promote",2,"CCharacter *");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CParty::Promote",3,"bool");
  if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("CParty::Promote",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_Promote",1,SWIGTYPE_p_CParty);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CParty_Promote",2,SWIGTYPE_p_CCharacter);
  }
  
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  if(lua_gettop(L)>=4){
    arg4 = (lua_toboolean(L, 4)!=0);
  }
  result = (bool)(arg1)->Promote(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_Get(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  int arg2 ;
  CCharacter *result = 0 ;
  
  SWIG_check_num_args("CParty::Get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::Get",1,"CParty *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CParty::Get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_Get",1,SWIGTYPE_p_CParty);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CCharacter *)(arg1)->Get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCharacter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_GetMember(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  UInt16 arg2 ;
  CCharacter *result = 0 ;
  
  SWIG_check_num_args("CParty::GetMember",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::GetMember",1,"CParty *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CParty::GetMember",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_GetMember",1,SWIGTYPE_p_CParty);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (CCharacter *)(arg1)->GetMember(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCharacter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_FindMember(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  UInt32 arg2 ;
  CCharacter *result = 0 ;
  
  SWIG_check_num_args("CParty::FindMember",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::FindMember",1,"CParty *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CParty::FindMember",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_FindMember",1,SWIGTYPE_p_CParty);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (CCharacter *)(arg1)->FindMember(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCharacter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_GetAvgLevel(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  float result;
  
  SWIG_check_num_args("CParty::GetAvgLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::GetAvgLevel",1,"CParty *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_GetAvgLevel",1,SWIGTYPE_p_CParty);
  }
  
  result = (float)(arg1)->GetAvgLevel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_GetSexCount(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  int arg2 ;
  UInt8 result;
  
  SWIG_check_num_args("CParty::GetSexCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::GetSexCount",1,"CParty *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CParty::GetSexCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_GetSexCount",1,SWIGTYPE_p_CParty);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt8)(arg1)->GetSexCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_GetJobCount(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  int arg2 ;
  UInt8 result;
  
  SWIG_check_num_args("CParty::GetJobCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::GetJobCount",1,"CParty *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CParty::GetJobCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_GetJobCount",1,SWIGTYPE_p_CParty);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt8)(arg1)->GetJobCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_GetCount(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CParty::GetCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::GetCount",1,"CParty *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_GetCount",1,SWIGTYPE_p_CParty);
  }
  
  result = (UInt16)(arg1)->GetCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_GetRealMemNum(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CParty::GetRealMemNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::GetRealMemNum",1,"CParty *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_GetRealMemNum",1,SWIGTYPE_p_CParty);
  }
  
  result = (UInt16)(arg1)->GetRealMemNum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CParty_GetInPartyMember(lua_State* L) {
  int SWIG_arg = 0;
  CParty *arg1 = (CParty *) 0 ;
  UInt16 arg2 ;
  CCharacter *result = 0 ;
  
  SWIG_check_num_args("CParty::GetInPartyMember",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CParty::GetInPartyMember",1,"CParty *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CParty::GetInPartyMember",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CParty,0))){
    SWIG_fail_ptr("CParty_GetInPartyMember",1,SWIGTYPE_p_CParty);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (CCharacter *)(arg1)->GetInPartyMember(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCharacter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CParty(lua_State* L) {
  int SWIG_arg = 0;
  CParty *result = 0 ;
  
  SWIG_check_num_args("CParty::CParty",0,0)
  result = (CParty *)new CParty();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CParty,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CParty(void *obj) {
CParty *arg1 = (CParty *) obj;
delete arg1;
}
static swig_lua_method swig_CParty_methods[] = {
    {"GetLeader", _wrap_CParty_GetLeader}, 
    {"SetLeader", _wrap_CParty_SetLeader}, 
    {"Join", _wrap_CParty_Join}, 
    {"Leave", _wrap_CParty_Leave}, 
    {"Destroy", _wrap_CParty_Destroy}, 
    {"Promote", _wrap_CParty_Promote}, 
    {"Get", _wrap_CParty_Get}, 
    {"GetMember", _wrap_CParty_GetMember}, 
    {"FindMember", _wrap_CParty_FindMember}, 
    {"GetAvgLevel", _wrap_CParty_GetAvgLevel}, 
    {"GetSexCount", _wrap_CParty_GetSexCount}, 
    {"GetJobCount", _wrap_CParty_GetJobCount}, 
    {"GetCount", _wrap_CParty_GetCount}, 
    {"GetRealMemNum", _wrap_CParty_GetRealMemNum}, 
    {"GetInPartyMember", _wrap_CParty_GetInPartyMember}, 
    {0,0}
};
static swig_lua_attribute swig_CParty_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CParty_bases[] = {0};
static const char *swig_CParty_base_names[] = {0};
static swig_lua_class _wrap_class_CParty = { "CParty", &SWIGTYPE_p_CParty,_wrap_new_CParty, swig_delete_CParty, swig_CParty_methods, swig_CParty_attributes, swig_CParty_bases, swig_CParty_base_names };

static int _wrap_CPartner_GetPartner_id(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPartner::GetPartner_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetPartner_id",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetPartner_id",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt32)(arg1)->GetPartner_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetMob_id(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPartner::GetMob_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetMob_id",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetMob_id",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt32)(arg1)->GetMob_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetOwner_id(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPartner::GetOwner_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetOwner_id",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetOwner_id",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt32)(arg1)->GetOwner_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetLevel(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetLevel",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetLevel",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetLevel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetExp(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPartner::GetExp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetExp",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetExp",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt32)(arg1)->GetExp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetNextLvExp(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPartner::GetNextLvExp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetNextLvExp",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetNextLvExp",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt32)(arg1)->GetNextLvExp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetSTA(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetSTA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetSTA",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetSTA",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetSTA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetSPR(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetSPR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetSPR",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetSPR",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetSPR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetSTR(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetSTR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetSTR",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetSTR",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetSTR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetCON(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetCON",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetCON",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetCON",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetCON();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetAGI(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetAGI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetAGI",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetAGI",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetAGI();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetATK(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetATK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetATK",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetATK",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetATK();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetDEF(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetDEF",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetDEF",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetDEF",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetDEF();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetSPD(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetSPD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetSPD",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetSPD",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetSPD();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetPOW(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetPOW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetPOW",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetPOW",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetPOW();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetHIT(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetHIT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetHIT",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetHIT",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetHIT();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetEVA(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetEVA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetEVA",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetEVA",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetEVA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetHP(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPartner::GetHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetHP",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetHP",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt32)(arg1)->GetHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetMaxHP(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPartner::GetMaxHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetMaxHP",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetMaxHP",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt32)(arg1)->GetMaxHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetSP(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPartner::GetSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetSP",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetSP",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt32)(arg1)->GetSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetMaxSP(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPartner::GetMaxSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetMaxSP",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetMaxSP",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt32)(arg1)->GetMaxSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetGrow(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  float result;
  
  SWIG_check_num_args("CPartner::GetGrow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetGrow",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetGrow",1,SWIGTYPE_p_CPartner);
  }
  
  result = (float)(arg1)->GetGrow();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetGoodness(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int32 result;
  
  SWIG_check_num_args("CPartner::GetGoodness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetGoodness",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetGoodness",1,SWIGTYPE_p_CPartner);
  }
  
  result = (Int32)(arg1)->GetGoodness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetFavor(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  float result;
  
  SWIG_check_num_args("CPartner::GetFavor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetFavor",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetFavor",1,SWIGTYPE_p_CPartner);
  }
  
  result = (float)(arg1)->GetFavor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetHealth(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetHealth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetHealth",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetHealth",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetHealth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetElement(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CPartner::GetElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetElement",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetElement",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt8)(arg1)->GetElement();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetExpireDate(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPartner::GetExpireDate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetExpireDate",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetExpireDate",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt32)(arg1)->GetExpireDate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetRace(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CPartner::GetRace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetRace",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetRace",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt8)(arg1)->GetRace();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetLock(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  bool result;
  
  SWIG_check_num_args("CPartner::GetLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetLock",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetLock",1,SWIGTYPE_p_CPartner);
  }
  
  result = (bool)(arg1)->GetLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetAttrPoint(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetAttrPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetAttrPoint",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetAttrPoint",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetAttrPoint();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetAttrPoint(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPartner::SetAttrPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetAttrPoint",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetAttrPoint",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetAttrPoint",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetAttrPoint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetHP_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetHP_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetHP_native",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetHP_native",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetHP_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetSP_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetSP_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetSP_native",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetSP_native",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetSP_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetATK_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetATK_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetATK_native",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetATK_native",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetATK_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetDEF_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetDEF_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetDEF_native",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetDEF_native",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetDEF_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetSPD_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetSPD_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetSPD_native",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetSPD_native",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetSPD_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetPOW_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetPOW_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetPOW_native",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetPOW_native",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetPOW_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetHIT_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetHIT_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetHIT_native",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetHIT_native",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetHIT_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetEVA_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetEVA_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetEVA_native",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetEVA_native",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetEVA_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetPartnerType(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CPartner::GetPartnerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetPartnerType",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetPartnerType",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt8)(arg1)->GetPartnerType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetReqLv(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetReqLv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetReqLv",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetReqLv",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetReqLv();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetOwner(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CPartner::SetOwner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetOwner",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetOwner",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetOwner",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetOwner(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetFavor(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("CPartner::SetFavor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetFavor",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetFavor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetFavor",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFavor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetGoodness(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int32 arg2 ;
  
  SWIG_check_num_args("CPartner::SetGoodness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetGoodness",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetGoodness",2,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetGoodness",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  (arg1)->SetGoodness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetElement(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CPartner::SetElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetElement",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetElement",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetElement",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->SetElement(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetNextLvExp(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CPartner::SetNextLvExp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetNextLvExp",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetNextLvExp",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetNextLvExp",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetNextLvExp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetFull(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  bool arg2 = (bool) true ;
  bool arg3 = (bool) true ;
  bool arg4 = (bool) true ;
  
  SWIG_check_num_args("CPartner::SetFull",1,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetFull",1,"CPartner *");
  if(lua_gettop(L)>=2 && !lua_isboolean(L,2)) SWIG_fail_arg("CPartner::SetFull",2,"bool");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CPartner::SetFull",3,"bool");
  if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("CPartner::SetFull",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetFull",1,SWIGTYPE_p_CPartner);
  }
  
  if(lua_gettop(L)>=2){
    arg2 = (lua_toboolean(L, 2)!=0);
  }
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  if(lua_gettop(L)>=4){
    arg4 = (lua_toboolean(L, 4)!=0);
  }
  (arg1)->SetFull(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeState(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeState",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeState",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeState",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->ChangeState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeExp(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int32 arg2 ;
  Int32 arg3 = (Int32) 0 ;
  
  SWIG_check_num_args("CPartner::ChangeExp",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeExp",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeExp",2,"Int32");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CPartner::ChangeExp",3,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeExp",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (Int32)lua_tonumber(L, 3);
  }
  (arg1)->ChangeExp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeFavor(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeFavor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeFavor",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeFavor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeFavor",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->ChangeFavor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeHP(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeHP",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeHP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeHP",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeSP(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeSP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeSP",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeSP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeSP",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeSP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeHealth(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeHealth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeHealth",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeHealth",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeHealth",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeHealth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeHP_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeHP_native",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeHP_native",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeHP_native",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeHP_native",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeHP_native(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeSP_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeSP_native",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeSP_native",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeSP_native",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeSP_native",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeSP_native(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeATK_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeATK_native",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeATK_native",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeATK_native",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeATK_native",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeATK_native(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeDEF_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeDEF_native",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeDEF_native",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeDEF_native",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeDEF_native",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeDEF_native(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeSPD_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeSPD_native",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeSPD_native",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeSPD_native",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeSPD_native",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeSPD_native(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangePOW_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangePOW_native",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangePOW_native",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangePOW_native",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangePOW_native",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangePOW_native(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeHIT_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeHIT_native",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeHIT_native",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeHIT_native",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeHIT_native",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeHIT_native(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeEVA_native(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeEVA_native",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeEVA_native",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeEVA_native",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeEVA_native",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeEVA_native(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeGrow(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeGrow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeGrow",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeGrow",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeGrow",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->ChangeGrow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ReverseAttrib(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt8 arg2 ;
  UInt16 arg3 ;
  bool result;
  
  SWIG_check_num_args("CPartner::ReverseAttrib",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ReverseAttrib",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ReverseAttrib",2,"UInt8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CPartner::ReverseAttrib",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ReverseAttrib",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  result = (bool)(arg1)->ReverseAttrib(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_AddBuff(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  UInt32 arg3 ;
  UInt32 arg4 ;
  UInt32 arg5 ;
  UInt32 arg6 ;
  UInt8 arg7 ;
  bool result;
  
  SWIG_check_num_args("CPartner::AddBuff",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::AddBuff",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::AddBuff",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CPartner::AddBuff",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CPartner::AddBuff",4,"UInt32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CPartner::AddBuff",5,"UInt32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CPartner::AddBuff",6,"UInt32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CPartner::AddBuff",7,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_AddBuff",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt32)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt32)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt8)lua_tonumber(L, 7);
  result = (bool)(arg1)->AddBuff(arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_RemoveBuff(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPartner::RemoveBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::RemoveBuff",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::RemoveBuff",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_RemoveBuff",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->RemoveBuff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_RemoveBuffSchool(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPartner::RemoveBuffSchool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::RemoveBuffSchool",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::RemoveBuffSchool",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_RemoveBuffSchool",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->RemoveBuffSchool(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_HasBuff(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CPartner::HasBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::HasBuff",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::HasBuff",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_HasBuff",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasBuff(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_FindBuff(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  ExtractedBuffData *result = 0 ;
  
  SWIG_check_num_args("CPartner::FindBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::FindBuff",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::FindBuff",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_FindBuff",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (ExtractedBuffData *)(arg1)->FindBuff(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ExtractedBuffData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetSkillCoolDown(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  DWORD arg3 ;
  DWORD *argp3 ;
  
  SWIG_check_num_args("CPartner::SetSkillCoolDown",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetSkillCoolDown",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetSkillCoolDown",2,"UInt16");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("CPartner::SetSkillCoolDown",3,"DWORD");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetSkillCoolDown",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_DWORD,0))){
    SWIG_fail_ptr("CPartner_SetSkillCoolDown",3,SWIGTYPE_p_DWORD);
  }
  arg3 = *argp3;
  
  (arg1)->SetSkillCoolDown(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetAttrib2(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  UInt16 arg5 ;
  UInt16 arg6 ;
  UInt16 arg7 ;
  
  SWIG_check_num_args("CPartner::SetAttrib2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetAttrib2",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetAttrib2",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CPartner::SetAttrib2",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CPartner::SetAttrib2",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CPartner::SetAttrib2",5,"UInt16");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CPartner::SetAttrib2",6,"UInt16");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CPartner::SetAttrib2",7,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetAttrib2",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt16)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt16)lua_tonumber(L, 7);
  (arg1)->SetAttrib2(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetSTA(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPartner::SetSTA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetSTA",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetSTA",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetSTA",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetSTA(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetSPR(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPartner::SetSPR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetSPR",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetSPR",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetSPR",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetSPR(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetSTR(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPartner::SetSTR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetSTR",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetSTR",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetSTR",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetSTR(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetCON(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPartner::SetCON",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetCON",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetCON",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetCON",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetCON(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetAGI(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPartner::SetAGI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetAGI",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetAGI",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetAGI",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetAGI(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetHP(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  
  SWIG_check_num_args("CPartner::SetHP",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetHP",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetHP",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CPartner::SetHP",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetHP",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  (arg1)->SetHP(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_SetSP(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  
  SWIG_check_num_args("CPartner::SetSP",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::SetSP",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::SetSP",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CPartner::SetSP",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_SetSP",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  (arg1)->SetSP(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_HasSkill(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CPartner::HasSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::HasSkill",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::HasSkill",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_HasSkill",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasSkill(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_AddSkill(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPartner::AddSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::AddSkill",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::AddSkill",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_AddSkill",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->AddSkill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_RemoveSkill(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPartner::RemoveSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::RemoveSkill",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::RemoveSkill",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_RemoveSkill",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->RemoveSkill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetRandomSkillID(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetRandomSkillID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetRandomSkillID",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::GetRandomSkillID",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetRandomSkillID",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetRandomSkillID(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetNormalSkillCount(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CPartner::GetNormalSkillCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetNormalSkillCount",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetNormalSkillCount",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt8)(arg1)->GetNormalSkillCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetSpecialSkillCount(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CPartner::GetSpecialSkillCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetSpecialSkillCount",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetSpecialSkillCount",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt8)(arg1)->GetSpecialSkillCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ResetLevel(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPartner::ResetLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ResetLevel",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ResetLevel",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ResetLevel",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->ResetLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ResetPotential(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  
  SWIG_check_num_args("CPartner::ResetPotential",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ResetPotential",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ResetPotential",1,SWIGTYPE_p_CPartner);
  }
  
  (arg1)->ResetPotential();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ResetPartner(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  
  SWIG_check_num_args("CPartner::ResetPartner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ResetPartner",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ResetPartner",1,SWIGTYPE_p_CPartner);
  }
  
  (arg1)->ResetPartner();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetCultivation(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetCultivation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetCultivation",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetCultivation",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetCultivation();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangeCultivation(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangeCultivation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangeCultivation",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangeCultivation",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangeCultivation",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeCultivation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetPractice(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartner::GetPractice",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetPractice",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetPractice",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt16)(arg1)->GetPractice();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_ChangePractice(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPartner::ChangePractice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::ChangePractice",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::ChangePractice",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_ChangePractice",1,SWIGTYPE_p_CPartner);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangePractice(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetGrowLevel(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CPartner::GetGrowLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetGrowLevel",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetGrowLevel",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt8)(arg1)->GetGrowLevel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetUserType(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CPartner::GetUserType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetUserType",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetUserType",1,SWIGTYPE_p_CPartner);
  }
  
  result = (UInt8)CPartner_GetUserType(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_GetName(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CPartner::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::GetName",1,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_GetName",1,SWIGTYPE_p_CPartner);
  }
  
  result = (char *)CPartner_GetName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartner_IsBuffExist(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *arg1 = (CPartner *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CPartner::IsBuffExist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartner::IsBuffExist",1,"CPartner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartner::IsBuffExist",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartner_IsBuffExist",1,SWIGTYPE_p_CPartner);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)CPartner_IsBuffExist(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CPartner(lua_State* L) {
  int SWIG_arg = 0;
  CPartner *result = 0 ;
  
  SWIG_check_num_args("CPartner::CPartner",0,0)
  result = (CPartner *)new CPartner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPartner,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CPartner(void *obj) {
CPartner *arg1 = (CPartner *) obj;
delete arg1;
}
static swig_lua_method swig_CPartner_methods[] = {
    {"GetPartner_id", _wrap_CPartner_GetPartner_id}, 
    {"GetMob_id", _wrap_CPartner_GetMob_id}, 
    {"GetOwner_id", _wrap_CPartner_GetOwner_id}, 
    {"GetLevel", _wrap_CPartner_GetLevel}, 
    {"GetExp", _wrap_CPartner_GetExp}, 
    {"GetNextLvExp", _wrap_CPartner_GetNextLvExp}, 
    {"GetSTA", _wrap_CPartner_GetSTA}, 
    {"GetSPR", _wrap_CPartner_GetSPR}, 
    {"GetSTR", _wrap_CPartner_GetSTR}, 
    {"GetCON", _wrap_CPartner_GetCON}, 
    {"GetAGI", _wrap_CPartner_GetAGI}, 
    {"GetATK", _wrap_CPartner_GetATK}, 
    {"GetDEF", _wrap_CPartner_GetDEF}, 
    {"GetSPD", _wrap_CPartner_GetSPD}, 
    {"GetPOW", _wrap_CPartner_GetPOW}, 
    {"GetHIT", _wrap_CPartner_GetHIT}, 
    {"GetEVA", _wrap_CPartner_GetEVA}, 
    {"GetHP", _wrap_CPartner_GetHP}, 
    {"GetMaxHP", _wrap_CPartner_GetMaxHP}, 
    {"GetSP", _wrap_CPartner_GetSP}, 
    {"GetMaxSP", _wrap_CPartner_GetMaxSP}, 
    {"GetGrow", _wrap_CPartner_GetGrow}, 
    {"GetGoodness", _wrap_CPartner_GetGoodness}, 
    {"GetFavor", _wrap_CPartner_GetFavor}, 
    {"GetHealth", _wrap_CPartner_GetHealth}, 
    {"GetElement", _wrap_CPartner_GetElement}, 
    {"GetExpireDate", _wrap_CPartner_GetExpireDate}, 
    {"GetRace", _wrap_CPartner_GetRace}, 
    {"GetLock", _wrap_CPartner_GetLock}, 
    {"GetAttrPoint", _wrap_CPartner_GetAttrPoint}, 
    {"SetAttrPoint", _wrap_CPartner_SetAttrPoint}, 
    {"GetHP_native", _wrap_CPartner_GetHP_native}, 
    {"GetSP_native", _wrap_CPartner_GetSP_native}, 
    {"GetATK_native", _wrap_CPartner_GetATK_native}, 
    {"GetDEF_native", _wrap_CPartner_GetDEF_native}, 
    {"GetSPD_native", _wrap_CPartner_GetSPD_native}, 
    {"GetPOW_native", _wrap_CPartner_GetPOW_native}, 
    {"GetHIT_native", _wrap_CPartner_GetHIT_native}, 
    {"GetEVA_native", _wrap_CPartner_GetEVA_native}, 
    {"GetPartnerType", _wrap_CPartner_GetPartnerType}, 
    {"GetReqLv", _wrap_CPartner_GetReqLv}, 
    {"SetOwner", _wrap_CPartner_SetOwner}, 
    {"SetFavor", _wrap_CPartner_SetFavor}, 
    {"SetGoodness", _wrap_CPartner_SetGoodness}, 
    {"SetElement", _wrap_CPartner_SetElement}, 
    {"SetNextLvExp", _wrap_CPartner_SetNextLvExp}, 
    {"SetFull", _wrap_CPartner_SetFull}, 
    {"ChangeState", _wrap_CPartner_ChangeState}, 
    {"ChangeExp", _wrap_CPartner_ChangeExp}, 
    {"ChangeFavor", _wrap_CPartner_ChangeFavor}, 
    {"ChangeHP", _wrap_CPartner_ChangeHP}, 
    {"ChangeSP", _wrap_CPartner_ChangeSP}, 
    {"ChangeHealth", _wrap_CPartner_ChangeHealth}, 
    {"ChangeHP_native", _wrap_CPartner_ChangeHP_native}, 
    {"ChangeSP_native", _wrap_CPartner_ChangeSP_native}, 
    {"ChangeATK_native", _wrap_CPartner_ChangeATK_native}, 
    {"ChangeDEF_native", _wrap_CPartner_ChangeDEF_native}, 
    {"ChangeSPD_native", _wrap_CPartner_ChangeSPD_native}, 
    {"ChangePOW_native", _wrap_CPartner_ChangePOW_native}, 
    {"ChangeHIT_native", _wrap_CPartner_ChangeHIT_native}, 
    {"ChangeEVA_native", _wrap_CPartner_ChangeEVA_native}, 
    {"ChangeGrow", _wrap_CPartner_ChangeGrow}, 
    {"ReverseAttrib", _wrap_CPartner_ReverseAttrib}, 
    {"AddBuff", _wrap_CPartner_AddBuff}, 
    {"RemoveBuff", _wrap_CPartner_RemoveBuff}, 
    {"RemoveBuffSchool", _wrap_CPartner_RemoveBuffSchool}, 
    {"HasBuff", _wrap_CPartner_HasBuff}, 
    {"FindBuff", _wrap_CPartner_FindBuff}, 
    {"SetSkillCoolDown", _wrap_CPartner_SetSkillCoolDown}, 
    {"SetAttrib2", _wrap_CPartner_SetAttrib2}, 
    {"SetSTA", _wrap_CPartner_SetSTA}, 
    {"SetSPR", _wrap_CPartner_SetSPR}, 
    {"SetSTR", _wrap_CPartner_SetSTR}, 
    {"SetCON", _wrap_CPartner_SetCON}, 
    {"SetAGI", _wrap_CPartner_SetAGI}, 
    {"SetHP", _wrap_CPartner_SetHP}, 
    {"SetSP", _wrap_CPartner_SetSP}, 
    {"HasSkill", _wrap_CPartner_HasSkill}, 
    {"AddSkill", _wrap_CPartner_AddSkill}, 
    {"RemoveSkill", _wrap_CPartner_RemoveSkill}, 
    {"GetRandomSkillID", _wrap_CPartner_GetRandomSkillID}, 
    {"GetNormalSkillCount", _wrap_CPartner_GetNormalSkillCount}, 
    {"GetSpecialSkillCount", _wrap_CPartner_GetSpecialSkillCount}, 
    {"ResetLevel", _wrap_CPartner_ResetLevel}, 
    {"ResetPotential", _wrap_CPartner_ResetPotential}, 
    {"ResetPartner", _wrap_CPartner_ResetPartner}, 
    {"GetCultivation", _wrap_CPartner_GetCultivation}, 
    {"ChangeCultivation", _wrap_CPartner_ChangeCultivation}, 
    {"GetPractice", _wrap_CPartner_GetPractice}, 
    {"ChangePractice", _wrap_CPartner_ChangePractice}, 
    {"GetGrowLevel", _wrap_CPartner_GetGrowLevel}, 
    {"GetUserType", _wrap_CPartner_GetUserType}, 
    {"GetName", _wrap_CPartner_GetName}, 
    {"IsBuffExist", _wrap_CPartner_IsBuffExist}, 
    {0,0}
};
static swig_lua_attribute swig_CPartner_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CPartner_bases[] = {0};
static const char *swig_CPartner_base_names[] = {0};
static swig_lua_class _wrap_class_CPartner = { "CPartner", &SWIGTYPE_p_CPartner,_wrap_new_CPartner, swig_delete_CPartner, swig_CPartner_methods, swig_CPartner_attributes, swig_CPartner_bases, swig_CPartner_base_names };

static int _wrap_CPartnerGroup_GetPartner(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  UInt32 arg2 ;
  CPartner *result = 0 ;
  
  SWIG_check_num_args("CPartnerGroup::GetPartner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::GetPartner",1,"CPartnerGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartnerGroup::GetPartner",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_GetPartner",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (CPartner *)(arg1)->GetPartner(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPartner,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_GetPartnerByMobId(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  UInt32 arg2 ;
  CPartner *result = 0 ;
  
  SWIG_check_num_args("CPartnerGroup::GetPartnerByMobId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::GetPartnerByMobId",1,"CPartnerGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartnerGroup::GetPartnerByMobId",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_GetPartnerByMobId",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (CPartner *)(arg1)->GetPartnerByMobId(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPartner,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_GetPartnerByIndex(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  UInt16 arg2 ;
  CPartner *result = 0 ;
  
  SWIG_check_num_args("CPartnerGroup::GetPartnerByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::GetPartnerByIndex",1,"CPartnerGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartnerGroup::GetPartnerByIndex",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_GetPartnerByIndex",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (CPartner *)(arg1)->GetPartnerByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPartner,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_GetFightPartner(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  CPartner *result = 0 ;
  
  SWIG_check_num_args("CPartnerGroup::GetFightPartner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::GetFightPartner",1,"CPartnerGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_GetFightPartner",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  result = (CPartner *)(arg1)->GetFightPartner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPartner,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_Get(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  int arg2 ;
  CPartner *result = 0 ;
  
  SWIG_check_num_args("CPartnerGroup::Get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::Get",1,"CPartnerGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartnerGroup::Get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_Get",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CPartner *)(arg1)->Get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPartner,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_GetCount(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartnerGroup::GetCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::GetCount",1,"CPartnerGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_GetCount",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  result = (UInt16)(arg1)->GetCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_GetFightPartnerID(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPartnerGroup::GetFightPartnerID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::GetFightPartnerID",1,"CPartnerGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_GetFightPartnerID",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  result = (UInt32)(arg1)->GetFightPartnerID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_AddNewPartner(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  CPartner *arg2 = (CPartner *) 0 ;
  bool result;
  
  SWIG_check_num_args("CPartnerGroup::AddNewPartner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::AddNewPartner",1,"CPartnerGroup *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CPartnerGroup::AddNewPartner",2,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_AddNewPartner",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartnerGroup_AddNewPartner",2,SWIGTYPE_p_CPartner);
  }
  
  result = (bool)(arg1)->AddNewPartner(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_Destroy(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  
  SWIG_check_num_args("CPartnerGroup::Destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::Destroy",1,"CPartnerGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_Destroy",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  (arg1)->Destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_GetPartnerID(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  UInt16 arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CPartnerGroup::GetPartnerID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::GetPartnerID",1,"CPartnerGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartnerGroup::GetPartnerID",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_GetPartnerID",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetPartnerID(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_GetPartnerCount(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  UInt32 arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CPartnerGroup::GetPartnerCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::GetPartnerCount",1,"CPartnerGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartnerGroup::GetPartnerCount",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_GetPartnerCount",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetPartnerCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_AddPartner(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  UInt32 arg2 ;
  UInt8 arg3 = (UInt8) 0 ;
  
  SWIG_check_num_args("CPartnerGroup::AddPartner",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::AddPartner",1,"CPartnerGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartnerGroup::AddPartner",2,"UInt32");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CPartnerGroup::AddPartner",3,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_AddPartner",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
    arg3 = (UInt8)lua_tonumber(L, 3);
  }
  (arg1)->AddPartner(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_RemovePartner__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("CPartnerGroup::RemovePartner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::RemovePartner",1,"CPartnerGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartnerGroup::RemovePartner",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_RemovePartner",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->RemovePartner(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_RemovePartner__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  CPartner *arg2 = (CPartner *) 0 ;
  bool result;
  
  SWIG_check_num_args("CPartnerGroup::RemovePartner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::RemovePartner",1,"CPartnerGroup *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CPartnerGroup::RemovePartner",2,"CPartner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_RemovePartner",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CPartner,0))){
    SWIG_fail_ptr("CPartnerGroup_RemovePartner",2,SWIGTYPE_p_CPartner);
  }
  
  result = (bool)(arg1)->RemovePartner(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_RemovePartner(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPartnerGroup, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CPartner, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CPartnerGroup_RemovePartner__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPartnerGroup, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPartnerGroup_RemovePartner__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CPartnerGroup_RemovePartner'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CPartnerGroup::RemovePartner(UInt32)\n"
    "    CPartnerGroup::RemovePartner(CPartner *)\n");
  lua_error(L);return 0;
}


static int _wrap_CPartnerGroup_RemovePartnerByUID(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("CPartnerGroup::RemovePartnerByUID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::RemovePartnerByUID",1,"CPartnerGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartnerGroup::RemovePartnerByUID",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_RemovePartnerByUID",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->RemovePartnerByUID(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_SetAllFull(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  bool arg2 = (bool) true ;
  bool arg3 = (bool) true ;
  bool arg4 = (bool) true ;
  
  SWIG_check_num_args("CPartnerGroup::SetAllFull",1,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::SetAllFull",1,"CPartnerGroup *");
  if(lua_gettop(L)>=2 && !lua_isboolean(L,2)) SWIG_fail_arg("CPartnerGroup::SetAllFull",2,"bool");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CPartnerGroup::SetAllFull",3,"bool");
  if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("CPartnerGroup::SetAllFull",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_SetAllFull",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  if(lua_gettop(L)>=2){
    arg2 = (lua_toboolean(L, 2)!=0);
  }
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  if(lua_gettop(L)>=4){
    arg4 = (lua_toboolean(L, 4)!=0);
  }
  (arg1)->SetAllFull(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_ChangeFavor(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  UInt8 arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("CPartnerGroup::ChangeFavor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::ChangeFavor",1,"CPartnerGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPartnerGroup::ChangeFavor",2,"UInt8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CPartnerGroup::ChangeFavor",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_ChangeFavor",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->ChangeFavor(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_RaiseUpdate(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  
  SWIG_check_num_args("CPartnerGroup::RaiseUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::RaiseUpdate",1,"CPartnerGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_RaiseUpdate",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  (arg1)->RaiseUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPartnerGroup_CancelUpdate(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *arg1 = (CPartnerGroup *) 0 ;
  
  SWIG_check_num_args("CPartnerGroup::CancelUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPartnerGroup::CancelUpdate",1,"CPartnerGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPartnerGroup,0))){
    SWIG_fail_ptr("CPartnerGroup_CancelUpdate",1,SWIGTYPE_p_CPartnerGroup);
  }
  
  (arg1)->CancelUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CPartnerGroup(lua_State* L) {
  int SWIG_arg = 0;
  CPartnerGroup *result = 0 ;
  
  SWIG_check_num_args("CPartnerGroup::CPartnerGroup",0,0)
  result = (CPartnerGroup *)new CPartnerGroup();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPartnerGroup,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CPartnerGroup(void *obj) {
CPartnerGroup *arg1 = (CPartnerGroup *) obj;
delete arg1;
}
static swig_lua_method swig_CPartnerGroup_methods[] = {
    {"GetPartner", _wrap_CPartnerGroup_GetPartner}, 
    {"GetPartnerByMobId", _wrap_CPartnerGroup_GetPartnerByMobId}, 
    {"GetPartnerByIndex", _wrap_CPartnerGroup_GetPartnerByIndex}, 
    {"GetFightPartner", _wrap_CPartnerGroup_GetFightPartner}, 
    {"Get", _wrap_CPartnerGroup_Get}, 
    {"GetCount", _wrap_CPartnerGroup_GetCount}, 
    {"GetFightPartnerID", _wrap_CPartnerGroup_GetFightPartnerID}, 
    {"AddNewPartner", _wrap_CPartnerGroup_AddNewPartner}, 
    {"Destroy", _wrap_CPartnerGroup_Destroy}, 
    {"GetPartnerID", _wrap_CPartnerGroup_GetPartnerID}, 
    {"GetPartnerCount", _wrap_CPartnerGroup_GetPartnerCount}, 
    {"AddPartner", _wrap_CPartnerGroup_AddPartner}, 
    {"RemovePartner", _wrap_CPartnerGroup_RemovePartner}, 
    {"RemovePartnerByUID", _wrap_CPartnerGroup_RemovePartnerByUID}, 
    {"SetAllFull", _wrap_CPartnerGroup_SetAllFull}, 
    {"ChangeFavor", _wrap_CPartnerGroup_ChangeFavor}, 
    {"RaiseUpdate", _wrap_CPartnerGroup_RaiseUpdate}, 
    {"CancelUpdate", _wrap_CPartnerGroup_CancelUpdate}, 
    {0,0}
};
static swig_lua_attribute swig_CPartnerGroup_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CPartnerGroup_bases[] = {0};
static const char *swig_CPartnerGroup_base_names[] = {0};
static swig_lua_class _wrap_class_CPartnerGroup = { "CPartnerGroup", &SWIGTYPE_p_CPartnerGroup,_wrap_new_CPartnerGroup, swig_delete_CPartnerGroup, swig_CPartnerGroup_methods, swig_CPartnerGroup_attributes, swig_CPartnerGroup_bases, swig_CPartnerGroup_base_names };

static int _wrap_CScriptSystem_IsRunning(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  bool result;
  
  SWIG_check_num_args("CScriptSystem::IsRunning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::IsRunning",1,"CScriptSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_IsRunning",1,SWIGTYPE_p_CScriptSystem);
  }
  
  result = (bool)(arg1)->IsRunning();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_IsTalking(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  bool result;
  
  SWIG_check_num_args("CScriptSystem::IsTalking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::IsTalking",1,"CScriptSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_IsTalking",1,SWIGTYPE_p_CScriptSystem);
  }
  
  result = (bool)(arg1)->IsTalking();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_SetAnswer(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CScriptSystem::SetAnswer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::SetAnswer",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::SetAnswer",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_SetAnswer",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->SetAnswer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GetAnswer(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt8 arg2 = (UInt8) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CScriptSystem::GetAnswer",1,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GetAnswer",1,"CScriptSystem *");
  if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::GetAnswer",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GetAnswer",1,SWIGTYPE_p_CScriptSystem);
  }
  
  if(lua_gettop(L)>=2){
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
    arg2 = (UInt8)lua_tonumber(L, 2);
  }
  result = (UInt8)(arg1)->GetAnswer(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_BackAnswer(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt8 arg2 = (UInt8) 1 ;
  
  SWIG_check_num_args("CScriptSystem::BackAnswer",1,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::BackAnswer",1,"CScriptSystem *");
  if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::BackAnswer",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_BackAnswer",1,SWIGTYPE_p_CScriptSystem);
  }
  
  if(lua_gettop(L)>=2){
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
    arg2 = (UInt8)lua_tonumber(L, 2);
  }
  (arg1)->BackAnswer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GetNpcId(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CScriptSystem::GetNpcId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GetNpcId",1,"CScriptSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GetNpcId",1,SWIGTYPE_p_CScriptSystem);
  }
  
  result = (UInt32)(arg1)->GetNpcId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_TalkEnd(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CScriptSystem::TalkEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::TalkEnd",1,"CScriptSystem *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CScriptSystem::TalkEnd",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_TalkEnd",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->TalkEnd(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_ExitScript(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::ExitScript",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::ExitScript",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::ExitScript",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_ExitScript",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->ExitScript((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_StopScript(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::StopScript",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::StopScript",1,"CScriptSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_StopScript",1,SWIGTYPE_p_CScriptSystem);
  }
  
  (arg1)->StopScript();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_Say(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 0 ;
  bool arg4 = (bool) true ;
  UInt32 arg5 = (UInt32) 0 ;
  bool arg6 = (bool) BOOLEAN_FALSE ;
  
  SWIG_check_num_args("CScriptSystem::Say",2,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::Say",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::Say",2,"char const *");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::Say",3,"int");
  if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("CScriptSystem::Say",4,"bool");
  if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("CScriptSystem::Say",5,"UInt32");
  if(lua_gettop(L)>=6 && !lua_isboolean(L,6)) SWIG_fail_arg("CScriptSystem::Say",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_Say",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (int)lua_tonumber(L, 3);
  }
  if(lua_gettop(L)>=4){
    arg4 = (lua_toboolean(L, 4)!=0);
  }
  if(lua_gettop(L)>=5){
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
    arg5 = (UInt32)lua_tonumber(L, 5);
  }
  if(lua_gettop(L)>=6){
    arg6 = (lua_toboolean(L, 6)!=0);
  }
  (arg1)->Say((char const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_Rumor(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("CScriptSystem::Rumor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::Rumor",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::Rumor",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("CScriptSystem::Rumor",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_Rumor",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->Rumor((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_ShowHint(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::ShowHint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::ShowHint",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::ShowHint",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_ShowHint",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->ShowHint((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_ShowError(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::ShowError",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::ShowError",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::ShowError",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_ShowError",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->ShowError((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_LogMessage(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::LogMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::LogMessage",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::LogMessage",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CScriptSystem::LogMessage",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_LogMessage",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->LogMessage(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GenerateNPC(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  UInt16 arg5 ;
  bool arg6 ;
  int arg7 = (int) 10 ;
  UInt8 arg8 = (UInt8) 0 ;
  UInt32 arg9 = (UInt32) 0 ;
  UInt8 arg10 = (UInt8) 0 ;
  bool result;
  
  SWIG_check_num_args("CScriptSystem::GenerateNPC",6,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GenerateNPC",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::GenerateNPC",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::GenerateNPC",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CScriptSystem::GenerateNPC",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CScriptSystem::GenerateNPC",5,"UInt16");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("CScriptSystem::GenerateNPC",6,"bool");
  if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("CScriptSystem::GenerateNPC",7,"int");
  if(lua_gettop(L)>=8 && !lua_isnumber(L,8)) SWIG_fail_arg("CScriptSystem::GenerateNPC",8,"UInt8");
  if(lua_gettop(L)>=9 && !lua_isnumber(L,9)) SWIG_fail_arg("CScriptSystem::GenerateNPC",9,"UInt32");
  if(lua_gettop(L)>=10 && !lua_isnumber(L,10)) SWIG_fail_arg("CScriptSystem::GenerateNPC",10,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GenerateNPC",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  if(lua_gettop(L)>=7){
    arg7 = (int)lua_tonumber(L, 7);
  }
  if(lua_gettop(L)>=8){
    SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
    arg8 = (UInt8)lua_tonumber(L, 8);
  }
  if(lua_gettop(L)>=9){
    SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
    arg9 = (UInt32)lua_tonumber(L, 9);
  }
  if(lua_gettop(L)>=10){
    SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
    arg10 = (UInt8)lua_tonumber(L, 10);
  }
  result = (bool)(arg1)->GenerateNPC(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_OpenInterface(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  Int32 arg3 ;
  bool result;
  
  SWIG_check_num_args("CScriptSystem::OpenInterface",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::OpenInterface",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::OpenInterface",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::OpenInterface",3,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_OpenInterface",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (Int32)lua_tonumber(L, 3);
  result = (bool)(arg1)->OpenInterface((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_OpenShopMenu(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("CScriptSystem::OpenShopMenu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::OpenShopMenu",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::OpenShopMenu",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_OpenShopMenu",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->OpenShopMenu(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_Rank(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CScriptSystem::Rank",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::Rank",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::Rank",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_Rank",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->Rank(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_PlaySound(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::PlaySound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::PlaySound",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::PlaySound",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_PlaySound",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->PlaySound((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_SetNpcTable(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::SetNpcTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::SetNpcTable",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::SetNpcTable",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_SetNpcTable",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetNpcTable((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_SetItemTable(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::SetItemTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::SetItemTable",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::SetItemTable",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_SetItemTable",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetItemTable((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_SetBatTable(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::SetBatTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::SetBatTable",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::SetBatTable",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_SetBatTable",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetBatTable((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_SetInstTable(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::SetInstTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::SetInstTable",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::SetInstTable",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_SetInstTable",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetInstTable((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_IsProcess(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  bool result;
  
  SWIG_check_num_args("CScriptSystem::IsProcess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::IsProcess",1,"CScriptSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_IsProcess",1,SWIGTYPE_p_CScriptSystem);
  }
  
  result = (bool)(arg1)->IsProcess();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_IsAsking(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  bool result;
  
  SWIG_check_num_args("CScriptSystem::IsAsking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::IsAsking",1,"CScriptSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_IsAsking",1,SWIGTYPE_p_CScriptSystem);
  }
  
  result = (bool)(arg1)->IsAsking();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_IsSaying(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  bool result;
  
  SWIG_check_num_args("CScriptSystem::IsSaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::IsSaying",1,"CScriptSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_IsSaying",1,SWIGTYPE_p_CScriptSystem);
  }
  
  result = (bool)(arg1)->IsSaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_SetProcess(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CScriptSystem::SetProcess",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::SetProcess",1,"CScriptSystem *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CScriptSystem::SetProcess",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_SetProcess",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetProcess(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_SetAsking(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CScriptSystem::SetAsking",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::SetAsking",1,"CScriptSystem *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CScriptSystem::SetAsking",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_SetAsking",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetAsking(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_SetSaying(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CScriptSystem::SetSaying",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::SetSaying",1,"CScriptSystem *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CScriptSystem::SetSaying",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_SetSaying",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSaying(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GetMapLines(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CScriptSystem::GetMapLines",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GetMapLines",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::GetMapLines",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GetMapLines",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->GetMapLines(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GetMessengers(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 ;
  
  SWIG_check_num_args("CScriptSystem::GetMessengers",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GetMessengers",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::GetMessengers",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::GetMessengers",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GetMessengers",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  (arg1)->GetMessengers(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GetMessengersName(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 ;
  
  SWIG_check_num_args("CScriptSystem::GetMessengersName",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GetMessengersName",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::GetMessengersName",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::GetMessengersName",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GetMessengersName",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  (arg1)->GetMessengersName(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GetFriendly(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  
  SWIG_check_num_args("CScriptSystem::GetFriendly",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GetFriendly",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::GetFriendly",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::GetFriendly",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GetFriendly",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  (arg1)->GetFriendly(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_ChangeFriendly(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  Int32 arg4 ;
  
  SWIG_check_num_args("CScriptSystem::ChangeFriendly",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::ChangeFriendly",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::ChangeFriendly",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::ChangeFriendly",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CScriptSystem::ChangeFriendly",4,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_ChangeFriendly",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  arg4 = (Int32)lua_tonumber(L, 4);
  (arg1)->ChangeFriendly(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_CreatMasterAndStudent(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  
  SWIG_check_num_args("CScriptSystem::CreatMasterAndStudent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::CreatMasterAndStudent",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::CreatMasterAndStudent",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::CreatMasterAndStudent",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_CreatMasterAndStudent",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  (arg1)->CreatMasterAndStudent(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_DestroyMasterAndStudent(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  
  SWIG_check_num_args("CScriptSystem::DestroyMasterAndStudent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::DestroyMasterAndStudent",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::DestroyMasterAndStudent",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::DestroyMasterAndStudent",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_DestroyMasterAndStudent",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  (arg1)->DestroyMasterAndStudent(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_SendPrivateMessage(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  UInt32 arg3 ;
  UInt32 arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  
  SWIG_check_num_args("CScriptSystem::SendPrivateMessage",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::SendPrivateMessage",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::SendPrivateMessage",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::SendPrivateMessage",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CScriptSystem::SendPrivateMessage",4,"UInt32");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("CScriptSystem::SendPrivateMessage",5,"char const *");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("CScriptSystem::SendPrivateMessage",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_SendPrivateMessage",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->SendPrivateMessage((char const *)arg2,arg3,arg4,(char const *)arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_IsFriend(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  
  SWIG_check_num_args("CScriptSystem::IsFriend",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::IsFriend",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::IsFriend",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::IsFriend",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_IsFriend",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  (arg1)->IsFriend(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_HasGlobalNpcFlag(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  
  SWIG_check_num_args("CScriptSystem::HasGlobalNpcFlag",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::HasGlobalNpcFlag",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::HasGlobalNpcFlag",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::HasGlobalNpcFlag",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CScriptSystem::HasGlobalNpcFlag",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_HasGlobalNpcFlag",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  (arg1)->HasGlobalNpcFlag(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GetGlobalNpcFlag(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  
  SWIG_check_num_args("CScriptSystem::GetGlobalNpcFlag",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GetGlobalNpcFlag",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::GetGlobalNpcFlag",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::GetGlobalNpcFlag",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CScriptSystem::GetGlobalNpcFlag",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GetGlobalNpcFlag",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  (arg1)->GetGlobalNpcFlag(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_SetGlobalNpcFlag(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  UInt16 arg5 ;
  
  SWIG_check_num_args("CScriptSystem::SetGlobalNpcFlag",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::SetGlobalNpcFlag",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::SetGlobalNpcFlag",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::SetGlobalNpcFlag",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CScriptSystem::SetGlobalNpcFlag",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CScriptSystem::SetGlobalNpcFlag",5,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_SetGlobalNpcFlag",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  (arg1)->SetGlobalNpcFlag(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_RemoveGlobalNpcFlag(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  
  SWIG_check_num_args("CScriptSystem::RemoveGlobalNpcFlag",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::RemoveGlobalNpcFlag",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::RemoveGlobalNpcFlag",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::RemoveGlobalNpcFlag",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CScriptSystem::RemoveGlobalNpcFlag",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_RemoveGlobalNpcFlag",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  (arg1)->RemoveGlobalNpcFlag(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_SetQuestion(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 = (bool) true ;
  UInt8 arg4 = (UInt8) 0 ;
  UInt32 arg5 = (UInt32) 0 ;
  bool arg6 = (bool) BOOLEAN_FALSE ;
  
  SWIG_check_num_args("CScriptSystem::SetQuestion",2,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::SetQuestion",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::SetQuestion",2,"char const *");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CScriptSystem::SetQuestion",3,"bool");
  if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("CScriptSystem::SetQuestion",4,"UInt8");
  if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("CScriptSystem::SetQuestion",5,"UInt32");
  if(lua_gettop(L)>=6 && !lua_isboolean(L,6)) SWIG_fail_arg("CScriptSystem::SetQuestion",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_SetQuestion",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  if(lua_gettop(L)>=4){
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
    arg4 = (UInt8)lua_tonumber(L, 4);
  }
  if(lua_gettop(L)>=5){
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
    arg5 = (UInt32)lua_tonumber(L, 5);
  }
  if(lua_gettop(L)>=6){
    arg6 = (lua_toboolean(L, 6)!=0);
  }
  (arg1)->SetQuestion((char const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_AddAnswer(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt8 arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::AddAnswer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::AddAnswer",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::AddAnswer",2,"UInt8");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CScriptSystem::AddAnswer",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_AddAnswer",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->AddAnswer(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_WaitAnswer(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt8 arg2 = (UInt8) 0 ;
  UInt16 arg3 = (UInt16) 30 ;
  
  SWIG_check_num_args("CScriptSystem::WaitAnswer",1,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::WaitAnswer",1,"CScriptSystem *");
  if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::WaitAnswer",2,"UInt8");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::WaitAnswer",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_WaitAnswer",1,SWIGTYPE_p_CScriptSystem);
  }
  
  if(lua_gettop(L)>=2){
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
    arg2 = (UInt8)lua_tonumber(L, 2);
  }
  if(lua_gettop(L)>=3){
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
    arg3 = (UInt16)lua_tonumber(L, 3);
  }
  (arg1)->WaitAnswer(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_NextAnswer(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CScriptSystem::NextAnswer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::NextAnswer",1,"CScriptSystem *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CScriptSystem::NextAnswer",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_NextAnswer",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->NextAnswer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_AskGiven(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  UInt32 arg3 = (UInt32) 0 ;
  bool result;
  
  SWIG_check_num_args("CScriptSystem::AskGiven",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::AskGiven",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::AskGiven",2,"char const *");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::AskGiven",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_AskGiven",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  if(lua_gettop(L)>=3){
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
    arg3 = (UInt32)lua_tonumber(L, 3);
  }
  result = (bool)(arg1)->AskGiven((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_AskGivenObj(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt8 arg2 ;
  UInt32 arg3 ;
  
  SWIG_check_num_args("CScriptSystem::AskGivenObj",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::AskGivenObj",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::AskGivenObj",2,"UInt8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CScriptSystem::AskGivenObj",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_AskGivenObj",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  (arg1)->AskGivenObj(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GetGivenType(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt16 arg2 ;
  UInt8 result;
  
  SWIG_check_num_args("CScriptSystem::GetGivenType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GetGivenType",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::GetGivenType",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GetGivenType",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (UInt8)(arg1)->GetGivenType(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GetGivenID(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt16 arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CScriptSystem::GetGivenID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GetGivenID",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::GetGivenID",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GetGivenID",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetGivenID(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GetGivenUID(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt16 arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CScriptSystem::GetGivenUID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GetGivenUID",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::GetGivenUID",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GetGivenUID",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetGivenUID(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GetGivenCount(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CScriptSystem::GetGivenCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GetGivenCount",1,"CScriptSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GetGivenCount",1,SWIGTYPE_p_CScriptSystem);
  }
  
  result = (UInt16)(arg1)->GetGivenCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_ClearGiven(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::ClearGiven",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::ClearGiven",1,"CScriptSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_ClearGiven",1,SWIGTYPE_p_CScriptSystem);
  }
  
  (arg1)->ClearGiven();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_RemoveAllGiven(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  
  SWIG_check_num_args("CScriptSystem::RemoveAllGiven",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::RemoveAllGiven",1,"CScriptSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_RemoveAllGiven",1,SWIGTYPE_p_CScriptSystem);
  }
  
  (arg1)->RemoveAllGiven();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_AskString(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 = (bool) true ;
  UInt8 arg5 = (UInt8) 0 ;
  UInt32 arg6 = (UInt32) 0 ;
  
  SWIG_check_num_args("CScriptSystem::AskString",3,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::AskString",1,"CScriptSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CScriptSystem::AskString",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CScriptSystem::AskString",3,"char const *");
  if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("CScriptSystem::AskString",4,"bool");
  if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("CScriptSystem::AskString",5,"UInt8");
  if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("CScriptSystem::AskString",6,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_AskString",1,SWIGTYPE_p_CScriptSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  if(lua_gettop(L)>=4){
    arg4 = (lua_toboolean(L, 4)!=0);
  }
  if(lua_gettop(L)>=5){
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
    arg5 = (UInt8)lua_tonumber(L, 5);
  }
  if(lua_gettop(L)>=6){
    SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
    arg6 = (UInt32)lua_tonumber(L, 6);
  }
  (arg1)->AskString((char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_GetAnswerString(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CScriptSystem::GetAnswerString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::GetAnswerString",1,"CScriptSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_GetAnswerString",1,SWIGTYPE_p_CScriptSystem);
  }
  
  result = (char *)(arg1)->GetAnswerString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CScriptSystem_FindCharacter(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *arg1 = (CScriptSystem *) 0 ;
  UInt32 arg2 ;
  CCharacter *result = 0 ;
  
  SWIG_check_num_args("CScriptSystem::FindCharacter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CScriptSystem::FindCharacter",1,"CScriptSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CScriptSystem::FindCharacter",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CScriptSystem,0))){
    SWIG_fail_ptr("CScriptSystem_FindCharacter",1,SWIGTYPE_p_CScriptSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (CCharacter *)(arg1)->FindCharacter(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCharacter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CScriptSystem(lua_State* L) {
  int SWIG_arg = 0;
  CScriptSystem *result = 0 ;
  
  SWIG_check_num_args("CScriptSystem::CScriptSystem",0,0)
  result = (CScriptSystem *)new CScriptSystem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CScriptSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CScriptSystem(void *obj) {
CScriptSystem *arg1 = (CScriptSystem *) obj;
delete arg1;
}
static swig_lua_method swig_CScriptSystem_methods[] = {
    {"IsRunning", _wrap_CScriptSystem_IsRunning}, 
    {"IsTalking", _wrap_CScriptSystem_IsTalking}, 
    {"SetAnswer", _wrap_CScriptSystem_SetAnswer}, 
    {"GetAnswer", _wrap_CScriptSystem_GetAnswer}, 
    {"BackAnswer", _wrap_CScriptSystem_BackAnswer}, 
    {"GetNpcId", _wrap_CScriptSystem_GetNpcId}, 
    {"TalkEnd", _wrap_CScriptSystem_TalkEnd}, 
    {"ExitScript", _wrap_CScriptSystem_ExitScript}, 
    {"StopScript", _wrap_CScriptSystem_StopScript}, 
    {"Say", _wrap_CScriptSystem_Say}, 
    {"Rumor", _wrap_CScriptSystem_Rumor}, 
    {"ShowHint", _wrap_CScriptSystem_ShowHint}, 
    {"ShowError", _wrap_CScriptSystem_ShowError}, 
    {"LogMessage", _wrap_CScriptSystem_LogMessage}, 
    {"GenerateNPC", _wrap_CScriptSystem_GenerateNPC}, 
    {"OpenInterface", _wrap_CScriptSystem_OpenInterface}, 
    {"OpenShopMenu", _wrap_CScriptSystem_OpenShopMenu}, 
    {"Rank", _wrap_CScriptSystem_Rank}, 
    {"PlaySound", _wrap_CScriptSystem_PlaySound}, 
    {"SetNpcTable", _wrap_CScriptSystem_SetNpcTable}, 
    {"SetItemTable", _wrap_CScriptSystem_SetItemTable}, 
    {"SetBatTable", _wrap_CScriptSystem_SetBatTable}, 
    {"SetInstTable", _wrap_CScriptSystem_SetInstTable}, 
    {"IsProcess", _wrap_CScriptSystem_IsProcess}, 
    {"IsAsking", _wrap_CScriptSystem_IsAsking}, 
    {"IsSaying", _wrap_CScriptSystem_IsSaying}, 
    {"SetProcess", _wrap_CScriptSystem_SetProcess}, 
    {"SetAsking", _wrap_CScriptSystem_SetAsking}, 
    {"SetSaying", _wrap_CScriptSystem_SetSaying}, 
    {"GetMapLines", _wrap_CScriptSystem_GetMapLines}, 
    {"GetMessengers", _wrap_CScriptSystem_GetMessengers}, 
    {"GetMessengersName", _wrap_CScriptSystem_GetMessengersName}, 
    {"GetFriendly", _wrap_CScriptSystem_GetFriendly}, 
    {"ChangeFriendly", _wrap_CScriptSystem_ChangeFriendly}, 
    {"CreatMasterAndStudent", _wrap_CScriptSystem_CreatMasterAndStudent}, 
    {"DestroyMasterAndStudent", _wrap_CScriptSystem_DestroyMasterAndStudent}, 
    {"SendPrivateMessage", _wrap_CScriptSystem_SendPrivateMessage}, 
    {"IsFriend", _wrap_CScriptSystem_IsFriend}, 
    {"HasGlobalNpcFlag", _wrap_CScriptSystem_HasGlobalNpcFlag}, 
    {"GetGlobalNpcFlag", _wrap_CScriptSystem_GetGlobalNpcFlag}, 
    {"SetGlobalNpcFlag", _wrap_CScriptSystem_SetGlobalNpcFlag}, 
    {"RemoveGlobalNpcFlag", _wrap_CScriptSystem_RemoveGlobalNpcFlag}, 
    {"SetQuestion", _wrap_CScriptSystem_SetQuestion}, 
    {"AddAnswer", _wrap_CScriptSystem_AddAnswer}, 
    {"WaitAnswer", _wrap_CScriptSystem_WaitAnswer}, 
    {"NextAnswer", _wrap_CScriptSystem_NextAnswer}, 
    {"AskGiven", _wrap_CScriptSystem_AskGiven}, 
    {"AskGivenObj", _wrap_CScriptSystem_AskGivenObj}, 
    {"GetGivenType", _wrap_CScriptSystem_GetGivenType}, 
    {"GetGivenID", _wrap_CScriptSystem_GetGivenID}, 
    {"GetGivenUID", _wrap_CScriptSystem_GetGivenUID}, 
    {"GetGivenCount", _wrap_CScriptSystem_GetGivenCount}, 
    {"ClearGiven", _wrap_CScriptSystem_ClearGiven}, 
    {"RemoveAllGiven", _wrap_CScriptSystem_RemoveAllGiven}, 
    {"AskString", _wrap_CScriptSystem_AskString}, 
    {"GetAnswerString", _wrap_CScriptSystem_GetAnswerString}, 
    {"FindCharacter", _wrap_CScriptSystem_FindCharacter}, 
    {0,0}
};
static swig_lua_attribute swig_CScriptSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CScriptSystem_bases[] = {0};
static const char *swig_CScriptSystem_base_names[] = {0};
static swig_lua_class _wrap_class_CScriptSystem = { "CScriptSystem", &SWIGTYPE_p_CScriptSystem,_wrap_new_CScriptSystem, swig_delete_CScriptSystem, swig_CScriptSystem_methods, swig_CScriptSystem_attributes, swig_CScriptSystem_bases, swig_CScriptSystem_base_names };

static int _wrap_CQuestLog_GetChar_id(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestLog::GetChar_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetChar_id",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetChar_id",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (UInt32)(arg1)->GetChar_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetQuest_id(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetQuest_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetQuest_id",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetQuest_id",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (UInt16)(arg1)->GetQuest_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetType_id(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetType_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetType_id",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetType_id",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (UInt16)(arg1)->GetType_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_CheckFinished(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt32 arg2 = (UInt32) 0 ;
  UInt16 arg3 = (UInt16) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::CheckFinished",1,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::CheckFinished",1,"CQuestLog *");
  if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::CheckFinished",2,"UInt32");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CQuestLog::CheckFinished",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_CheckFinished",1,SWIGTYPE_p_CQuestLog);
  }
  
  if(lua_gettop(L)>=2){
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
    arg2 = (UInt32)lua_tonumber(L, 2);
  }
  if(lua_gettop(L)>=3){
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
    arg3 = (UInt16)lua_tonumber(L, 3);
  }
  result = (bool)(arg1)->CheckFinished(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_IsFailed(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::IsFailed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::IsFailed",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_IsFailed",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (bool)(arg1)->IsFailed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetFail(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetFail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetFail",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetFail",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetFail",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetFail(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_IsCompleted(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::IsCompleted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::IsCompleted",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_IsCompleted",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (bool)(arg1)->IsCompleted();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetComplete(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetComplete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetComplete",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetComplete",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetComplete",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetComplete(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_IsOverTime(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::IsOverTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::IsOverTime",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_IsOverTime",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (bool)(arg1)->IsOverTime();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetTimeLimit(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetTimeLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetTimeLimit",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::SetTimeLimit",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetTimeLimit",1,SWIGTYPE_p_CQuestLog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetTimeLimit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTimeLimitEx(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestLog::GetTimeLimitEx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTimeLimitEx",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTimeLimitEx",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (UInt32)(arg1)->GetTimeLimitEx();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_IsCancel(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::IsCancel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::IsCancel",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_IsCancel",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (bool)(arg1)->IsCancel();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_IsFailOverTime(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::IsFailOverTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::IsFailOverTime",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_IsFailOverTime",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (bool)(arg1)->IsFailOverTime();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_IsFailEscape(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::IsFailEscape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::IsFailEscape",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_IsFailEscape",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (bool)(arg1)->IsFailEscape();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_IsFailPlayerDie(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::IsFailPlayerDie",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::IsFailPlayerDie",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_IsFailPlayerDie",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (bool)(arg1)->IsFailPlayerDie();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_IsFailTeamDie(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::IsFailTeamDie",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::IsFailTeamDie",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_IsFailTeamDie",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (bool)(arg1)->IsFailTeamDie();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_IsFailFlowerDie(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::IsFailFlowerDie",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::IsFailFlowerDie",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_IsFailFlowerDie",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (bool)(arg1)->IsFailFlowerDie();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_IsFailNpcDie(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::IsFailNpcDie",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::IsFailNpcDie",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_IsFailNpcDie",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (bool)(arg1)->IsFailNpcDie();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_IsFailJoinParty(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::IsFailJoinParty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::IsFailJoinParty",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_IsFailJoinParty",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (bool)(arg1)->IsFailJoinParty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_IsCancelOverTime(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::IsCancelOverTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::IsCancelOverTime",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_IsCancelOverTime",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (bool)(arg1)->IsCancelOverTime();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetCancel(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetCancel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetCancel",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetCancel",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetCancel",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetCancel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetFailOverTime(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetFailOverTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetFailOverTime",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetFailOverTime",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetFailOverTime",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetFailOverTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetFailEscape(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetFailEscape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetFailEscape",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetFailEscape",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetFailEscape",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetFailEscape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetFailPlayerDie(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetFailPlayerDie",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetFailPlayerDie",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetFailPlayerDie",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetFailPlayerDie",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetFailPlayerDie(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetFailTeamDie(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetFailTeamDie",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetFailTeamDie",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetFailTeamDie",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetFailTeamDie",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetFailTeamDie(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetFailFlowerDie(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetFailFlowerDie",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetFailFlowerDie",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetFailFlowerDie",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetFailFlowerDie",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetFailFlowerDie(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetFailNpcDie(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetFailNpcDie",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetFailNpcDie",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetFailNpcDie",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetFailNpcDie",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetFailNpcDie(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetFailJoinParty(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetFailJoinParty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetFailJoinParty",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetFailJoinParty",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetFailJoinParty",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetFailJoinParty(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetCancelOverTime(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetCancelOverTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetCancelOverTime",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetCancelOverTime",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetCancelOverTime",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetCancelOverTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetItemId(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetItemId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetItemId",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetItemId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetItemId",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetTargetItemId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetItemNum(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetItemNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetItemNum",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetItemNum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetItemNum",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetItemNum(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetItemMax(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetItemMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetItemMax",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetItemMax",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetItemMax",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetItemMax(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetMobId(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetMobId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetMobId",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetMobId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetMobId",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetTargetMobId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetMobNum(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetMobNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetMobNum",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetMobNum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetMobNum",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetMobNum(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetMobMax(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetMobMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetMobMax",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetMobMax",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetMobMax",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetMobMax(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetNpcId(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetNpcId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetNpcId",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetNpcId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetNpcId",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetTargetNpcId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetNpcMap(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetNpcMap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetNpcMap",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetNpcMap",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetNpcMap",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetNpcMap(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetNpcX(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetNpcX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetNpcX",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetNpcX",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetNpcX",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetNpcX(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetNpcY(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetNpcY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetNpcY",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetNpcY",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetNpcY",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetNpcY(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetNpcNum(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetNpcNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetNpcNum",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetNpcNum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetNpcNum",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetNpcNum(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetPartnerId(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetPartnerId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetPartnerId",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetPartnerId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetPartnerId",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetTargetPartnerId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetPartnerNum(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetPartnerNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetPartnerNum",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetPartnerNum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetPartnerNum",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetPartnerNum(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetPartnerMax(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetPartnerMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetPartnerMax",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetPartnerMax",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetPartnerMax",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetPartnerMax(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetNewBieNum(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetNewBieNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetNewBieNum",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetNewBieNum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetNewBieNum",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetNewBieNum(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetNewBieMax(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetNewBieMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetNewBieMax",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetNewBieMax",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetNewBieMax",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetNewBieMax(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetPetId(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetPetId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetPetId",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetPetId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetPetId",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetTargetPetId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetPetNum(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetPetNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetPetNum",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetPetNum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetPetNum",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetPetNum(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetPetMax(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetPetMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetPetMax",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetPetMax",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetPetMax",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetPetMax(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetFollowerId(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetFollowerId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetFollowerId",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetFollowerId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetFollowerId",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetTargetFollowerId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetFollowerNum(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetFollowerNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetFollowerNum",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetFollowerNum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetFollowerNum",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTargetFollowerNum(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetTotal(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CQuestLog::GetTargetTotal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetTotal",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetTotal",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (UInt8)(arg1)->GetTargetTotal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetName(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CQuestLog::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetName",1,"CQuestLog *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CQuestLog::SetName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetName",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetDescription(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CQuestLog::SetDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetDescription",1,"CQuestLog *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CQuestLog::SetDescription",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetDescription",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetDescription((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetCancelEnable(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetCancelEnable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetCancelEnable",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetCancelEnable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetCancelEnable",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetCancelEnable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetFailCondition(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CQuestLog::SetFailCondition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetFailCondition",1,"CQuestLog *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CQuestLog::SetFailCondition",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetFailCondition",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetFailCondition((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetStartNPC(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 = (UInt16) 0 ;
  UInt16 arg5 = (UInt16) 0 ;
  
  SWIG_check_num_args("CQuestLog::SetStartNPC",3,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetStartNPC",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::SetStartNPC",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestLog::SetStartNPC",3,"UInt16");
  if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("CQuestLog::SetStartNPC",4,"UInt16");
  if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("CQuestLog::SetStartNPC",5,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetStartNPC",1,SWIGTYPE_p_CQuestLog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  if(lua_gettop(L)>=4){
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
    arg4 = (UInt16)lua_tonumber(L, 4);
  }
  if(lua_gettop(L)>=5){
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
    arg5 = (UInt16)lua_tonumber(L, 5);
  }
  (arg1)->SetStartNPC(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetEndNPC(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 = (UInt16) 0 ;
  UInt16 arg5 = (UInt16) 0 ;
  
  SWIG_check_num_args("CQuestLog::SetEndNPC",3,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetEndNPC",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::SetEndNPC",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestLog::SetEndNPC",3,"UInt16");
  if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("CQuestLog::SetEndNPC",4,"UInt16");
  if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("CQuestLog::SetEndNPC",5,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetEndNPC",1,SWIGTYPE_p_CQuestLog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  if(lua_gettop(L)>=4){
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
    arg4 = (UInt16)lua_tonumber(L, 4);
  }
  if(lua_gettop(L)>=5){
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
    arg5 = (UInt16)lua_tonumber(L, 5);
  }
  (arg1)->SetEndNPC(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetTargetNPC(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  UInt16 arg5 = (UInt16) 0 ;
  UInt16 arg6 = (UInt16) 0 ;
  
  SWIG_check_num_args("CQuestLog::SetTargetNPC",4,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetTargetNPC",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::SetTargetNPC",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestLog::SetTargetNPC",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestLog::SetTargetNPC",4,"UInt16");
  if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("CQuestLog::SetTargetNPC",5,"UInt16");
  if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("CQuestLog::SetTargetNPC",6,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetTargetNPC",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  if(lua_gettop(L)>=5){
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
    arg5 = (UInt16)lua_tonumber(L, 5);
  }
  if(lua_gettop(L)>=6){
    SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
    arg6 = (UInt16)lua_tonumber(L, 6);
  }
  (arg1)->SetTargetNPC(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetTargetNPC(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("CQuestLog::GetTargetNPC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetTargetNPC",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::GetTargetNPC",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetTargetNPC",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetTargetNPC(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_FindTargetNPC(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("CQuestLog::FindTargetNPC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::FindTargetNPC",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::FindTargetNPC",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_FindTargetNPC",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->FindTargetNPC(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetTargetItem(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  UInt8 arg5 ;
  UInt16 arg6 ;
  UInt8 arg7 ;
  UInt16 arg8 ;
  
  SWIG_check_num_args("CQuestLog::SetTargetItem",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetTargetItem",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::SetTargetItem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestLog::SetTargetItem",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestLog::SetTargetItem",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CQuestLog::SetTargetItem",5,"UInt8");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CQuestLog::SetTargetItem",6,"UInt16");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CQuestLog::SetTargetItem",7,"UInt8");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CQuestLog::SetTargetItem",8,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetTargetItem",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt8)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt16)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt8)lua_tonumber(L, 7);
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (UInt16)lua_tonumber(L, 8);
  (arg1)->SetTargetItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetTargetMOB(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  
  SWIG_check_num_args("CQuestLog::SetTargetMOB",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetTargetMOB",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::SetTargetMOB",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestLog::SetTargetMOB",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestLog::SetTargetMOB",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetTargetMOB",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  (arg1)->SetTargetMOB(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetTargetPartner(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  UInt8 arg5 ;
  UInt16 arg6 ;
  UInt8 arg7 ;
  
  SWIG_check_num_args("CQuestLog::SetTargetPartner",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetTargetPartner",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::SetTargetPartner",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestLog::SetTargetPartner",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestLog::SetTargetPartner",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CQuestLog::SetTargetPartner",5,"UInt8");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CQuestLog::SetTargetPartner",6,"UInt16");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CQuestLog::SetTargetPartner",7,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetTargetPartner",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt8)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt16)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt8)lua_tonumber(L, 7);
  (arg1)->SetTargetPartner(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetTargetPet(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  UInt8 arg5 ;
  UInt16 arg6 ;
  UInt8 arg7 ;
  
  SWIG_check_num_args("CQuestLog::SetTargetPet",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetTargetPet",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::SetTargetPet",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestLog::SetTargetPet",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestLog::SetTargetPet",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CQuestLog::SetTargetPet",5,"UInt8");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CQuestLog::SetTargetPet",6,"UInt16");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CQuestLog::SetTargetPet",7,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetTargetPet",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt8)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt16)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt8)lua_tonumber(L, 7);
  (arg1)->SetTargetPet(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetTargetNewBie(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  
  SWIG_check_num_args("CQuestLog::SetTargetNewBie",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetTargetNewBie",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::SetTargetNewBie",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestLog::SetTargetNewBie",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestLog::SetTargetNewBie",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetTargetNewBie",1,SWIGTYPE_p_CQuestLog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  (arg1)->SetTargetNewBie(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetEncountNPC(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  int arg5 ;
  UInt16 arg6 ;
  
  SWIG_check_num_args("CQuestLog::SetEncountNPC",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetEncountNPC",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::SetEncountNPC",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestLog::SetEncountNPC",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestLog::SetEncountNPC",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CQuestLog::SetEncountNPC",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CQuestLog::SetEncountNPC",6,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetEncountNPC",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt16)lua_tonumber(L, 6);
  (arg1)->SetEncountNPC(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetTargetMap(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  UInt16 arg5 ;
  
  SWIG_check_num_args("CQuestLog::SetTargetMap",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetTargetMap",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::SetTargetMap",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestLog::SetTargetMap",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestLog::SetTargetMap",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CQuestLog::SetTargetMap",5,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetTargetMap",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  (arg1)->SetTargetMap(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_ArriveTargetMap(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("CQuestLog::ArriveTargetMap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::ArriveTargetMap",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::ArriveTargetMap",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_ArriveTargetMap",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->ArriveTargetMap(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetTargetFollower(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  int arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  
  SWIG_check_num_args("CQuestLog::SetTargetFollower",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetTargetFollower",1,"CQuestLog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestLog::SetTargetFollower",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestLog::SetTargetFollower",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestLog::SetTargetFollower",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetTargetFollower",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  (arg1)->SetTargetFollower(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_UpdateData(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  
  SWIG_check_num_args("CQuestLog::UpdateData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::UpdateData",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_UpdateData",1,SWIGTYPE_p_CQuestLog);
  }
  
  (arg1)->UpdateData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_ResetData(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  
  SWIG_check_num_args("CQuestLog::ResetData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::ResetData",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_ResetData",1,SWIGTYPE_p_CQuestLog);
  }
  
  (arg1)->ResetData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_ResetTarget(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  
  SWIG_check_num_args("CQuestLog::ResetTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::ResetTarget",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_ResetTarget",1,SWIGTYPE_p_CQuestLog);
  }
  
  (arg1)->ResetTarget();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_SetQuestFailAfterLeaderChanged(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CQuestLog::SetQuestFailAfterLeaderChanged",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::SetQuestFailAfterLeaderChanged",1,"CQuestLog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CQuestLog::SetQuestFailAfterLeaderChanged",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_SetQuestFailAfterLeaderChanged",1,SWIGTYPE_p_CQuestLog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetQuestFailAfterLeaderChanged(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetStartNpcId(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestLog::GetStartNpcId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetStartNpcId",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetStartNpcId",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (UInt32)CQuestLog_GetStartNpcId(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetStartMapId(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetStartMapId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetStartMapId",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetStartMapId",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (UInt16)CQuestLog_GetStartMapId(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetEndNpcId(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestLog::GetEndNpcId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetEndNpcId",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetEndNpcId",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (UInt32)CQuestLog_GetEndNpcId(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestLog_GetEndMapId(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *arg1 = (CQuestLog *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestLog::GetEndMapId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestLog::GetEndMapId",1,"CQuestLog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestLog,0))){
    SWIG_fail_ptr("CQuestLog_GetEndMapId",1,SWIGTYPE_p_CQuestLog);
  }
  
  result = (UInt16)CQuestLog_GetEndMapId(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CQuestLog(lua_State* L) {
  int SWIG_arg = 0;
  CQuestLog *result = 0 ;
  
  SWIG_check_num_args("CQuestLog::CQuestLog",0,0)
  result = (CQuestLog *)new CQuestLog();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CQuestLog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CQuestLog(void *obj) {
CQuestLog *arg1 = (CQuestLog *) obj;
delete arg1;
}
static swig_lua_method swig_CQuestLog_methods[] = {
    {"GetChar_id", _wrap_CQuestLog_GetChar_id}, 
    {"GetQuest_id", _wrap_CQuestLog_GetQuest_id}, 
    {"GetType_id", _wrap_CQuestLog_GetType_id}, 
    {"CheckFinished", _wrap_CQuestLog_CheckFinished}, 
    {"IsFailed", _wrap_CQuestLog_IsFailed}, 
    {"SetFail", _wrap_CQuestLog_SetFail}, 
    {"IsCompleted", _wrap_CQuestLog_IsCompleted}, 
    {"SetComplete", _wrap_CQuestLog_SetComplete}, 
    {"IsOverTime", _wrap_CQuestLog_IsOverTime}, 
    {"SetTimeLimit", _wrap_CQuestLog_SetTimeLimit}, 
    {"GetTimeLimitEx", _wrap_CQuestLog_GetTimeLimitEx}, 
    {"IsCancel", _wrap_CQuestLog_IsCancel}, 
    {"IsFailOverTime", _wrap_CQuestLog_IsFailOverTime}, 
    {"IsFailEscape", _wrap_CQuestLog_IsFailEscape}, 
    {"IsFailPlayerDie", _wrap_CQuestLog_IsFailPlayerDie}, 
    {"IsFailTeamDie", _wrap_CQuestLog_IsFailTeamDie}, 
    {"IsFailFlowerDie", _wrap_CQuestLog_IsFailFlowerDie}, 
    {"IsFailNpcDie", _wrap_CQuestLog_IsFailNpcDie}, 
    {"IsFailJoinParty", _wrap_CQuestLog_IsFailJoinParty}, 
    {"IsCancelOverTime", _wrap_CQuestLog_IsCancelOverTime}, 
    {"SetCancel", _wrap_CQuestLog_SetCancel}, 
    {"SetFailOverTime", _wrap_CQuestLog_SetFailOverTime}, 
    {"SetFailEscape", _wrap_CQuestLog_SetFailEscape}, 
    {"SetFailPlayerDie", _wrap_CQuestLog_SetFailPlayerDie}, 
    {"SetFailTeamDie", _wrap_CQuestLog_SetFailTeamDie}, 
    {"SetFailFlowerDie", _wrap_CQuestLog_SetFailFlowerDie}, 
    {"SetFailNpcDie", _wrap_CQuestLog_SetFailNpcDie}, 
    {"SetFailJoinParty", _wrap_CQuestLog_SetFailJoinParty}, 
    {"SetCancelOverTime", _wrap_CQuestLog_SetCancelOverTime}, 
    {"GetTargetItemId", _wrap_CQuestLog_GetTargetItemId}, 
    {"GetTargetItemNum", _wrap_CQuestLog_GetTargetItemNum}, 
    {"GetTargetItemMax", _wrap_CQuestLog_GetTargetItemMax}, 
    {"GetTargetMobId", _wrap_CQuestLog_GetTargetMobId}, 
    {"GetTargetMobNum", _wrap_CQuestLog_GetTargetMobNum}, 
    {"GetTargetMobMax", _wrap_CQuestLog_GetTargetMobMax}, 
    {"GetTargetNpcId", _wrap_CQuestLog_GetTargetNpcId}, 
    {"GetTargetNpcMap", _wrap_CQuestLog_GetTargetNpcMap}, 
    {"GetTargetNpcX", _wrap_CQuestLog_GetTargetNpcX}, 
    {"GetTargetNpcY", _wrap_CQuestLog_GetTargetNpcY}, 
    {"GetTargetNpcNum", _wrap_CQuestLog_GetTargetNpcNum}, 
    {"GetTargetPartnerId", _wrap_CQuestLog_GetTargetPartnerId}, 
    {"GetTargetPartnerNum", _wrap_CQuestLog_GetTargetPartnerNum}, 
    {"GetTargetPartnerMax", _wrap_CQuestLog_GetTargetPartnerMax}, 
    {"GetTargetNewBieNum", _wrap_CQuestLog_GetTargetNewBieNum}, 
    {"GetTargetNewBieMax", _wrap_CQuestLog_GetTargetNewBieMax}, 
    {"GetTargetPetId", _wrap_CQuestLog_GetTargetPetId}, 
    {"GetTargetPetNum", _wrap_CQuestLog_GetTargetPetNum}, 
    {"GetTargetPetMax", _wrap_CQuestLog_GetTargetPetMax}, 
    {"GetTargetFollowerId", _wrap_CQuestLog_GetTargetFollowerId}, 
    {"GetTargetFollowerNum", _wrap_CQuestLog_GetTargetFollowerNum}, 
    {"GetTargetTotal", _wrap_CQuestLog_GetTargetTotal}, 
    {"SetName", _wrap_CQuestLog_SetName}, 
    {"SetDescription", _wrap_CQuestLog_SetDescription}, 
    {"SetCancelEnable", _wrap_CQuestLog_SetCancelEnable}, 
    {"SetFailCondition", _wrap_CQuestLog_SetFailCondition}, 
    {"SetStartNPC", _wrap_CQuestLog_SetStartNPC}, 
    {"SetEndNPC", _wrap_CQuestLog_SetEndNPC}, 
    {"SetTargetNPC", _wrap_CQuestLog_SetTargetNPC}, 
    {"GetTargetNPC", _wrap_CQuestLog_GetTargetNPC}, 
    {"FindTargetNPC", _wrap_CQuestLog_FindTargetNPC}, 
    {"SetTargetItem", _wrap_CQuestLog_SetTargetItem}, 
    {"SetTargetMOB", _wrap_CQuestLog_SetTargetMOB}, 
    {"SetTargetPartner", _wrap_CQuestLog_SetTargetPartner}, 
    {"SetTargetPet", _wrap_CQuestLog_SetTargetPet}, 
    {"SetTargetNewBie", _wrap_CQuestLog_SetTargetNewBie}, 
    {"SetEncountNPC", _wrap_CQuestLog_SetEncountNPC}, 
    {"SetTargetMap", _wrap_CQuestLog_SetTargetMap}, 
    {"ArriveTargetMap", _wrap_CQuestLog_ArriveTargetMap}, 
    {"SetTargetFollower", _wrap_CQuestLog_SetTargetFollower}, 
    {"UpdateData", _wrap_CQuestLog_UpdateData}, 
    {"ResetData", _wrap_CQuestLog_ResetData}, 
    {"ResetTarget", _wrap_CQuestLog_ResetTarget}, 
    {"SetQuestFailAfterLeaderChanged", _wrap_CQuestLog_SetQuestFailAfterLeaderChanged}, 
    {"GetStartNpcId", _wrap_CQuestLog_GetStartNpcId}, 
    {"GetStartMapId", _wrap_CQuestLog_GetStartMapId}, 
    {"GetEndNpcId", _wrap_CQuestLog_GetEndNpcId}, 
    {"GetEndMapId", _wrap_CQuestLog_GetEndMapId}, 
    {0,0}
};
static swig_lua_attribute swig_CQuestLog_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CQuestLog_bases[] = {0};
static const char *swig_CQuestLog_base_names[] = {0};
static swig_lua_class _wrap_class_CQuestLog = { "CQuestLog", &SWIGTYPE_p_CQuestLog,_wrap_new_CQuestLog, swig_delete_CQuestLog, swig_CQuestLog_methods, swig_CQuestLog_attributes, swig_CQuestLog_bases, swig_CQuestLog_base_names };

static int _wrap_CBatActor_GetOwner(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  CCharacter *result = 0 ;
  
  SWIG_check_num_args("CBatActor::GetOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetOwner",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetOwner",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (CCharacter *)(arg1)->GetOwner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCharacter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetCclass(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatActor::GetCclass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetCclass",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetCclass",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt8)(arg1)->GetCclass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetFaction(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatActor::GetFaction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetFaction",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetFaction",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt8)(arg1)->GetFaction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetLevel(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetLevel",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetLevel",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetLevel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetSTA(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetSTA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetSTA",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetSTA",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetSTA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetSPR(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetSPR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetSPR",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetSPR",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetSPR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetSTR(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetSTR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetSTR",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetSTR",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetSTR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetCON(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetCON",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetCON",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetCON",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetCON();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetAGI(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetAGI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetAGI",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetAGI",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetAGI();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetATK(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetATK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetATK",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetATK",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetATK();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetDEF(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetDEF",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetDEF",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetDEF",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetDEF();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetSPD(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetSPD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetSPD",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetSPD",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetSPD();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetPOW(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetPOW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetPOW",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetPOW",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetPOW();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetHIT(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetHIT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetHIT",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetHIT",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetHIT();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetEVA(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetEVA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetEVA",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetEVA",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetEVA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatActor::GetHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetHP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetHP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt32)(arg1)->GetHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetDHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int32 result;
  
  SWIG_check_num_args("CBatActor::GetDHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetDHP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetDHP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int32)(arg1)->GetDHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetMHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatActor::GetMHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetMHP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetMHP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt32)(arg1)->GetMHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetMaxHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatActor::GetMaxHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetMaxHP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetMaxHP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt32)(arg1)->GetMaxHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatActor::GetSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetSP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetSP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt32)(arg1)->GetSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetDSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int32 result;
  
  SWIG_check_num_args("CBatActor::GetDSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetDSP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetDSP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int32)(arg1)->GetDSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetMSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatActor::GetMSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetMSP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetMSP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt32)(arg1)->GetMSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetMaxSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatActor::GetMaxSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetMaxSP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetMaxSP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt32)(arg1)->GetMaxSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetDMHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("CBatActor::GetDMHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetDMHP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetDMHP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int16)(arg1)->GetDMHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetDMSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("CBatActor::GetDMSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetDMSP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetDMSP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int16)(arg1)->GetDMSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetDP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetDP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetDP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetDP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetDP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetTP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetTP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetTP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetTP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetTP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetDDP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("CBatActor::GetDDP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetDDP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetDDP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int16)(arg1)->GetDDP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetMDP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetMDP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetMDP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetMDP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetMDP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetMaxDP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetMaxDP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetMaxDP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetMaxDP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetMaxDP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetWC(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetWC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetWC",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetWC",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetWC();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetDWC(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int16 result;
  
  SWIG_check_num_args("CBatActor::GetDWC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetDWC",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetDWC",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int16)(arg1)->GetDWC();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetWcExp(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetWcExp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetWcExp",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetWcExp",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetWcExp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetMaxWC(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetMaxWC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetMaxWC",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetMaxWC",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetMaxWC();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetVP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetVP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetVP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetVP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetVP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetMaxVP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetMaxVP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetMaxVP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetMaxVP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetMaxVP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetIndex(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatActor::GetIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetIndex",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetIndex",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt8)(arg1)->GetIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetState(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatActor::GetState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetState",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetState",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt8)(arg1)->GetState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetTeam(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatActor::GetTeam",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetTeam",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetTeam",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt8)(arg1)->GetTeam();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetPosition(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatActor::GetPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetPosition",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetPosition",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt8)(arg1)->GetPosition();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetAction(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatActor::GetAction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetAction",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetAction",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt8)(arg1)->GetAction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetReaction(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatActor::GetReaction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetReaction",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetReaction",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt8)(arg1)->GetReaction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetTarget(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatActor::GetTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetTarget",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetTarget",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt8)(arg1)->GetTarget();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetCommand(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatActor::GetCommand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetCommand",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetCommand",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt8)(arg1)->GetCommand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetSubType(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatActor::GetSubType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetSubType",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetSubType",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt32)(arg1)->GetSubType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetAdditional(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatActor::GetAdditional",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetAdditional",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetAdditional",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt32)(arg1)->GetAdditional();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetSexClass(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatActor::GetSexClass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetSexClass",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetSexClass",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt8)(arg1)->GetSexClass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetLinkNext(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::GetLinkNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetLinkNext",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetLinkNext",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->GetLinkNext();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetLeftBattle(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::GetLeftBattle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetLeftBattle",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetLeftBattle",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->GetLeftBattle();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetGoodness(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int32 result;
  
  SWIG_check_num_args("CBatActor::GetGoodness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetGoodness",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetGoodness",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int32)(arg1)->GetGoodness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetRealDHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int32 result;
  
  SWIG_check_num_args("CBatActor::GetRealDHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetRealDHP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetRealDHP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int32)(arg1)->GetRealDHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetRealDMHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int32 result;
  
  SWIG_check_num_args("CBatActor::GetRealDMHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetRealDMHP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetRealDMHP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int32)(arg1)->GetRealDMHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetRealDSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int32 result;
  
  SWIG_check_num_args("CBatActor::GetRealDSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetRealDSP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetRealDSP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int32)(arg1)->GetRealDSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetRealDMSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int32 result;
  
  SWIG_check_num_args("CBatActor::GetRealDMSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetRealDMSP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetRealDMSP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int32)(arg1)->GetRealDMSP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetRealDDP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int32 result;
  
  SWIG_check_num_args("CBatActor::GetRealDDP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetRealDDP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetRealDDP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int32)(arg1)->GetRealDDP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetRealDVP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int32 result;
  
  SWIG_check_num_args("CBatActor::GetRealDVP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetRealDVP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetRealDVP",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (Int32)(arg1)->GetRealDVP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsDead(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsDead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsDead",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsDead",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->IsDead();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsEscaped(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsEscaped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsEscaped",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsEscaped",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->IsEscaped();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsBackup(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsBackup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsBackup",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsBackup",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->IsBackup();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsSurrender(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsSurrender",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsSurrender",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsSurrender",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->IsSurrender();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsHitTarget(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  CBatActor *arg2 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsHitTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsHitTarget",1,"CBatActor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBatActor::IsHitTarget",2,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsHitTarget",1,SWIGTYPE_p_CBatActor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsHitTarget",2,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->IsHitTarget(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsCatched(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsCatched",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsCatched",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsCatched",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->IsCatched();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetAttrib2(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  UInt16 arg5 ;
  UInt16 arg6 ;
  UInt16 arg7 ;
  
  SWIG_check_num_args("CBatActor::SetAttrib2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetAttrib2",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::SetAttrib2",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBatActor::SetAttrib2",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CBatActor::SetAttrib2",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CBatActor::SetAttrib2",5,"UInt16");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CBatActor::SetAttrib2",6,"UInt16");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CBatActor::SetAttrib2",7,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetAttrib2",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt16)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt16)lua_tonumber(L, 7);
  (arg1)->SetAttrib2(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 arg2 ;
  Int32 arg3 ;
  Int32 arg4 ;
  
  SWIG_check_num_args("CBatActor::SetHP",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetHP",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::SetHP",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBatActor::SetHP",3,"Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CBatActor::SetHP",4,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetHP",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  arg3 = (Int32)lua_tonumber(L, 3);
  arg4 = (Int32)lua_tonumber(L, 4);
  (arg1)->SetHP(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 arg2 ;
  Int32 arg3 ;
  Int32 arg4 ;
  
  SWIG_check_num_args("CBatActor::SetSP",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetSP",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::SetSP",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBatActor::SetSP",3,"Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CBatActor::SetSP",4,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetSP",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  arg3 = (Int32)lua_tonumber(L, 3);
  arg4 = (Int32)lua_tonumber(L, 4);
  (arg1)->SetSP(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetMaxHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CBatActor::SetMaxHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetMaxHP",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::SetMaxHP",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetMaxHP",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetMaxHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetMaxSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CBatActor::SetMaxSP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetMaxSP",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::SetMaxSP",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetMaxSP",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetMaxSP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetLevel(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CBatActor::SetLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetLevel",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::SetLevel",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetLevel",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 = (bool) true ;
  
  SWIG_check_num_args("CBatActor::ChangeHP",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeHP",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeHP",2,"Int");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeHP",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeHP",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  (arg1)->ChangeHP(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeMHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 = (bool) true ;
  
  SWIG_check_num_args("CBatActor::ChangeMHP",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeMHP",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeMHP",2,"Int");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeMHP",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeMHP",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  (arg1)->ChangeMHP(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 = (bool) true ;
  
  SWIG_check_num_args("CBatActor::ChangeSP",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeSP",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeSP",2,"Int");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeSP",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeSP",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  (arg1)->ChangeSP(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeMSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 = (bool) true ;
  
  SWIG_check_num_args("CBatActor::ChangeMSP",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeMSP",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeMSP",2,"Int");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeMSP",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeMSP",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  (arg1)->ChangeMSP(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeDP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 = (bool) true ;
  
  SWIG_check_num_args("CBatActor::ChangeDP",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeDP",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeDP",2,"Int");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeDP",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeDP",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  (arg1)->ChangeDP(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeWC(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 = (bool) true ;
  
  SWIG_check_num_args("CBatActor::ChangeWC",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeWC",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeWC",2,"Int");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeWC",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeWC",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  (arg1)->ChangeWC(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeVP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 = (bool) true ;
  
  SWIG_check_num_args("CBatActor::ChangeVP",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeVP",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeVP",2,"Int");
  if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeVP",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeVP",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (lua_toboolean(L, 3)!=0);
  }
  (arg1)->ChangeVP(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeTP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CBatActor::ChangeTP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeTP",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeTP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeTP",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeTP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeWcExp(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CBatActor::ChangeWcExp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeWcExp",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeWcExp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeWcExp",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeWcExp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ResetHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::ResetHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ResetHP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ResetHP",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->ResetHP();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ResetMHP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::ResetMHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ResetMHP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ResetMHP",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->ResetMHP();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ResetSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::ResetSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ResetSP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ResetSP",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->ResetSP();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ResetMSP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::ResetMSP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ResetMSP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ResetMSP",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->ResetMSP();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ResetDP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::ResetDP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ResetDP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ResetDP",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->ResetDP();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ResetVP(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::ResetVP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ResetVP",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ResetVP",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->ResetVP();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetSkillLv(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetSkillLv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetSkillLv",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::GetSkillLv",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetSkillLv",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetSkillLv(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SkillFail__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::SkillFail",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SkillFail",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SkillFail",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->SkillFail();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SkillFail__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CBatActor::SkillFail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SkillFail",1,"CBatActor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CBatActor::SkillFail",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SkillFail",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SkillFail((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SkillFail(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CBatActor_SkillFail__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CBatActor_SkillFail__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CBatActor_SkillFail'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBatActor::SkillFail()\n"
    "    CBatActor::SkillFail(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_CBatActor_MissSkill(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::MissSkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::MissSkill",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_MissSkill",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->MissSkill();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_HasSkill(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::HasSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::HasSkill",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::HasSkill",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_HasSkill",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasSkill(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_AddBuff(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  UInt16 arg5 ;
  UInt32 arg6 ;
  UInt8 arg7 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::AddBuff",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::AddBuff",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::AddBuff",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBatActor::AddBuff",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CBatActor::AddBuff",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CBatActor::AddBuff",5,"UInt16");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CBatActor::AddBuff",6,"UInt32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CBatActor::AddBuff",7,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_AddBuff",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt32)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (UInt8)lua_tonumber(L, 7);
  result = (bool)(arg1)->AddBuff(arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_RemoveBuff(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CBatActor::RemoveBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::RemoveBuff",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::RemoveBuff",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_RemoveBuff",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->RemoveBuff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_RemoveBuffSchool(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CBatActor::RemoveBuffSchool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::RemoveBuffSchool",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::RemoveBuffSchool",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_RemoveBuffSchool",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->RemoveBuffSchool(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_HasBuff(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::HasBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::HasBuff",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::HasBuff",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_HasBuff",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasBuff(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_FindBuff(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  ExtractedBuffData *result = 0 ;
  
  SWIG_check_num_args("CBatActor::FindBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::FindBuff",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::FindBuff",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_FindBuff",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (ExtractedBuffData *)(arg1)->FindBuff(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ExtractedBuffData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsValidTarget(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool arg2 = (bool) BOOLEAN_TRUE ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsValidTarget",1,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsValidTarget",1,"CBatActor *");
  if(lua_gettop(L)>=2 && !lua_isboolean(L,2)) SWIG_fail_arg("CBatActor::IsValidTarget",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsValidTarget",1,SWIGTYPE_p_CBatActor);
  }
  
  if(lua_gettop(L)>=2){
    arg2 = (lua_toboolean(L, 2)!=0);
  }
  result = (bool)(arg1)->IsValidTarget(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_InputCommand(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 arg2 ;
  UInt8 arg3 ;
  UInt32 arg4 ;
  UInt32 arg5 ;
  
  SWIG_check_num_args("CBatActor::InputCommand",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::InputCommand",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::InputCommand",2,"UInt8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBatActor::InputCommand",3,"UInt8");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CBatActor::InputCommand",4,"UInt32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CBatActor::InputCommand",5,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_InputCommand",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt32)lua_tonumber(L, 5);
  (arg1)->InputCommand(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetSkillCoolDown(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  DWORD arg3 ;
  DWORD *argp3 ;
  
  SWIG_check_num_args("CBatActor::SetSkillCoolDown",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetSkillCoolDown",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::SetSkillCoolDown",2,"UInt16");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("CBatActor::SetSkillCoolDown",3,"DWORD");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetSkillCoolDown",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_DWORD,0))){
    SWIG_fail_ptr("CBatActor_SetSkillCoolDown",3,SWIGTYPE_p_DWORD);
  }
  arg3 = *argp3;
  
  (arg1)->SetSkillCoolDown(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsPlayer(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsPlayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsPlayer",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsPlayer",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->IsPlayer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsMob(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsMob",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsMob",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsMob",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->IsMob();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsParnter(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsParnter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsParnter",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsParnter",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->IsParnter();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsBoss(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsBoss",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsBoss",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsBoss",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->IsBoss();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetWeaponATK(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetWeaponATK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetWeaponATK",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetWeaponATK",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetWeaponATK();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_AddAttriChangeToLst(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  UInt8 arg6 ;
  int arg7 = (int) -1 ;
  
  SWIG_check_num_args("CBatActor::AddAttriChangeToLst",6,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::AddAttriChangeToLst",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::AddAttriChangeToLst",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBatActor::AddAttriChangeToLst",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CBatActor::AddAttriChangeToLst",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CBatActor::AddAttriChangeToLst",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CBatActor::AddAttriChangeToLst",6,"UInt8");
  if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("CBatActor::AddAttriChangeToLst",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_AddAttriChangeToLst",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt8)lua_tonumber(L, 6);
  if(lua_gettop(L)>=7){
    arg7 = (int)lua_tonumber(L, 7);
  }
  (arg1)->AddAttriChangeToLst(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_BuffActive(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::BuffActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::BuffActive",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_BuffActive",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->BuffActive();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetPostSkill(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  UInt8 arg3 ;
  UInt8 arg4 ;
  UInt16 arg5 ;
  
  SWIG_check_num_args("CBatActor::SetPostSkill",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetPostSkill",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::SetPostSkill",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBatActor::SetPostSkill",3,"UInt8");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CBatActor::SetPostSkill",4,"UInt8");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CBatActor::SetPostSkill",5,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetPostSkill",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt8)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  (arg1)->SetPostSkill(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_HasPostSkill(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::HasPostSkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::HasPostSkill",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_HasPostSkill",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->HasPostSkill();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ClearPostSkill(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::ClearPostSkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ClearPostSkill",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ClearPostSkill",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->ClearPostSkill();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_DoDefaultAttack(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  CBatActor *arg2 = (CBatActor *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("CBatActor::DoDefaultAttack",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::DoDefaultAttack",1,"CBatActor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBatActor::DoDefaultAttack",2,"CBatActor *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBatActor::DoDefaultAttack",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CBatActor::DoDefaultAttack",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_DoDefaultAttack",1,SWIGTYPE_p_CBatActor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_DoDefaultAttack",2,SWIGTYPE_p_CBatActor);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->DoDefaultAttack(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetTempReaction(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CBatActor::SetTempReaction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetTempReaction",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::SetTempReaction",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetTempReaction",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->SetTempReaction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetTempAction(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CBatActor::SetTempAction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetTempAction",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::SetTempAction",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetTempAction",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->SetTempAction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetSkillItemATK(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetSkillItemATK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetSkillItemATK",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetSkillItemATK",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt16)(arg1)->GetSkillItemATK();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetUseItemType(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatActor::GetUseItemType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetUseItemType",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetUseItemType",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt8)(arg1)->GetUseItemType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetBattle(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  CBattle *result = 0 ;
  
  SWIG_check_num_args("CBatActor::GetBattle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetBattle",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetBattle",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (CBattle *)(arg1)->GetBattle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBattle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetRandomSkill(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  int arg2 = (int) -1 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatActor::GetRandomSkill",1,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetRandomSkill",1,"CBatActor *");
  if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::GetRandomSkill",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetRandomSkill",1,SWIGTYPE_p_CBatActor);
  }
  
  if(lua_gettop(L)>=2){
    arg2 = (int)lua_tonumber(L, 2);
  }
  result = (UInt16)(arg1)->GetRandomSkill(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetAIType(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CBatActor::SetAIType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetAIType",1,"CBatActor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CBatActor::SetAIType",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetAIType",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->SetAIType((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_CallHelper(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 ;
  UInt8 arg4 ;
  
  SWIG_check_num_args("CBatActor::CallHelper",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::CallHelper",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::CallHelper",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBatActor::CallHelper",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CBatActor::CallHelper",4,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_CallHelper",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt8)lua_tonumber(L, 4);
  (arg1)->CallHelper(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetSkillCsvData(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  SkillData *result = 0 ;
  
  SWIG_check_num_args("CBatActor::GetSkillCsvData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetSkillCsvData",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::GetSkillCsvData",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetSkillCsvData",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (SkillData *)(arg1)->GetSkillCsvData(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SkillData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_DoAction(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  CBatActor *arg2 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::DoAction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::DoAction",1,"CBatActor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBatActor::DoAction",2,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_DoAction",1,SWIGTYPE_p_CBatActor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_DoAction",2,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->DoAction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IgnoreTeam(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CBatActor::IgnoreTeam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IgnoreTeam",1,"CBatActor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CBatActor::IgnoreTeam",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IgnoreTeam",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->IgnoreTeam(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeTarget(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CBatActor::ChangeTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeTarget",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeTarget",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeTarget",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->ChangeTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangePlayerBatCmd(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt8 arg2 ;
  UInt8 arg3 ;
  UInt32 arg4 ;
  UInt32 arg5 ;
  
  SWIG_check_num_args("CBatActor::ChangePlayerBatCmd",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangePlayerBatCmd",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangePlayerBatCmd",2,"UInt8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBatActor::ChangePlayerBatCmd",3,"UInt8");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CBatActor::ChangePlayerBatCmd",4,"UInt32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CBatActor::ChangePlayerBatCmd",5,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangePlayerBatCmd",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt32)lua_tonumber(L, 5);
  (arg1)->ChangePlayerBatCmd(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_UseSkillMsg(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CBatActor::UseSkillMsg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::UseSkillMsg",1,"CBatActor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CBatActor::UseSkillMsg",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_UseSkillMsg",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->UseSkillMsg((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_CancelAction(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::CancelAction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::CancelAction",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_CancelAction",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->CancelAction();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_RestoreDropValue(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::RestoreDropValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::RestoreDropValue",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_RestoreDropValue",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->RestoreDropValue();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ItemFail(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CBatActor::ItemFail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ItemFail",1,"CBatActor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CBatActor::ItemFail",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ItemFail",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->ItemFail((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_UseItemMsg(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("CBatActor::UseItemMsg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::UseItemMsg",1,"CBatActor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CBatActor::UseItemMsg",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_UseItemMsg",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->UseItemMsg((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetContActCount(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatActor::GetContActCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetContActCount",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetContActCount",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt32)(arg1)->GetContActCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetCurContAct(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatActor::GetCurContAct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetCurContAct",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetCurContAct",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt32)(arg1)->GetCurContAct();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsLastHit(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsLastHit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsLastHit",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsLastHit",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->IsLastHit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_HasParty(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::HasParty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::HasParty",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_HasParty",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->HasParty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetPunish(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CBatActor::SetPunish",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetPunish",1,"CBatActor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CBatActor::SetPunish",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetPunish",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetPunish(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetPunish(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::GetPunish",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetPunish",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetPunish",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->GetPunish();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetJumpBack(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CBatActor::SetJumpBack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetJumpBack",1,"CBatActor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CBatActor::SetJumpBack",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetJumpBack",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetJumpBack(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_FindItemByid(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 arg2 ;
  CItem *result = 0 ;
  
  SWIG_check_num_args("CBatActor::FindItemByid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::FindItemByid",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::FindItemByid",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_FindItemByid",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (CItem *)(arg1)->FindItemByid(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CItem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetSkillUseItem(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  CItem *result = 0 ;
  
  SWIG_check_num_args("CBatActor::GetSkillUseItem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetSkillUseItem",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetSkillUseItem",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (CItem *)(arg1)->GetSkillUseItem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CItem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetUsingPet(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  CPet *result = 0 ;
  
  SWIG_check_num_args("CBatActor::GetUsingPet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetUsingPet",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetUsingPet",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (CPet *)(arg1)->GetUsingPet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_PetActive(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBatActor::PetActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::PetActive",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_PetActive",1,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->PetActive();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_SetBoundsExp(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CBatActor::SetBoundsExp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::SetBoundsExp",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::SetBoundsExp",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_SetBoundsExp",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->SetBoundsExp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetBoundsExp(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatActor::GetBoundsExp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetBoundsExp",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetBoundsExp",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (UInt32)(arg1)->GetBoundsExp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_IsLeader(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsLeader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsLeader",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsLeader",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (bool)(arg1)->IsLeader();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_DetectBuff(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::DetectBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::DetectBuff",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::DetectBuff",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_DetectBuff",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->DetectBuff(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetFinalValue(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  CBatActor *arg3 = (CBatActor *) 0 ;
  UInt8 arg4 ;
  UInt8 arg5 ;
  Int result;
  
  SWIG_check_num_args("CBatActor::GetFinalValue",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetFinalValue",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::GetFinalValue",2,"Int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CBatActor::GetFinalValue",3,"CBatActor *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CBatActor::GetFinalValue",4,"UInt8");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CBatActor::GetFinalValue",5,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetFinalValue",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetFinalValue",3,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt8)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt8)lua_tonumber(L, 5);
  result = (Int)(arg1)->GetFinalValue(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_GetProtector(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  CBatActor *result = 0 ;
  
  SWIG_check_num_args("CBatActor::GetProtector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::GetProtector",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_GetProtector",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (CBatActor *)(arg1)->GetProtector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatActor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeHp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("CBatActor::ChangeHp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeHp",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeHp",2,"Int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeHp",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeHp",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  CBatActor_ChangeHp__SWIG_0(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeHp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CBatActor::ChangeHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeHp",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeHp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeHp",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CBatActor_ChangeHp__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeHp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CBatActor_ChangeHp__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_CBatActor_ChangeHp__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CBatActor_ChangeHp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBatActor::ChangeHp(Int,bool)\n"
    "    CBatActor::ChangeHp(Int)\n");
  lua_error(L);return 0;
}


static int _wrap_CBatActor_ChangeMHp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("CBatActor::ChangeMHp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeMHp",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeMHp",2,"Int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeMHp",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeMHp",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  CBatActor_ChangeMHp__SWIG_0(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeMHp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CBatActor::ChangeMHp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeMHp",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeMHp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeMHp",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CBatActor_ChangeMHp__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeMHp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CBatActor_ChangeMHp__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_CBatActor_ChangeMHp__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CBatActor_ChangeMHp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBatActor::ChangeMHp(Int,bool)\n"
    "    CBatActor::ChangeMHp(Int)\n");
  lua_error(L);return 0;
}


static int _wrap_CBatActor_ChangeSp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("CBatActor::ChangeSp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeSp",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeSp",2,"Int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeSp",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeSp",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  CBatActor_ChangeSp__SWIG_0(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeSp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CBatActor::ChangeSp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeSp",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeSp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeSp",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CBatActor_ChangeSp__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeSp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CBatActor_ChangeSp__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_CBatActor_ChangeSp__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CBatActor_ChangeSp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBatActor::ChangeSp(Int,bool)\n"
    "    CBatActor::ChangeSp(Int)\n");
  lua_error(L);return 0;
}


static int _wrap_CBatActor_ChangeMSp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("CBatActor::ChangeMSp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeMSp",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeMSp",2,"Int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeMSp",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeMSp",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  CBatActor_ChangeMSp__SWIG_0(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeMSp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CBatActor::ChangeMSp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeMSp",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeMSp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeMSp",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CBatActor_ChangeMSp__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeMSp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CBatActor_ChangeMSp__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_CBatActor_ChangeMSp__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CBatActor_ChangeMSp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBatActor::ChangeMSp(Int,bool)\n"
    "    CBatActor::ChangeMSp(Int)\n");
  lua_error(L);return 0;
}


static int _wrap_CBatActor_ChangeDp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("CBatActor::ChangeDp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeDp",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeDp",2,"Int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeDp",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeDp",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  CBatActor_ChangeDp__SWIG_0(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeDp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CBatActor::ChangeDp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeDp",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeDp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeDp",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CBatActor_ChangeDp__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeDp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CBatActor_ChangeDp__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_CBatActor_ChangeDp__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CBatActor_ChangeDp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBatActor::ChangeDp(Int,bool)\n"
    "    CBatActor::ChangeDp(Int)\n");
  lua_error(L);return 0;
}


static int _wrap_CBatActor_ChangeWc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("CBatActor::ChangeWc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeWc",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeWc",2,"Int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("CBatActor::ChangeWc",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeWc",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  CBatActor_ChangeWc__SWIG_0(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeWc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CBatActor::ChangeWc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ChangeWc",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::ChangeWc",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ChangeWc",1,SWIGTYPE_p_CBatActor);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  CBatActor_ChangeWc__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ChangeWc(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CBatActor_ChangeWc__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBatActor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_CBatActor_ChangeWc__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CBatActor_ChangeWc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBatActor::ChangeWc(Int,bool)\n"
    "    CBatActor::ChangeWc(Int)\n");
  lua_error(L);return 0;
}


static int _wrap_CBatActor_IsBuffExist(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CBatActor::IsBuffExist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::IsBuffExist",1,"CBatActor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatActor::IsBuffExist",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_IsBuffExist",1,SWIGTYPE_p_CBatActor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)CBatActor_IsBuffExist(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ToBatMob(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  CBatMob *result = 0 ;
  
  SWIG_check_num_args("CBatActor::ToBatMob",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ToBatMob",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ToBatMob",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (CBatMob *)CBatActor_ToBatMob(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatMob,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatActor_ToBatChar(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *arg1 = (CBatActor *) 0 ;
  CBatCharacter *result = 0 ;
  
  SWIG_check_num_args("CBatActor::ToBatChar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatActor::ToBatChar",1,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBatActor_ToBatChar",1,SWIGTYPE_p_CBatActor);
  }
  
  result = (CBatCharacter *)CBatActor_ToBatChar(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatCharacter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CBatActor(lua_State* L) {
  int SWIG_arg = 0;
  CBatActor *result = 0 ;
  
  SWIG_check_num_args("CBatActor::CBatActor",0,0)
  result = (CBatActor *)new CBatActor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatActor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CBatActor(void *obj) {
CBatActor *arg1 = (CBatActor *) obj;
delete arg1;
}
static swig_lua_method swig_CBatActor_methods[] = {
    {"GetOwner", _wrap_CBatActor_GetOwner}, 
    {"GetCclass", _wrap_CBatActor_GetCclass}, 
    {"GetFaction", _wrap_CBatActor_GetFaction}, 
    {"GetLevel", _wrap_CBatActor_GetLevel}, 
    {"GetSTA", _wrap_CBatActor_GetSTA}, 
    {"GetSPR", _wrap_CBatActor_GetSPR}, 
    {"GetSTR", _wrap_CBatActor_GetSTR}, 
    {"GetCON", _wrap_CBatActor_GetCON}, 
    {"GetAGI", _wrap_CBatActor_GetAGI}, 
    {"GetATK", _wrap_CBatActor_GetATK}, 
    {"GetDEF", _wrap_CBatActor_GetDEF}, 
    {"GetSPD", _wrap_CBatActor_GetSPD}, 
    {"GetPOW", _wrap_CBatActor_GetPOW}, 
    {"GetHIT", _wrap_CBatActor_GetHIT}, 
    {"GetEVA", _wrap_CBatActor_GetEVA}, 
    {"GetHP", _wrap_CBatActor_GetHP}, 
    {"GetDHP", _wrap_CBatActor_GetDHP}, 
    {"GetMHP", _wrap_CBatActor_GetMHP}, 
    {"GetMaxHP", _wrap_CBatActor_GetMaxHP}, 
    {"GetSP", _wrap_CBatActor_GetSP}, 
    {"GetDSP", _wrap_CBatActor_GetDSP}, 
    {"GetMSP", _wrap_CBatActor_GetMSP}, 
    {"GetMaxSP", _wrap_CBatActor_GetMaxSP}, 
    {"GetDMHP", _wrap_CBatActor_GetDMHP}, 
    {"GetDMSP", _wrap_CBatActor_GetDMSP}, 
    {"GetDP", _wrap_CBatActor_GetDP}, 
    {"GetTP", _wrap_CBatActor_GetTP}, 
    {"GetDDP", _wrap_CBatActor_GetDDP}, 
    {"GetMDP", _wrap_CBatActor_GetMDP}, 
    {"GetMaxDP", _wrap_CBatActor_GetMaxDP}, 
    {"GetWC", _wrap_CBatActor_GetWC}, 
    {"GetDWC", _wrap_CBatActor_GetDWC}, 
    {"GetWcExp", _wrap_CBatActor_GetWcExp}, 
    {"GetMaxWC", _wrap_CBatActor_GetMaxWC}, 
    {"GetVP", _wrap_CBatActor_GetVP}, 
    {"GetMaxVP", _wrap_CBatActor_GetMaxVP}, 
    {"GetIndex", _wrap_CBatActor_GetIndex}, 
    {"GetState", _wrap_CBatActor_GetState}, 
    {"GetTeam", _wrap_CBatActor_GetTeam}, 
    {"GetPosition", _wrap_CBatActor_GetPosition}, 
    {"GetAction", _wrap_CBatActor_GetAction}, 
    {"GetReaction", _wrap_CBatActor_GetReaction}, 
    {"GetTarget", _wrap_CBatActor_GetTarget}, 
    {"GetCommand", _wrap_CBatActor_GetCommand}, 
    {"GetSubType", _wrap_CBatActor_GetSubType}, 
    {"GetAdditional", _wrap_CBatActor_GetAdditional}, 
    {"GetSexClass", _wrap_CBatActor_GetSexClass}, 
    {"GetLinkNext", _wrap_CBatActor_GetLinkNext}, 
    {"GetLeftBattle", _wrap_CBatActor_GetLeftBattle}, 
    {"GetGoodness", _wrap_CBatActor_GetGoodness}, 
    {"GetRealDHP", _wrap_CBatActor_GetRealDHP}, 
    {"GetRealDMHP", _wrap_CBatActor_GetRealDMHP}, 
    {"GetRealDSP", _wrap_CBatActor_GetRealDSP}, 
    {"GetRealDMSP", _wrap_CBatActor_GetRealDMSP}, 
    {"GetRealDDP", _wrap_CBatActor_GetRealDDP}, 
    {"GetRealDVP", _wrap_CBatActor_GetRealDVP}, 
    {"IsDead", _wrap_CBatActor_IsDead}, 
    {"IsEscaped", _wrap_CBatActor_IsEscaped}, 
    {"IsBackup", _wrap_CBatActor_IsBackup}, 
    {"IsSurrender", _wrap_CBatActor_IsSurrender}, 
    {"IsHitTarget", _wrap_CBatActor_IsHitTarget}, 
    {"IsCatched", _wrap_CBatActor_IsCatched}, 
    {"SetAttrib2", _wrap_CBatActor_SetAttrib2}, 
    {"SetHP", _wrap_CBatActor_SetHP}, 
    {"SetSP", _wrap_CBatActor_SetSP}, 
    {"SetMaxHP", _wrap_CBatActor_SetMaxHP}, 
    {"SetMaxSP", _wrap_CBatActor_SetMaxSP}, 
    {"SetLevel", _wrap_CBatActor_SetLevel}, 
    {"ChangeHP", _wrap_CBatActor_ChangeHP}, 
    {"ChangeMHP", _wrap_CBatActor_ChangeMHP}, 
    {"ChangeSP", _wrap_CBatActor_ChangeSP}, 
    {"ChangeMSP", _wrap_CBatActor_ChangeMSP}, 
    {"ChangeDP", _wrap_CBatActor_ChangeDP}, 
    {"ChangeWC", _wrap_CBatActor_ChangeWC}, 
    {"ChangeVP", _wrap_CBatActor_ChangeVP}, 
    {"ChangeTP", _wrap_CBatActor_ChangeTP}, 
    {"ChangeWcExp", _wrap_CBatActor_ChangeWcExp}, 
    {"ResetHP", _wrap_CBatActor_ResetHP}, 
    {"ResetMHP", _wrap_CBatActor_ResetMHP}, 
    {"ResetSP", _wrap_CBatActor_ResetSP}, 
    {"ResetMSP", _wrap_CBatActor_ResetMSP}, 
    {"ResetDP", _wrap_CBatActor_ResetDP}, 
    {"ResetVP", _wrap_CBatActor_ResetVP}, 
    {"GetSkillLv", _wrap_CBatActor_GetSkillLv}, 
    {"SkillFail", _wrap_CBatActor_SkillFail}, 
    {"MissSkill", _wrap_CBatActor_MissSkill}, 
    {"HasSkill", _wrap_CBatActor_HasSkill}, 
    {"AddBuff", _wrap_CBatActor_AddBuff}, 
    {"RemoveBuff", _wrap_CBatActor_RemoveBuff}, 
    {"RemoveBuffSchool", _wrap_CBatActor_RemoveBuffSchool}, 
    {"HasBuff", _wrap_CBatActor_HasBuff}, 
    {"FindBuff", _wrap_CBatActor_FindBuff}, 
    {"IsValidTarget", _wrap_CBatActor_IsValidTarget}, 
    {"InputCommand", _wrap_CBatActor_InputCommand}, 
    {"SetSkillCoolDown", _wrap_CBatActor_SetSkillCoolDown}, 
    {"IsPlayer", _wrap_CBatActor_IsPlayer}, 
    {"IsMob", _wrap_CBatActor_IsMob}, 
    {"IsParnter", _wrap_CBatActor_IsParnter}, 
    {"IsBoss", _wrap_CBatActor_IsBoss}, 
    {"GetWeaponATK", _wrap_CBatActor_GetWeaponATK}, 
    {"AddAttriChangeToLst", _wrap_CBatActor_AddAttriChangeToLst}, 
    {"BuffActive", _wrap_CBatActor_BuffActive}, 
    {"SetPostSkill", _wrap_CBatActor_SetPostSkill}, 
    {"HasPostSkill", _wrap_CBatActor_HasPostSkill}, 
    {"ClearPostSkill", _wrap_CBatActor_ClearPostSkill}, 
    {"DoDefaultAttack", _wrap_CBatActor_DoDefaultAttack}, 
    {"SetTempReaction", _wrap_CBatActor_SetTempReaction}, 
    {"SetTempAction", _wrap_CBatActor_SetTempAction}, 
    {"GetSkillItemATK", _wrap_CBatActor_GetSkillItemATK}, 
    {"GetUseItemType", _wrap_CBatActor_GetUseItemType}, 
    {"GetBattle", _wrap_CBatActor_GetBattle}, 
    {"GetRandomSkill", _wrap_CBatActor_GetRandomSkill}, 
    {"SetAIType", _wrap_CBatActor_SetAIType}, 
    {"CallHelper", _wrap_CBatActor_CallHelper}, 
    {"GetSkillCsvData", _wrap_CBatActor_GetSkillCsvData}, 
    {"DoAction", _wrap_CBatActor_DoAction}, 
    {"IgnoreTeam", _wrap_CBatActor_IgnoreTeam}, 
    {"ChangeTarget", _wrap_CBatActor_ChangeTarget}, 
    {"ChangePlayerBatCmd", _wrap_CBatActor_ChangePlayerBatCmd}, 
    {"UseSkillMsg", _wrap_CBatActor_UseSkillMsg}, 
    {"CancelAction", _wrap_CBatActor_CancelAction}, 
    {"RestoreDropValue", _wrap_CBatActor_RestoreDropValue}, 
    {"ItemFail", _wrap_CBatActor_ItemFail}, 
    {"UseItemMsg", _wrap_CBatActor_UseItemMsg}, 
    {"GetContActCount", _wrap_CBatActor_GetContActCount}, 
    {"GetCurContAct", _wrap_CBatActor_GetCurContAct}, 
    {"IsLastHit", _wrap_CBatActor_IsLastHit}, 
    {"HasParty", _wrap_CBatActor_HasParty}, 
    {"SetPunish", _wrap_CBatActor_SetPunish}, 
    {"GetPunish", _wrap_CBatActor_GetPunish}, 
    {"SetJumpBack", _wrap_CBatActor_SetJumpBack}, 
    {"FindItemByid", _wrap_CBatActor_FindItemByid}, 
    {"GetSkillUseItem", _wrap_CBatActor_GetSkillUseItem}, 
    {"GetUsingPet", _wrap_CBatActor_GetUsingPet}, 
    {"PetActive", _wrap_CBatActor_PetActive}, 
    {"SetBoundsExp", _wrap_CBatActor_SetBoundsExp}, 
    {"GetBoundsExp", _wrap_CBatActor_GetBoundsExp}, 
    {"IsLeader", _wrap_CBatActor_IsLeader}, 
    {"DetectBuff", _wrap_CBatActor_DetectBuff}, 
    {"GetFinalValue", _wrap_CBatActor_GetFinalValue}, 
    {"GetProtector", _wrap_CBatActor_GetProtector}, 
    {"ChangeHp", _wrap_CBatActor_ChangeHp}, 
    {"ChangeMHp", _wrap_CBatActor_ChangeMHp}, 
    {"ChangeSp", _wrap_CBatActor_ChangeSp}, 
    {"ChangeMSp", _wrap_CBatActor_ChangeMSp}, 
    {"ChangeDp", _wrap_CBatActor_ChangeDp}, 
    {"ChangeWc", _wrap_CBatActor_ChangeWc}, 
    {"IsBuffExist", _wrap_CBatActor_IsBuffExist}, 
    {"ToBatMob", _wrap_CBatActor_ToBatMob}, 
    {"ToBatChar", _wrap_CBatActor_ToBatChar}, 
    {0,0}
};
static swig_lua_attribute swig_CBatActor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CBatActor_bases[] = {0};
static const char *swig_CBatActor_base_names[] = {0};
static swig_lua_class _wrap_class_CBatActor = { "CBatActor", &SWIGTYPE_p_CBatActor,_wrap_new_CBatActor, swig_delete_CBatActor, swig_CBatActor_methods, swig_CBatActor_attributes, swig_CBatActor_bases, swig_CBatActor_base_names };

static int _wrap_CBatMob_GetMob_id(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatMob::GetMob_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetMob_id",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetMob_id",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt32)(arg1)->GetMob_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetOwner_id(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatMob::GetOwner_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetOwner_id",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetOwner_id",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt32)(arg1)->GetOwner_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetPartner_id(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatMob::GetPartner_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetPartner_id",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetPartner_id",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt32)(arg1)->GetPartner_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetMob_type(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatMob::GetMob_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetMob_type",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetMob_type",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt8)(arg1)->GetMob_type();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetRace(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatMob::GetRace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetRace",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetRace",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt8)(arg1)->GetRace();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetBoss(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatMob::GetBoss",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetBoss",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetBoss",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (bool)(arg1)->GetBoss();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetPartner_type(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatMob::GetPartner_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetPartner_type",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetPartner_type",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt8)(arg1)->GetPartner_type();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetHP_native(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatMob::GetHP_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetHP_native",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetHP_native",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt16)(arg1)->GetHP_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetSP_native(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatMob::GetSP_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetSP_native",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetSP_native",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt16)(arg1)->GetSP_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetATK_native(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatMob::GetATK_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetATK_native",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetATK_native",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt16)(arg1)->GetATK_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetDEF_native(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatMob::GetDEF_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetDEF_native",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetDEF_native",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt16)(arg1)->GetDEF_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetSPD_native(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatMob::GetSPD_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetSPD_native",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetSPD_native",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt16)(arg1)->GetSPD_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetPOW_native(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatMob::GetPOW_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetPOW_native",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetPOW_native",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt16)(arg1)->GetPOW_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetHIT_native(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatMob::GetHIT_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetHIT_native",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetHIT_native",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt16)(arg1)->GetHIT_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetEVA_native(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatMob::GetEVA_native",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetEVA_native",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetEVA_native",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt16)(arg1)->GetEVA_native();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetGrow(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  float result;
  
  SWIG_check_num_args("CBatMob::GetGrow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetGrow",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetGrow",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (float)(arg1)->GetGrow();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetColorIndex(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatMob::GetColorIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetColorIndex",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetColorIndex",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt16)(arg1)->GetColorIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetFavor(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  float result;
  
  SWIG_check_num_args("CBatMob::GetFavor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetFavor",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetFavor",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (float)(arg1)->GetFavor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_GetHealth(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBatMob::GetHealth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::GetHealth",1,"CBatMob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_GetHealth",1,SWIGTYPE_p_CBatMob);
  }
  
  result = (UInt16)(arg1)->GetHealth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_ChangeFavor(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("CBatMob::ChangeFavor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::ChangeFavor",1,"CBatMob *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatMob::ChangeFavor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_ChangeFavor",1,SWIGTYPE_p_CBatMob);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->ChangeFavor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_ChangeHealth(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CBatMob::ChangeHealth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::ChangeHealth",1,"CBatMob *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatMob::ChangeHealth",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_ChangeHealth",1,SWIGTYPE_p_CBatMob);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeHealth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatMob_SetData(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *arg1 = (CBatMob *) 0 ;
  UInt32 arg2 ;
  UInt16 arg3 = (UInt16) 0 ;
  
  SWIG_check_num_args("CBatMob::SetData",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatMob::SetData",1,"CBatMob *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBatMob::SetData",2,"UInt32");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CBatMob::SetData",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatMob,0))){
    SWIG_fail_ptr("CBatMob_SetData",1,SWIGTYPE_p_CBatMob);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
    arg3 = (UInt16)lua_tonumber(L, 3);
  }
  (arg1)->SetData(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CBatMob(lua_State* L) {
  int SWIG_arg = 0;
  CBatMob *result = 0 ;
  
  SWIG_check_num_args("CBatMob::CBatMob",0,0)
  result = (CBatMob *)new CBatMob();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatMob,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CBatMob(void *obj) {
CBatMob *arg1 = (CBatMob *) obj;
delete arg1;
}
static swig_lua_method swig_CBatMob_methods[] = {
    {"GetMob_id", _wrap_CBatMob_GetMob_id}, 
    {"GetOwner_id", _wrap_CBatMob_GetOwner_id}, 
    {"GetPartner_id", _wrap_CBatMob_GetPartner_id}, 
    {"GetMob_type", _wrap_CBatMob_GetMob_type}, 
    {"GetRace", _wrap_CBatMob_GetRace}, 
    {"GetBoss", _wrap_CBatMob_GetBoss}, 
    {"GetPartner_type", _wrap_CBatMob_GetPartner_type}, 
    {"GetHP_native", _wrap_CBatMob_GetHP_native}, 
    {"GetSP_native", _wrap_CBatMob_GetSP_native}, 
    {"GetATK_native", _wrap_CBatMob_GetATK_native}, 
    {"GetDEF_native", _wrap_CBatMob_GetDEF_native}, 
    {"GetSPD_native", _wrap_CBatMob_GetSPD_native}, 
    {"GetPOW_native", _wrap_CBatMob_GetPOW_native}, 
    {"GetHIT_native", _wrap_CBatMob_GetHIT_native}, 
    {"GetEVA_native", _wrap_CBatMob_GetEVA_native}, 
    {"GetGrow", _wrap_CBatMob_GetGrow}, 
    {"GetColorIndex", _wrap_CBatMob_GetColorIndex}, 
    {"GetFavor", _wrap_CBatMob_GetFavor}, 
    {"GetHealth", _wrap_CBatMob_GetHealth}, 
    {"ChangeFavor", _wrap_CBatMob_ChangeFavor}, 
    {"ChangeHealth", _wrap_CBatMob_ChangeHealth}, 
    {"SetData", _wrap_CBatMob_SetData}, 
    {0,0}
};
static swig_lua_attribute swig_CBatMob_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CBatMob_bases[] = {0,0};
static const char *swig_CBatMob_base_names[] = {"CBatActor *",0};
static swig_lua_class _wrap_class_CBatMob = { "CBatMob", &SWIGTYPE_p_CBatMob,_wrap_new_CBatMob, swig_delete_CBatMob, swig_CBatMob_methods, swig_CBatMob_attributes, swig_CBatMob_bases, swig_CBatMob_base_names };

static int _wrap_CBatCharacter_GetCurPartner(lua_State* L) {
  int SWIG_arg = 0;
  CBatCharacter *arg1 = (CBatCharacter *) 0 ;
  CBatMob *result = 0 ;
  
  SWIG_check_num_args("CBatCharacter::GetCurPartner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatCharacter::GetCurPartner",1,"CBatCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatCharacter,0))){
    SWIG_fail_ptr("CBatCharacter_GetCurPartner",1,SWIGTYPE_p_CBatCharacter);
  }
  
  result = (CBatMob *)(arg1)->GetCurPartner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatMob,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatCharacter_GetAcct_id(lua_State* L) {
  int SWIG_arg = 0;
  CBatCharacter *arg1 = (CBatCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatCharacter::GetAcct_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatCharacter::GetAcct_id",1,"CBatCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatCharacter,0))){
    SWIG_fail_ptr("CBatCharacter_GetAcct_id",1,SWIGTYPE_p_CBatCharacter);
  }
  
  result = (UInt32)(arg1)->GetAcct_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatCharacter_GetChar_id(lua_State* L) {
  int SWIG_arg = 0;
  CBatCharacter *arg1 = (CBatCharacter *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CBatCharacter::GetChar_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatCharacter::GetChar_id",1,"CBatCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatCharacter,0))){
    SWIG_fail_ptr("CBatCharacter_GetChar_id",1,SWIGTYPE_p_CBatCharacter);
  }
  
  result = (UInt32)(arg1)->GetChar_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatCharacter_GetSex(lua_State* L) {
  int SWIG_arg = 0;
  CBatCharacter *arg1 = (CBatCharacter *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatCharacter::GetSex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatCharacter::GetSex",1,"CBatCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatCharacter,0))){
    SWIG_fail_ptr("CBatCharacter_GetSex",1,SWIGTYPE_p_CBatCharacter);
  }
  
  result = (UInt8)(arg1)->GetSex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatCharacter_GetMaxPartner(lua_State* L) {
  int SWIG_arg = 0;
  CBatCharacter *arg1 = (CBatCharacter *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBatCharacter::GetMaxPartner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatCharacter::GetMaxPartner",1,"CBatCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatCharacter,0))){
    SWIG_fail_ptr("CBatCharacter_GetMaxPartner",1,SWIGTYPE_p_CBatCharacter);
  }
  
  result = (UInt8)(arg1)->GetMaxPartner();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBatCharacter_GetAttackBoss(lua_State* L) {
  int SWIG_arg = 0;
  CBatCharacter *arg1 = (CBatCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBatCharacter::GetAttackBoss",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBatCharacter::GetAttackBoss",1,"CBatCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBatCharacter,0))){
    SWIG_fail_ptr("CBatCharacter_GetAttackBoss",1,SWIGTYPE_p_CBatCharacter);
  }
  
  result = (bool)(arg1)->GetAttackBoss();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CBatCharacter(lua_State* L) {
  int SWIG_arg = 0;
  CBatCharacter *result = 0 ;
  
  SWIG_check_num_args("CBatCharacter::CBatCharacter",0,0)
  result = (CBatCharacter *)new CBatCharacter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatCharacter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CBatCharacter(void *obj) {
CBatCharacter *arg1 = (CBatCharacter *) obj;
delete arg1;
}
static swig_lua_method swig_CBatCharacter_methods[] = {
    {"GetCurPartner", _wrap_CBatCharacter_GetCurPartner}, 
    {"GetAcct_id", _wrap_CBatCharacter_GetAcct_id}, 
    {"GetChar_id", _wrap_CBatCharacter_GetChar_id}, 
    {"GetSex", _wrap_CBatCharacter_GetSex}, 
    {"GetMaxPartner", _wrap_CBatCharacter_GetMaxPartner}, 
    {"GetAttackBoss", _wrap_CBatCharacter_GetAttackBoss}, 
    {0,0}
};
static swig_lua_attribute swig_CBatCharacter_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CBatCharacter_bases[] = {0,0};
static const char *swig_CBatCharacter_base_names[] = {"CBatActor *",0};
static swig_lua_class _wrap_class_CBatCharacter = { "CBatCharacter", &SWIGTYPE_p_CBatCharacter,_wrap_new_CBatCharacter, swig_delete_CBatCharacter, swig_CBatCharacter_methods, swig_CBatCharacter_attributes, swig_CBatCharacter_bases, swig_CBatCharacter_base_names };

static int _wrap_CBattle_GetScript(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  CScriptSystem *result = 0 ;
  
  SWIG_check_num_args("CBattle::GetScript",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetScript",1,"CBattle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetScript",1,SWIGTYPE_p_CBattle);
  }
  
  result = (CScriptSystem *)(arg1)->GetScript();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CScriptSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetActor(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  CBatActor *result = 0 ;
  
  SWIG_check_num_args("CBattle::GetActor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetActor",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::GetActor",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetActor",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (CBatActor *)(arg1)->GetActor(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatActor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetActorCount(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBattle::GetActorCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetActorCount",1,"CBattle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetActorCount",1,SWIGTYPE_p_CBattle);
  }
  
  result = (UInt16)(arg1)->GetActorCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetTeamLeader(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  CBatCharacter *result = 0 ;
  
  SWIG_check_num_args("CBattle::GetTeamLeader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetTeamLeader",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::GetTeamLeader",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetTeamLeader",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (CBatCharacter *)(arg1)->GetTeamLeader(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatCharacter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetCharacter(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  CBatCharacter *result = 0 ;
  
  SWIG_check_num_args("CBattle::GetCharacter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetCharacter",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::GetCharacter",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetCharacter",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (CBatCharacter *)(arg1)->GetCharacter(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatCharacter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetCharacterCount(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBattle::GetCharacterCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetCharacterCount",1,"CBattle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetCharacterCount",1,SWIGTYPE_p_CBattle);
  }
  
  result = (UInt16)(arg1)->GetCharacterCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetMob(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  CBatMob *result = 0 ;
  
  SWIG_check_num_args("CBattle::GetMob",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetMob",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::GetMob",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetMob",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (CBatMob *)(arg1)->GetMob(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatMob,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetMobCount(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBattle::GetMobCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetMobCount",1,"CBattle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetMobCount",1,SWIGTYPE_p_CBattle);
  }
  
  result = (UInt16)(arg1)->GetMobCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_PushReactionActor(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  CBatActor *arg2 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBattle::PushReactionActor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::PushReactionActor",1,"CBattle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBattle::PushReactionActor",2,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_PushReactionActor",1,SWIGTYPE_p_CBattle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBattle_PushReactionActor",2,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->PushReactionActor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_PushExtraActor(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  CBatActor *arg2 = (CBatActor *) 0 ;
  
  SWIG_check_num_args("CBattle::PushExtraActor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::PushExtraActor",1,"CBattle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBattle::PushExtraActor",2,"CBatActor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_PushExtraActor",1,SWIGTYPE_p_CBattle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBattle_PushExtraActor",2,SWIGTYPE_p_CBatActor);
  }
  
  (arg1)->PushExtraActor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_SetForceEnd(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CBattle::SetForceEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::SetForceEnd",1,"CBattle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CBattle::SetForceEnd",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_SetForceEnd",1,SWIGTYPE_p_CBattle);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetForceEnd(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetTeamExist(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  UInt8 result;
  
  SWIG_check_num_args("CBattle::GetTeamExist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetTeamExist",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::GetTeamExist",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetTeamExist",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (UInt8)(arg1)->GetTeamExist(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetTeamAvgLevel(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CBattle::GetTeamAvgLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetTeamAvgLevel",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::GetTeamAvgLevel",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetTeamAvgLevel",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetTeamAvgLevel(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_SetPunish(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CBattle::SetPunish",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::SetPunish",1,"CBattle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CBattle::SetPunish",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_SetPunish",1,SWIGTYPE_p_CBattle);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetPunish(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetPunish(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  bool result;
  
  SWIG_check_num_args("CBattle::GetPunish",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetPunish",1,"CBattle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetPunish",1,SWIGTYPE_p_CBattle);
  }
  
  result = (bool)(arg1)->GetPunish();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_SetJumpReborn(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CBattle::SetJumpReborn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::SetJumpReborn",1,"CBattle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CBattle::SetJumpReborn",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_SetJumpReborn",1,SWIGTYPE_p_CBattle);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetJumpReborn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_SetBatEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  UInt8 arg3 ;
  
  SWIG_check_num_args("CBattle::SetBatEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::SetBatEvent",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::SetBatEvent",2,"UInt8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBattle::SetBatEvent",3,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_SetBatEvent",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  (arg1)->SetBatEvent(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_SetBatEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CBattle::SetBatEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::SetBatEvent",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::SetBatEvent",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_SetBatEvent",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->SetBatEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_SetBatEvent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBattle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CBattle_SetBatEvent__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CBattle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CBattle_SetBatEvent__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CBattle_SetBatEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CBattle::SetBatEvent(UInt8,UInt8)\n"
    "    CBattle::SetBatEvent(UInt8)\n");
  lua_error(L);return 0;
}


static int _wrap_CBattle_CheckTeamStatus(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  
  SWIG_check_num_args("CBattle::CheckTeamStatus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::CheckTeamStatus",1,"CBattle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_CheckTeamStatus",1,SWIGTYPE_p_CBattle);
  }
  
  (arg1)->CheckTeamStatus();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_BatSay(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  UInt32 arg5 ;
  UInt8 arg6 ;
  
  SWIG_check_num_args("CBattle::BatSay",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::BatSay",1,"CBattle *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CBattle::BatSay",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBattle::BatSay",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("CBattle::BatSay",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CBattle::BatSay",5,"UInt32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CBattle::BatSay",6,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_BatSay",1,SWIGTYPE_p_CBattle);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt32)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt8)lua_tonumber(L, 6);
  (arg1)->BatSay((char const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_DisableCmd(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CBattle::DisableCmd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::DisableCmd",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::DisableCmd",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_DisableCmd",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->DisableCmd(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_AddMob(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt32 arg2 ;
  UInt8 arg3 = (UInt8) 0 ;
  UInt8 arg4 = (UInt8) 0 ;
  UInt8 arg5 = (UInt8) 0 ;
  
  SWIG_check_num_args("CBattle::AddMob",2,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::AddMob",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::AddMob",2,"UInt32");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CBattle::AddMob",3,"UInt8");
  if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("CBattle::AddMob",4,"UInt8");
  if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("CBattle::AddMob",5,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_AddMob",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
    arg3 = (UInt8)lua_tonumber(L, 3);
  }
  if(lua_gettop(L)>=4){
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
    arg4 = (UInt8)lua_tonumber(L, 4);
  }
  if(lua_gettop(L)>=5){
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
    arg5 = (UInt8)lua_tonumber(L, 5);
  }
  (arg1)->AddMob(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_AddGuest(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt32 arg2 ;
  UInt8 arg3 ;
  
  SWIG_check_num_args("CBattle::AddGuest",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::AddGuest",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::AddGuest",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBattle::AddGuest",3,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_AddGuest",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  (arg1)->AddGuest(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_IsGuestExist(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  bool result;
  
  SWIG_check_num_args("CBattle::IsGuestExist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::IsGuestExist",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::IsGuestExist",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_IsGuestExist",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (bool)(arg1)->IsGuestExist(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetProtector(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  CBatActor *arg2 = (CBatActor *) 0 ;
  CBatActor *arg3 = (CBatActor *) 0 ;
  bool arg4 = (bool) BOOLEAN_FALSE ;
  CBatActor *result = 0 ;
  
  SWIG_check_num_args("CBattle::GetProtector",3,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetProtector",1,"CBattle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CBattle::GetProtector",2,"CBatActor *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CBattle::GetProtector",3,"CBatActor *");
  if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("CBattle::GetProtector",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetProtector",1,SWIGTYPE_p_CBattle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBattle_GetProtector",2,SWIGTYPE_p_CBatActor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CBatActor,0))){
    SWIG_fail_ptr("CBattle_GetProtector",3,SWIGTYPE_p_CBatActor);
  }
  
  if(lua_gettop(L)>=4){
    arg4 = (lua_toboolean(L, 4)!=0);
  }
  result = (CBatActor *)(arg1)->GetProtector(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatActor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetActorByPosition(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  UInt8 arg3 ;
  CBatActor *result = 0 ;
  
  SWIG_check_num_args("CBattle::GetActorByPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetActorByPosition",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::GetActorByPosition",2,"UInt8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBattle::GetActorByPosition",3,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetActorByPosition",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  result = (CBatActor *)(arg1)->GetActorByPosition(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatActor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetBattleType(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBattle::GetBattleType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetBattleType",1,"CBattle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetBattleType",1,SWIGTYPE_p_CBattle);
  }
  
  result = (UInt8)(arg1)->GetBattleType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetPvPCharacterCountFromTeam(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CBattle::GetPvPCharacterCountFromTeam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetPvPCharacterCountFromTeam",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::GetPvPCharacterCountFromTeam",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetPvPCharacterCountFromTeam",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetPvPCharacterCountFromTeam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetPvPCharacterFromTeam(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  UInt8 arg3 ;
  CBatCharacter *result = 0 ;
  
  SWIG_check_num_args("CBattle::GetPvPCharacterFromTeam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetPvPCharacterFromTeam",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::GetPvPCharacterFromTeam",2,"UInt8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBattle::GetPvPCharacterFromTeam",3,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetPvPCharacterFromTeam",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  result = (CBatCharacter *)(arg1)->GetPvPCharacterFromTeam(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatCharacter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_PvPAddMob(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt32 arg2 ;
  UInt8 arg3 ;
  UInt8 arg4 ;
  UInt8 arg5 ;
  
  SWIG_check_num_args("CBattle::PvPAddMob",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::PvPAddMob",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::PvPAddMob",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CBattle::PvPAddMob",3,"UInt8");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CBattle::PvPAddMob",4,"UInt8");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CBattle::PvPAddMob",5,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_PvPAddMob",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt8)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt8)lua_tonumber(L, 5);
  (arg1)->PvPAddMob(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetPvPAddMobCount(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CBattle::GetPvPAddMobCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetPvPAddMobCount",1,"CBattle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetPvPAddMobCount",1,SWIGTYPE_p_CBattle);
  }
  
  result = (UInt16)(arg1)->GetPvPAddMobCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetPvPLeaderFromTeam(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 arg2 ;
  CBatCharacter *result = 0 ;
  
  SWIG_check_num_args("CBattle::GetPvPLeaderFromTeam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetPvPLeaderFromTeam",1,"CBattle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CBattle::GetPvPLeaderFromTeam",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetPvPLeaderFromTeam",1,SWIGTYPE_p_CBattle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  result = (CBatCharacter *)(arg1)->GetPvPLeaderFromTeam(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBatCharacter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CBattle_GetCurTurn(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *arg1 = (CBattle *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CBattle::GetCurTurn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CBattle::GetCurTurn",1,"CBattle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CBattle,0))){
    SWIG_fail_ptr("CBattle_GetCurTurn",1,SWIGTYPE_p_CBattle);
  }
  
  result = (UInt8)CBattle_GetCurTurn(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CBattle(lua_State* L) {
  int SWIG_arg = 0;
  CBattle *result = 0 ;
  
  SWIG_check_num_args("CBattle::CBattle",0,0)
  result = (CBattle *)new CBattle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CBattle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CBattle(void *obj) {
CBattle *arg1 = (CBattle *) obj;
delete arg1;
}
static swig_lua_method swig_CBattle_methods[] = {
    {"GetScript", _wrap_CBattle_GetScript}, 
    {"GetActor", _wrap_CBattle_GetActor}, 
    {"GetActorCount", _wrap_CBattle_GetActorCount}, 
    {"GetTeamLeader", _wrap_CBattle_GetTeamLeader}, 
    {"GetCharacter", _wrap_CBattle_GetCharacter}, 
    {"GetCharacterCount", _wrap_CBattle_GetCharacterCount}, 
    {"GetMob", _wrap_CBattle_GetMob}, 
    {"GetMobCount", _wrap_CBattle_GetMobCount}, 
    {"PushReactionActor", _wrap_CBattle_PushReactionActor}, 
    {"PushExtraActor", _wrap_CBattle_PushExtraActor}, 
    {"SetForceEnd", _wrap_CBattle_SetForceEnd}, 
    {"GetTeamExist", _wrap_CBattle_GetTeamExist}, 
    {"GetTeamAvgLevel", _wrap_CBattle_GetTeamAvgLevel}, 
    {"SetPunish", _wrap_CBattle_SetPunish}, 
    {"GetPunish", _wrap_CBattle_GetPunish}, 
    {"SetJumpReborn", _wrap_CBattle_SetJumpReborn}, 
    {"SetBatEvent", _wrap_CBattle_SetBatEvent}, 
    {"CheckTeamStatus", _wrap_CBattle_CheckTeamStatus}, 
    {"BatSay", _wrap_CBattle_BatSay}, 
    {"DisableCmd", _wrap_CBattle_DisableCmd}, 
    {"AddMob", _wrap_CBattle_AddMob}, 
    {"AddGuest", _wrap_CBattle_AddGuest}, 
    {"IsGuestExist", _wrap_CBattle_IsGuestExist}, 
    {"GetProtector", _wrap_CBattle_GetProtector}, 
    {"GetActorByPosition", _wrap_CBattle_GetActorByPosition}, 
    {"GetBattleType", _wrap_CBattle_GetBattleType}, 
    {"GetPvPCharacterCountFromTeam", _wrap_CBattle_GetPvPCharacterCountFromTeam}, 
    {"GetPvPCharacterFromTeam", _wrap_CBattle_GetPvPCharacterFromTeam}, 
    {"PvPAddMob", _wrap_CBattle_PvPAddMob}, 
    {"GetPvPAddMobCount", _wrap_CBattle_GetPvPAddMobCount}, 
    {"GetPvPLeaderFromTeam", _wrap_CBattle_GetPvPLeaderFromTeam}, 
    {"GetCurTurn", _wrap_CBattle_GetCurTurn}, 
    {0,0}
};
static swig_lua_attribute swig_CBattle_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CBattle_bases[] = {0};
static const char *swig_CBattle_base_names[] = {0};
static swig_lua_class _wrap_class_CBattle = { "CBattle", &SWIGTYPE_p_CBattle,_wrap_new_CBattle, swig_delete_CBattle, swig_CBattle_methods, swig_CBattle_attributes, swig_CBattle_bases, swig_CBattle_base_names };

static int _wrap_CGuild_GetGuild_uid(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CGuild::GetGuild_uid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetGuild_uid",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetGuild_uid",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt32)(arg1)->GetGuild_uid();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetAlliance_id(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CGuild::GetAlliance_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetAlliance_id",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetAlliance_id",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt32)(arg1)->GetAlliance_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetEnemy_id(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CGuild::GetEnemy_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetEnemy_id",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetEnemy_id",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt32)(arg1)->GetEnemy_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetLevel(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CGuild::GetLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetLevel",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetLevel",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt16)(arg1)->GetLevel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetProsper(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CGuild::GetProsper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetProsper",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetProsper",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt32)(arg1)->GetProsper();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetMax_prosper(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CGuild::GetMax_prosper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetMax_prosper",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetMax_prosper",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt16)(arg1)->GetMax_prosper();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetFund(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CGuild::GetFund",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetFund",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetFund",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt32)(arg1)->GetFund();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetTotalMember(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CGuild::GetTotalMember",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetTotalMember",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetTotalMember",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt16)(arg1)->GetTotalMember();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetMaxMember(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CGuild::GetMaxMember",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetMaxMember",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetMaxMember",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt16)(arg1)->GetMaxMember();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetGuildPvPScore(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CGuild::GetGuildPvPScore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetGuildPvPScore",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetGuildPvPScore",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt32)(arg1)->GetGuildPvPScore();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetGuildPvPBid(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CGuild::GetGuildPvPBid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetGuildPvPBid",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetGuildPvPBid",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt32)(arg1)->GetGuildPvPBid();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetGuildPvPGroup(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetGuildPvPGroup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetGuildPvPGroup",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetGuildPvPGroup",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetGuildPvPGroup();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetManorScale(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetManorScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetManorScale",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetManorScale",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetManorScale();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetMaterial(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CGuild::GetMaterial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetMaterial",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetMaterial",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt32)(arg1)->GetMaterial();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetRoom(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetRoom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetRoom",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetRoom",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetRoom();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetAura(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetAura",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetAura",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetAura",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetAura();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetTrainCharExPow(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetTrainCharExPow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetTrainCharExPow",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetTrainCharExPow",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetTrainCharExPow();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetTrainCharInPow(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetTrainCharInPow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetTrainCharInPow",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetTrainCharInPow",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetTrainCharInPow();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetTrainPartnerExPow(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetTrainPartnerExPow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetTrainPartnerExPow",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetTrainPartnerExPow",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetTrainPartnerExPow();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetTrainPartnerInPow(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetTrainPartnerInPow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetTrainPartnerInPow",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetTrainPartnerInPow",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetTrainPartnerInPow();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetDrugLv(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetDrugLv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetDrugLv",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetDrugLv",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetDrugLv();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetCookLv(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetCookLv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetCookLv",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetCookLv",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetCookLv();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetWineLv(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetWineLv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetWineLv",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetWineLv",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetWineLv();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetHpLv(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetHpLv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetHpLv",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetHpLv",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetHpLv();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetSpLv(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CGuild::GetSpLv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetSpLv",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetSpLv",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt8)(arg1)->GetSpLv();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetMaintainNum(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CGuild::GetMaintainNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetMaintainNum",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetMaintainNum",1,SWIGTYPE_p_CGuild);
  }
  
  result = (UInt32)(arg1)->GetMaintainNum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetAutoManageBusiness(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  bool result;
  
  SWIG_check_num_args("CGuild::GetAutoManageBusiness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetAutoManageBusiness",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetAutoManageBusiness",1,SWIGTYPE_p_CGuild);
  }
  
  result = (bool)(arg1)->GetAutoManageBusiness();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_SetNewManorScale(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  UInt8 arg2 ;
  
  SWIG_check_num_args("CGuild::SetNewManorScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::SetNewManorScale",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::SetNewManorScale",2,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_SetNewManorScale",1,SWIGTYPE_p_CGuild);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  (arg1)->SetNewManorScale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeFund__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int32 arg2 ;
  UInt8 arg3 ;
  
  SWIG_check_num_args("CGuild::ChangeFund",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeFund",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeFund",2,"Int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CGuild::ChangeFund",3,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeFund",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  (arg1)->ChangeFund(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeFund__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int32 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeFund",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeFund",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeFund",2,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeFund",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  (arg1)->ChangeFund(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeFund(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGuild, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGuild_ChangeFund__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGuild, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGuild_ChangeFund__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CGuild_ChangeFund'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGuild::ChangeFund(Int32,UInt8)\n"
    "    CGuild::ChangeFund(Int32)\n");
  lua_error(L);return 0;
}


static int _wrap_CGuild_ChangeGuildPvPBid(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int32 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeGuildPvPBid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeGuildPvPBid",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeGuildPvPBid",2,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeGuildPvPBid",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  (arg1)->ChangeGuildPvPBid(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeProsper__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int32 arg2 ;
  UInt8 arg3 ;
  
  SWIG_check_num_args("CGuild::ChangeProsper",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeProsper",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeProsper",2,"Int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CGuild::ChangeProsper",3,"UInt8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeProsper",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  (arg1)->ChangeProsper(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeProsper__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int32 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeProsper",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeProsper",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeProsper",2,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeProsper",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  (arg1)->ChangeProsper(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeProsper(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGuild, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CGuild_ChangeProsper__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CGuild, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CGuild_ChangeProsper__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CGuild_ChangeProsper'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CGuild::ChangeProsper(Int32,UInt8)\n"
    "    CGuild::ChangeProsper(Int32)\n");
  lua_error(L);return 0;
}


static int _wrap_CGuild_ChangeMaterial(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int32 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeMaterial",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeMaterial",2,"Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeMaterial",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int32)lua_tonumber(L, 2);
  (arg1)->ChangeMaterial(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeRoom(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int8 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeRoom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeRoom",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeRoom",2,"Int8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeRoom",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int8)lua_tonumber(L, 2);
  (arg1)->ChangeRoom(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_SetAuraValue(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int8 arg2 ;
  
  SWIG_check_num_args("CGuild::SetAuraValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::SetAuraValue",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::SetAuraValue",2,"Int8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_SetAuraValue",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int8)lua_tonumber(L, 2);
  (arg1)->SetAuraValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeTrainCharEx(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int8 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeTrainCharEx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeTrainCharEx",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeTrainCharEx",2,"Int8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeTrainCharEx",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int8)lua_tonumber(L, 2);
  (arg1)->ChangeTrainCharEx(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeTrainCharIn(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int8 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeTrainCharIn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeTrainCharIn",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeTrainCharIn",2,"Int8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeTrainCharIn",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int8)lua_tonumber(L, 2);
  (arg1)->ChangeTrainCharIn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeTrainPartnerEx(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int8 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeTrainPartnerEx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeTrainPartnerEx",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeTrainPartnerEx",2,"Int8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeTrainPartnerEx",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int8)lua_tonumber(L, 2);
  (arg1)->ChangeTrainPartnerEx(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeTrainPartnerIn(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int8 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeTrainPartnerIn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeTrainPartnerIn",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeTrainPartnerIn",2,"Int8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeTrainPartnerIn",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int8)lua_tonumber(L, 2);
  (arg1)->ChangeTrainPartnerIn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeDrug(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int8 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeDrug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeDrug",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeDrug",2,"Int8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeDrug",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int8)lua_tonumber(L, 2);
  (arg1)->ChangeDrug(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeCook(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int8 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeCook",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeCook",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeCook",2,"Int8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeCook",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int8)lua_tonumber(L, 2);
  (arg1)->ChangeCook(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeWine(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int8 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeWine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeWine",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeWine",2,"Int8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeWine",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int8)lua_tonumber(L, 2);
  (arg1)->ChangeWine(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeManorHP(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int8 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeManorHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeManorHP",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeManorHP",2,"Int8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeManorHP",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int8)lua_tonumber(L, 2);
  (arg1)->ChangeManorHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeManorSP(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  Int8 arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeManorSP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeManorSP",1,"CGuild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CGuild::ChangeManorSP",2,"Int8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeManorSP",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (Int8)lua_tonumber(L, 2);
  (arg1)->ChangeManorSP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_ChangeAutoManageBusiness(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CGuild::ChangeAutoManageBusiness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::ChangeAutoManageBusiness",1,"CGuild *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CGuild::ChangeAutoManageBusiness",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_ChangeAutoManageBusiness",1,SWIGTYPE_p_CGuild);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->ChangeAutoManageBusiness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetName(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CGuild::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetName",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetName",1,SWIGTYPE_p_CGuild);
  }
  
  result = (char *)CGuild_GetName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetAim(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CGuild::GetAim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetAim",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetAim",1,SWIGTYPE_p_CGuild);
  }
  
  result = (char *)CGuild_GetAim(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetRule(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CGuild::GetRule",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetRule",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetRule",1,SWIGTYPE_p_CGuild);
  }
  
  result = (char *)CGuild_GetRule(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetCreator(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CGuild::GetCreator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetCreator",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetCreator",1,SWIGTYPE_p_CGuild);
  }
  
  result = (char *)CGuild_GetCreator(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetMaster(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CGuild::GetMaster",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetMaster",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetMaster",1,SWIGTYPE_p_CGuild);
  }
  
  result = (char *)CGuild_GetMaster(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CGuild_GetSecMasterName(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *arg1 = (CGuild *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CGuild::GetSecMasterName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CGuild::GetSecMasterName",1,"CGuild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CGuild,0))){
    SWIG_fail_ptr("CGuild_GetSecMasterName",1,SWIGTYPE_p_CGuild);
  }
  
  result = (char *)CGuild_GetSecMasterName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CGuild(lua_State* L) {
  int SWIG_arg = 0;
  CGuild *result = 0 ;
  
  SWIG_check_num_args("CGuild::CGuild",0,0)
  result = (CGuild *)new CGuild();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CGuild,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CGuild(void *obj) {
CGuild *arg1 = (CGuild *) obj;
delete arg1;
}
static swig_lua_method swig_CGuild_methods[] = {
    {"GetGuild_uid", _wrap_CGuild_GetGuild_uid}, 
    {"GetAlliance_id", _wrap_CGuild_GetAlliance_id}, 
    {"GetEnemy_id", _wrap_CGuild_GetEnemy_id}, 
    {"GetLevel", _wrap_CGuild_GetLevel}, 
    {"GetProsper", _wrap_CGuild_GetProsper}, 
    {"GetMax_prosper", _wrap_CGuild_GetMax_prosper}, 
    {"GetFund", _wrap_CGuild_GetFund}, 
    {"GetTotalMember", _wrap_CGuild_GetTotalMember}, 
    {"GetMaxMember", _wrap_CGuild_GetMaxMember}, 
    {"GetGuildPvPScore", _wrap_CGuild_GetGuildPvPScore}, 
    {"GetGuildPvPBid", _wrap_CGuild_GetGuildPvPBid}, 
    {"GetGuildPvPGroup", _wrap_CGuild_GetGuildPvPGroup}, 
    {"GetManorScale", _wrap_CGuild_GetManorScale}, 
    {"GetMaterial", _wrap_CGuild_GetMaterial}, 
    {"GetRoom", _wrap_CGuild_GetRoom}, 
    {"GetAura", _wrap_CGuild_GetAura}, 
    {"GetTrainCharExPow", _wrap_CGuild_GetTrainCharExPow}, 
    {"GetTrainCharInPow", _wrap_CGuild_GetTrainCharInPow}, 
    {"GetTrainPartnerExPow", _wrap_CGuild_GetTrainPartnerExPow}, 
    {"GetTrainPartnerInPow", _wrap_CGuild_GetTrainPartnerInPow}, 
    {"GetDrugLv", _wrap_CGuild_GetDrugLv}, 
    {"GetCookLv", _wrap_CGuild_GetCookLv}, 
    {"GetWineLv", _wrap_CGuild_GetWineLv}, 
    {"GetHpLv", _wrap_CGuild_GetHpLv}, 
    {"GetSpLv", _wrap_CGuild_GetSpLv}, 
    {"GetMaintainNum", _wrap_CGuild_GetMaintainNum}, 
    {"GetAutoManageBusiness", _wrap_CGuild_GetAutoManageBusiness}, 
    {"SetNewManorScale", _wrap_CGuild_SetNewManorScale}, 
    {"ChangeFund", _wrap_CGuild_ChangeFund}, 
    {"ChangeGuildPvPBid", _wrap_CGuild_ChangeGuildPvPBid}, 
    {"ChangeProsper", _wrap_CGuild_ChangeProsper}, 
    {"ChangeMaterial", _wrap_CGuild_ChangeMaterial}, 
    {"ChangeRoom", _wrap_CGuild_ChangeRoom}, 
    {"SetAuraValue", _wrap_CGuild_SetAuraValue}, 
    {"ChangeTrainCharEx", _wrap_CGuild_ChangeTrainCharEx}, 
    {"ChangeTrainCharIn", _wrap_CGuild_ChangeTrainCharIn}, 
    {"ChangeTrainPartnerEx", _wrap_CGuild_ChangeTrainPartnerEx}, 
    {"ChangeTrainPartnerIn", _wrap_CGuild_ChangeTrainPartnerIn}, 
    {"ChangeDrug", _wrap_CGuild_ChangeDrug}, 
    {"ChangeCook", _wrap_CGuild_ChangeCook}, 
    {"ChangeWine", _wrap_CGuild_ChangeWine}, 
    {"ChangeManorHP", _wrap_CGuild_ChangeManorHP}, 
    {"ChangeManorSP", _wrap_CGuild_ChangeManorSP}, 
    {"ChangeAutoManageBusiness", _wrap_CGuild_ChangeAutoManageBusiness}, 
    {"GetName", _wrap_CGuild_GetName}, 
    {"GetAim", _wrap_CGuild_GetAim}, 
    {"GetRule", _wrap_CGuild_GetRule}, 
    {"GetCreator", _wrap_CGuild_GetCreator}, 
    {"GetMaster", _wrap_CGuild_GetMaster}, 
    {"GetSecMasterName", _wrap_CGuild_GetSecMasterName}, 
    {0,0}
};
static swig_lua_attribute swig_CGuild_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CGuild_bases[] = {0};
static const char *swig_CGuild_base_names[] = {0};
static swig_lua_class _wrap_class_CGuild = { "CGuild", &SWIGTYPE_p_CGuild,_wrap_new_CGuild, swig_delete_CGuild, swig_CGuild_methods, swig_CGuild_attributes, swig_CGuild_bases, swig_CGuild_base_names };

static int _wrap_CRelationSystem_CreateMasterAndStudent(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  
  SWIG_check_num_args("CRelationSystem::CreateMasterAndStudent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::CreateMasterAndStudent",1,"CRelationSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CRelationSystem::CreateMasterAndStudent",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CRelationSystem::CreateMasterAndStudent",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_CreateMasterAndStudent",1,SWIGTYPE_p_CRelationSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  (arg1)->CreateMasterAndStudent(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_DestroyMasterAndStudent(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  
  SWIG_check_num_args("CRelationSystem::DestroyMasterAndStudent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::DestroyMasterAndStudent",1,"CRelationSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CRelationSystem::DestroyMasterAndStudent",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CRelationSystem::DestroyMasterAndStudent",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_DestroyMasterAndStudent",1,SWIGTYPE_p_CRelationSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  (arg1)->DestroyMasterAndStudent(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_RequestSetSiblingTitlePrefix(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  
  SWIG_check_num_args("CRelationSystem::RequestSetSiblingTitlePrefix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::RequestSetSiblingTitlePrefix",1,"CRelationSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_RequestSetSiblingTitlePrefix",1,SWIGTYPE_p_CRelationSystem);
  }
  
  (arg1)->RequestSetSiblingTitlePrefix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_RequestSetSiblingTitleSuffix(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  
  SWIG_check_num_args("CRelationSystem::RequestSetSiblingTitleSuffix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::RequestSetSiblingTitleSuffix",1,"CRelationSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_RequestSetSiblingTitleSuffix",1,SWIGTYPE_p_CRelationSystem);
  }
  
  (arg1)->RequestSetSiblingTitleSuffix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_CreateSibling(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  UInt32 arg4 ;
  UInt32 arg5 ;
  UInt32 arg6 ;
  
  SWIG_check_num_args("CRelationSystem::CreateSibling",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::CreateSibling",1,"CRelationSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CRelationSystem::CreateSibling",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CRelationSystem::CreateSibling",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CRelationSystem::CreateSibling",4,"UInt32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CRelationSystem::CreateSibling",5,"UInt32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CRelationSystem::CreateSibling",6,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_CreateSibling",1,SWIGTYPE_p_CRelationSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt32)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (UInt32)lua_tonumber(L, 6);
  (arg1)->CreateSibling(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_RemoveSibling(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CRelationSystem::RemoveSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::RemoveSibling",1,"CRelationSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CRelationSystem::RemoveSibling",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_RemoveSibling",1,SWIGTYPE_p_CRelationSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->RemoveSibling(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_AddSibling(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  UInt32 arg4 ;
  UInt32 arg5 ;
  
  SWIG_check_num_args("CRelationSystem::AddSibling",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::AddSibling",1,"CRelationSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CRelationSystem::AddSibling",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CRelationSystem::AddSibling",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CRelationSystem::AddSibling",4,"UInt32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CRelationSystem::AddSibling",5,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_AddSibling",1,SWIGTYPE_p_CRelationSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt32)lua_tonumber(L, 5);
  (arg1)->AddSibling(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_GetSiblingRank(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CRelationSystem::GetSiblingRank",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::GetSiblingRank",1,"CRelationSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CRelationSystem::GetSiblingRank",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_GetSiblingRank",1,SWIGTYPE_p_CRelationSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetSiblingRank(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_RequestSelectMarriageTime(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  
  SWIG_check_num_args("CRelationSystem::RequestSelectMarriageTime",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::RequestSelectMarriageTime",1,"CRelationSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CRelationSystem::RequestSelectMarriageTime",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CRelationSystem::RequestSelectMarriageTime",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_RequestSelectMarriageTime",1,SWIGTYPE_p_CRelationSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  (arg1)->RequestSelectMarriageTime(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_CreateMarriage(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  UInt32 arg4 ;
  
  SWIG_check_num_args("CRelationSystem::CreateMarriage",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::CreateMarriage",1,"CRelationSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CRelationSystem::CreateMarriage",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CRelationSystem::CreateMarriage",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CRelationSystem::CreateMarriage",4,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_CreateMarriage",1,SWIGTYPE_p_CRelationSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt32)lua_tonumber(L, 4);
  (arg1)->CreateMarriage(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_DestroyMarriage(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  
  SWIG_check_num_args("CRelationSystem::DestroyMarriage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::DestroyMarriage",1,"CRelationSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CRelationSystem::DestroyMarriage",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CRelationSystem::DestroyMarriage",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_DestroyMarriage",1,SWIGTYPE_p_CRelationSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  (arg1)->DestroyMarriage(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_ExecuteMarriage(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  
  SWIG_check_num_args("CRelationSystem::ExecuteMarriage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::ExecuteMarriage",1,"CRelationSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CRelationSystem::ExecuteMarriage",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CRelationSystem::ExecuteMarriage",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_ExecuteMarriage",1,SWIGTYPE_p_CRelationSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  (arg1)->ExecuteMarriage(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_GetMarriageTime(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CRelationSystem::GetMarriageTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::GetMarriageTime",1,"CRelationSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_GetMarriageTime",1,SWIGTYPE_p_CRelationSystem);
  }
  
  result = (UInt32)(arg1)->GetMarriageTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_GetRealMarriageTime(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CRelationSystem::GetRealMarriageTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::GetRealMarriageTime",1,"CRelationSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_GetRealMarriageTime",1,SWIGTYPE_p_CRelationSystem);
  }
  
  result = (UInt32)(arg1)->GetRealMarriageTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_GetHusbandId(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CRelationSystem::GetHusbandId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::GetHusbandId",1,"CRelationSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_GetHusbandId",1,SWIGTYPE_p_CRelationSystem);
  }
  
  result = (UInt32)(arg1)->GetHusbandId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_GetWifeId(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CRelationSystem::GetWifeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::GetWifeId",1,"CRelationSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_GetWifeId",1,SWIGTYPE_p_CRelationSystem);
  }
  
  result = (UInt32)(arg1)->GetWifeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_GetMarriageId(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CRelationSystem::GetMarriageId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::GetMarriageId",1,"CRelationSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_GetMarriageId",1,SWIGTYPE_p_CRelationSystem);
  }
  
  result = (UInt32)(arg1)->GetMarriageId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CRelationSystem_GetSiblingTitlePrefix(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *arg1 = (CRelationSystem *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CRelationSystem::GetSiblingTitlePrefix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CRelationSystem::GetSiblingTitlePrefix",1,"CRelationSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CRelationSystem,0))){
    SWIG_fail_ptr("CRelationSystem_GetSiblingTitlePrefix",1,SWIGTYPE_p_CRelationSystem);
  }
  
  result = (char *)CRelationSystem_GetSiblingTitlePrefix(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CRelationSystem(lua_State* L) {
  int SWIG_arg = 0;
  CRelationSystem *result = 0 ;
  
  SWIG_check_num_args("CRelationSystem::CRelationSystem",0,0)
  result = (CRelationSystem *)new CRelationSystem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CRelationSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CRelationSystem(void *obj) {
CRelationSystem *arg1 = (CRelationSystem *) obj;
delete arg1;
}
static swig_lua_method swig_CRelationSystem_methods[] = {
    {"CreateMasterAndStudent", _wrap_CRelationSystem_CreateMasterAndStudent}, 
    {"DestroyMasterAndStudent", _wrap_CRelationSystem_DestroyMasterAndStudent}, 
    {"RequestSetSiblingTitlePrefix", _wrap_CRelationSystem_RequestSetSiblingTitlePrefix}, 
    {"RequestSetSiblingTitleSuffix", _wrap_CRelationSystem_RequestSetSiblingTitleSuffix}, 
    {"CreateSibling", _wrap_CRelationSystem_CreateSibling}, 
    {"RemoveSibling", _wrap_CRelationSystem_RemoveSibling}, 
    {"AddSibling", _wrap_CRelationSystem_AddSibling}, 
    {"GetSiblingRank", _wrap_CRelationSystem_GetSiblingRank}, 
    {"RequestSelectMarriageTime", _wrap_CRelationSystem_RequestSelectMarriageTime}, 
    {"CreateMarriage", _wrap_CRelationSystem_CreateMarriage}, 
    {"DestroyMarriage", _wrap_CRelationSystem_DestroyMarriage}, 
    {"ExecuteMarriage", _wrap_CRelationSystem_ExecuteMarriage}, 
    {"GetMarriageTime", _wrap_CRelationSystem_GetMarriageTime}, 
    {"GetRealMarriageTime", _wrap_CRelationSystem_GetRealMarriageTime}, 
    {"GetHusbandId", _wrap_CRelationSystem_GetHusbandId}, 
    {"GetWifeId", _wrap_CRelationSystem_GetWifeId}, 
    {"GetMarriageId", _wrap_CRelationSystem_GetMarriageId}, 
    {"GetSiblingTitlePrefix", _wrap_CRelationSystem_GetSiblingTitlePrefix}, 
    {0,0}
};
static swig_lua_attribute swig_CRelationSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CRelationSystem_bases[] = {0};
static const char *swig_CRelationSystem_base_names[] = {0};
static swig_lua_class _wrap_class_CRelationSystem = { "CRelationSystem", &SWIGTYPE_p_CRelationSystem,_wrap_new_CRelationSystem, swig_delete_CRelationSystem, swig_CRelationSystem_methods, swig_CRelationSystem_attributes, swig_CRelationSystem_bases, swig_CRelationSystem_base_names };

static int _wrap_CPet_GetPet_uid(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPet::GetPet_uid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetPet_uid",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetPet_uid",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt32)(arg1)->GetPet_uid();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetPet_id(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPet::GetPet_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetPet_id",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetPet_id",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt32)(arg1)->GetPet_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetLevel(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPet::GetLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetLevel",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetLevel",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt16)(arg1)->GetLevel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetHappiness(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPet::GetHappiness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetHappiness",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetHappiness",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt16)(arg1)->GetHappiness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetVP(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPet::GetVP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetVP",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetVP",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt32)(arg1)->GetVP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetMaxVP(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CPet::GetMaxVP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetMaxVP",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetMaxVP",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt32)(arg1)->GetMaxVP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetElement(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CPet::GetElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetElement",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetElement",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt8)(arg1)->GetElement();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetSpirit(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPet::GetSpirit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetSpirit",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetSpirit",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt16)(arg1)->GetSpirit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_ChangeLevel(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPet::ChangeLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::ChangeLevel",1,"CPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPet::ChangeLevel",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_ChangeLevel",1,SWIGTYPE_p_CPet);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_ChangeVP(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPet::ChangeVP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::ChangeVP",1,"CPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPet::ChangeVP",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_ChangeVP",1,SWIGTYPE_p_CPet);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeVP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_ChangeHappiness(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPet::ChangeHappiness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::ChangeHappiness",1,"CPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPet::ChangeHappiness",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_ChangeHappiness",1,SWIGTYPE_p_CPet);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeHappiness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_ChangeExp(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPet::ChangeExp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::ChangeExp",1,"CPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPet::ChangeExp",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_ChangeExp",1,SWIGTYPE_p_CPet);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeExp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_ChangeSpirit(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CPet::ChangeSpirit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::ChangeSpirit",1,"CPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPet::ChangeSpirit",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_ChangeSpirit",1,SWIGTYPE_p_CPet);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeSpirit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_HasSkill(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CPet::HasSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::HasSkill",1,"CPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPet::HasSkill",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_HasSkill",1,SWIGTYPE_p_CPet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasSkill(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_ResetPet(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  
  SWIG_check_num_args("CPet::ResetPet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::ResetPet",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_ResetPet",1,SWIGTYPE_p_CPet);
  }
  
  (arg1)->ResetPet();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetLock(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  bool result;
  
  SWIG_check_num_args("CPet::GetLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetLock",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetLock",1,SWIGTYPE_p_CPet);
  }
  
  result = (bool)(arg1)->GetLock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetPetType(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CPet::GetPetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetPetType",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetPetType",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt8)(arg1)->GetPetType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetPetTimeLimitType(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CPet::GetPetTimeLimitType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetPetTimeLimitType",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetPetTimeLimitType",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt8)(arg1)->GetPetTimeLimitType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_RemoveSkill(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPet::RemoveSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::RemoveSkill",1,"CPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPet::RemoveSkill",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_RemoveSkill",1,SWIGTYPE_p_CPet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->RemoveSkill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_AddSkill(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CPet::AddSkill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::AddSkill",1,"CPet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPet::AddSkill",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_AddSkill",1,SWIGTYPE_p_CPet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->AddSkill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetSkillCount(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CPet::GetSkillCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetSkillCount",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetSkillCount",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt8)(arg1)->GetSkillCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetRandomSkillID(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPet::GetRandomSkillID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetRandomSkillID",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetRandomSkillID",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt16)(arg1)->GetRandomSkillID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetPetState(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  bool result;
  
  SWIG_check_num_args("CPet::GetPetState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetPetState",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetPetState",1,SWIGTYPE_p_CPet);
  }
  
  result = (bool)(arg1)->GetPetState();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetUserType(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CPet::GetUserType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetUserType",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetUserType",1,SWIGTYPE_p_CPet);
  }
  
  result = (UInt8)CPet_GetUserType(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPet_GetName(lua_State* L) {
  int SWIG_arg = 0;
  CPet *arg1 = (CPet *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CPet::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPet::GetName",1,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPet_GetName",1,SWIGTYPE_p_CPet);
  }
  
  result = (char *)CPet_GetName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CPet(lua_State* L) {
  int SWIG_arg = 0;
  CPet *result = 0 ;
  
  SWIG_check_num_args("CPet::CPet",0,0)
  result = (CPet *)new CPet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CPet(void *obj) {
CPet *arg1 = (CPet *) obj;
delete arg1;
}
static swig_lua_method swig_CPet_methods[] = {
    {"GetPet_uid", _wrap_CPet_GetPet_uid}, 
    {"GetPet_id", _wrap_CPet_GetPet_id}, 
    {"GetLevel", _wrap_CPet_GetLevel}, 
    {"GetHappiness", _wrap_CPet_GetHappiness}, 
    {"GetVP", _wrap_CPet_GetVP}, 
    {"GetMaxVP", _wrap_CPet_GetMaxVP}, 
    {"GetElement", _wrap_CPet_GetElement}, 
    {"GetSpirit", _wrap_CPet_GetSpirit}, 
    {"ChangeLevel", _wrap_CPet_ChangeLevel}, 
    {"ChangeVP", _wrap_CPet_ChangeVP}, 
    {"ChangeHappiness", _wrap_CPet_ChangeHappiness}, 
    {"ChangeExp", _wrap_CPet_ChangeExp}, 
    {"ChangeSpirit", _wrap_CPet_ChangeSpirit}, 
    {"HasSkill", _wrap_CPet_HasSkill}, 
    {"ResetPet", _wrap_CPet_ResetPet}, 
    {"GetLock", _wrap_CPet_GetLock}, 
    {"GetPetType", _wrap_CPet_GetPetType}, 
    {"GetPetTimeLimitType", _wrap_CPet_GetPetTimeLimitType}, 
    {"RemoveSkill", _wrap_CPet_RemoveSkill}, 
    {"AddSkill", _wrap_CPet_AddSkill}, 
    {"GetSkillCount", _wrap_CPet_GetSkillCount}, 
    {"GetRandomSkillID", _wrap_CPet_GetRandomSkillID}, 
    {"GetPetState", _wrap_CPet_GetPetState}, 
    {"GetUserType", _wrap_CPet_GetUserType}, 
    {"GetName", _wrap_CPet_GetName}, 
    {0,0}
};
static swig_lua_attribute swig_CPet_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CPet_bases[] = {0};
static const char *swig_CPet_base_names[] = {0};
static swig_lua_class _wrap_class_CPet = { "CPet", &SWIGTYPE_p_CPet,_wrap_new_CPet, swig_delete_CPet, swig_CPet_methods, swig_CPet_attributes, swig_CPet_bases, swig_CPet_base_names };

static int _wrap_CPetGroup_AddPet(lua_State* L) {
  int SWIG_arg = 0;
  CPetGroup *arg1 = (CPetGroup *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CPetGroup::AddPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPetGroup::AddPet",1,"CPetGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPetGroup::AddPet",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPetGroup,0))){
    SWIG_fail_ptr("CPetGroup_AddPet",1,SWIGTYPE_p_CPetGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->AddPet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPetGroup_RemovePet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CPetGroup *arg1 = (CPetGroup *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CPetGroup::RemovePet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPetGroup::RemovePet",1,"CPetGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPetGroup::RemovePet",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPetGroup,0))){
    SWIG_fail_ptr("CPetGroup_RemovePet",1,SWIGTYPE_p_CPetGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->RemovePet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPetGroup_RemovePet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CPetGroup *arg1 = (CPetGroup *) 0 ;
  CPet *arg2 = (CPet *) 0 ;
  
  SWIG_check_num_args("CPetGroup::RemovePet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPetGroup::RemovePet",1,"CPetGroup *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CPetGroup::RemovePet",2,"CPet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPetGroup,0))){
    SWIG_fail_ptr("CPetGroup_RemovePet",1,SWIGTYPE_p_CPetGroup);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CPet,0))){
    SWIG_fail_ptr("CPetGroup_RemovePet",2,SWIGTYPE_p_CPet);
  }
  
  (arg1)->RemovePet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPetGroup_RemovePet(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPetGroup, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CPet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CPetGroup_RemovePet__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CPetGroup, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CPetGroup_RemovePet__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CPetGroup_RemovePet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CPetGroup::RemovePet(UInt32)\n"
    "    CPetGroup::RemovePet(CPet *)\n");
  lua_error(L);return 0;
}


static int _wrap_CPetGroup_RemovePetByUID(lua_State* L) {
  int SWIG_arg = 0;
  CPetGroup *arg1 = (CPetGroup *) 0 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CPetGroup::RemovePetByUID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPetGroup::RemovePetByUID",1,"CPetGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPetGroup::RemovePetByUID",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPetGroup,0))){
    SWIG_fail_ptr("CPetGroup_RemovePetByUID",1,SWIGTYPE_p_CPetGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  (arg1)->RemovePetByUID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPetGroup_Get(lua_State* L) {
  int SWIG_arg = 0;
  CPetGroup *arg1 = (CPetGroup *) 0 ;
  int arg2 ;
  CPet *result = 0 ;
  
  SWIG_check_num_args("CPetGroup::Get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPetGroup::Get",1,"CPetGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPetGroup::Get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPetGroup,0))){
    SWIG_fail_ptr("CPetGroup_Get",1,SWIGTYPE_p_CPetGroup);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CPet *)(arg1)->Get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPetGroup_GetPet(lua_State* L) {
  int SWIG_arg = 0;
  CPetGroup *arg1 = (CPetGroup *) 0 ;
  UInt32 arg2 ;
  CPet *result = 0 ;
  
  SWIG_check_num_args("CPetGroup::GetPet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPetGroup::GetPet",1,"CPetGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPetGroup::GetPet",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPetGroup,0))){
    SWIG_fail_ptr("CPetGroup_GetPet",1,SWIGTYPE_p_CPetGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (CPet *)(arg1)->GetPet(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPetGroup_GetCurPet(lua_State* L) {
  int SWIG_arg = 0;
  CPetGroup *arg1 = (CPetGroup *) 0 ;
  CPet *result = 0 ;
  
  SWIG_check_num_args("CPetGroup::GetCurPet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPetGroup::GetCurPet",1,"CPetGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPetGroup,0))){
    SWIG_fail_ptr("CPetGroup_GetCurPet",1,SWIGTYPE_p_CPetGroup);
  }
  
  result = (CPet *)(arg1)->GetCurPet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPetGroup_GetIdCount(lua_State* L) {
  int SWIG_arg = 0;
  CPetGroup *arg1 = (CPetGroup *) 0 ;
  UInt32 arg2 ;
  UInt16 result;
  
  SWIG_check_num_args("CPetGroup::GetIdCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPetGroup::GetIdCount",1,"CPetGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CPetGroup::GetIdCount",2,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPetGroup,0))){
    SWIG_fail_ptr("CPetGroup_GetIdCount",1,SWIGTYPE_p_CPetGroup);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (UInt16)(arg1)->GetIdCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPetGroup_GetCount(lua_State* L) {
  int SWIG_arg = 0;
  CPetGroup *arg1 = (CPetGroup *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CPetGroup::GetCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPetGroup::GetCount",1,"CPetGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPetGroup,0))){
    SWIG_fail_ptr("CPetGroup_GetCount",1,SWIGTYPE_p_CPetGroup);
  }
  
  result = (UInt16)(arg1)->GetCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPetGroup_RaiseUpdate(lua_State* L) {
  int SWIG_arg = 0;
  CPetGroup *arg1 = (CPetGroup *) 0 ;
  
  SWIG_check_num_args("CPetGroup::RaiseUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPetGroup::RaiseUpdate",1,"CPetGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPetGroup,0))){
    SWIG_fail_ptr("CPetGroup_RaiseUpdate",1,SWIGTYPE_p_CPetGroup);
  }
  
  (arg1)->RaiseUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPetGroup_CancelUpdate(lua_State* L) {
  int SWIG_arg = 0;
  CPetGroup *arg1 = (CPetGroup *) 0 ;
  
  SWIG_check_num_args("CPetGroup::CancelUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CPetGroup::CancelUpdate",1,"CPetGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CPetGroup,0))){
    SWIG_fail_ptr("CPetGroup_CancelUpdate",1,SWIGTYPE_p_CPetGroup);
  }
  
  (arg1)->CancelUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CPetGroup(lua_State* L) {
  int SWIG_arg = 0;
  CPetGroup *result = 0 ;
  
  SWIG_check_num_args("CPetGroup::CPetGroup",0,0)
  result = (CPetGroup *)new CPetGroup();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CPetGroup,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CPetGroup(void *obj) {
CPetGroup *arg1 = (CPetGroup *) obj;
delete arg1;
}
static swig_lua_method swig_CPetGroup_methods[] = {
    {"AddPet", _wrap_CPetGroup_AddPet}, 
    {"RemovePet", _wrap_CPetGroup_RemovePet}, 
    {"RemovePetByUID", _wrap_CPetGroup_RemovePetByUID}, 
    {"Get", _wrap_CPetGroup_Get}, 
    {"GetPet", _wrap_CPetGroup_GetPet}, 
    {"GetCurPet", _wrap_CPetGroup_GetCurPet}, 
    {"GetIdCount", _wrap_CPetGroup_GetIdCount}, 
    {"GetCount", _wrap_CPetGroup_GetCount}, 
    {"RaiseUpdate", _wrap_CPetGroup_RaiseUpdate}, 
    {"CancelUpdate", _wrap_CPetGroup_CancelUpdate}, 
    {0,0}
};
static swig_lua_attribute swig_CPetGroup_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CPetGroup_bases[] = {0};
static const char *swig_CPetGroup_base_names[] = {0};
static swig_lua_class _wrap_class_CPetGroup = { "CPetGroup", &SWIGTYPE_p_CPetGroup,_wrap_new_CPetGroup, swig_delete_CPetGroup, swig_CPetGroup_methods, swig_CPetGroup_attributes, swig_CPetGroup_bases, swig_CPetGroup_base_names };

static int _wrap_CQuestType_GetType_id(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *arg1 = (CQuestType *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestType::GetType_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestType::GetType_id",1,"CQuestType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestType,0))){
    SWIG_fail_ptr("CQuestType_GetType_id",1,SWIGTYPE_p_CQuestType);
  }
  
  result = (UInt16)(arg1)->GetType_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestType_GetName(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *arg1 = (CQuestType *) 0 ;
  String result;
  
  SWIG_check_num_args("CQuestType::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestType::GetName",1,"CQuestType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestType,0))){
    SWIG_fail_ptr("CQuestType_GetName",1,SWIGTYPE_p_CQuestType);
  }
  
  result = (arg1)->GetName();
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestType_GetRound(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *arg1 = (CQuestType *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestType::GetRound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestType::GetRound",1,"CQuestType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestType,0))){
    SWIG_fail_ptr("CQuestType_GetRound",1,SWIGTYPE_p_CQuestType);
  }
  
  result = (UInt16)(arg1)->GetRound();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestType_GetMaxRound(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *arg1 = (CQuestType *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestType::GetMaxRound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestType::GetMaxRound",1,"CQuestType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestType,0))){
    SWIG_fail_ptr("CQuestType_GetMaxRound",1,SWIGTYPE_p_CQuestType);
  }
  
  result = (UInt16)(arg1)->GetMaxRound();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestType_GetTotalRound(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *arg1 = (CQuestType *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestType::GetTotalRound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestType::GetTotalRound",1,"CQuestType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestType,0))){
    SWIG_fail_ptr("CQuestType_GetTotalRound",1,SWIGTYPE_p_CQuestType);
  }
  
  result = (UInt16)(arg1)->GetTotalRound();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestType_GetLimitRound(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *arg1 = (CQuestType *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestType::GetLimitRound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestType::GetLimitRound",1,"CQuestType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestType,0))){
    SWIG_fail_ptr("CQuestType_GetLimitRound",1,SWIGTYPE_p_CQuestType);
  }
  
  result = (UInt16)(arg1)->GetLimitRound();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestType_GetLimitType(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *arg1 = (CQuestType *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestType::GetLimitType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestType::GetLimitType",1,"CQuestType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestType,0))){
    SWIG_fail_ptr("CQuestType_GetLimitType",1,SWIGTYPE_p_CQuestType);
  }
  
  result = (UInt16)(arg1)->GetLimitType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestType_GetLastClearTime(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *arg1 = (CQuestType *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestType::GetLastClearTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestType::GetLastClearTime",1,"CQuestType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestType,0))){
    SWIG_fail_ptr("CQuestType_GetLastClearTime",1,SWIGTYPE_p_CQuestType);
  }
  
  result = (UInt32)(arg1)->GetLastClearTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestType_SetRound(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *arg1 = (CQuestType *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CQuestType::SetRound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestType::SetRound",1,"CQuestType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestType::SetRound",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestType,0))){
    SWIG_fail_ptr("CQuestType_SetRound",1,SWIGTYPE_p_CQuestType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetRound(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestType_SetTotalRound(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *arg1 = (CQuestType *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CQuestType::SetTotalRound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestType::SetTotalRound",1,"CQuestType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestType::SetTotalRound",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestType,0))){
    SWIG_fail_ptr("CQuestType_SetTotalRound",1,SWIGTYPE_p_CQuestType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetTotalRound(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestType_ChangeRound(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *arg1 = (CQuestType *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CQuestType::ChangeRound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestType::ChangeRound",1,"CQuestType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestType::ChangeRound",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestType,0))){
    SWIG_fail_ptr("CQuestType_ChangeRound",1,SWIGTYPE_p_CQuestType);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeRound(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestType_ChangeTotalRound(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *arg1 = (CQuestType *) 0 ;
  Int arg2 ;
  
  SWIG_check_num_args("CQuestType::ChangeTotalRound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestType::ChangeTotalRound",1,"CQuestType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestType::ChangeTotalRound",2,"Int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestType,0))){
    SWIG_fail_ptr("CQuestType_ChangeTotalRound",1,SWIGTYPE_p_CQuestType);
  }
  
  arg2 = (Int)lua_tonumber(L, 2);
  (arg1)->ChangeTotalRound(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CQuestType(lua_State* L) {
  int SWIG_arg = 0;
  CQuestType *result = 0 ;
  
  SWIG_check_num_args("CQuestType::CQuestType",0,0)
  result = (CQuestType *)new CQuestType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CQuestType,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CQuestType(void *obj) {
CQuestType *arg1 = (CQuestType *) obj;
delete arg1;
}
static swig_lua_method swig_CQuestType_methods[] = {
    {"GetType_id", _wrap_CQuestType_GetType_id}, 
    {"GetName", _wrap_CQuestType_GetName}, 
    {"GetRound", _wrap_CQuestType_GetRound}, 
    {"GetMaxRound", _wrap_CQuestType_GetMaxRound}, 
    {"GetTotalRound", _wrap_CQuestType_GetTotalRound}, 
    {"GetLimitRound", _wrap_CQuestType_GetLimitRound}, 
    {"GetLimitType", _wrap_CQuestType_GetLimitType}, 
    {"GetLastClearTime", _wrap_CQuestType_GetLastClearTime}, 
    {"SetRound", _wrap_CQuestType_SetRound}, 
    {"SetTotalRound", _wrap_CQuestType_SetTotalRound}, 
    {"ChangeRound", _wrap_CQuestType_ChangeRound}, 
    {"ChangeTotalRound", _wrap_CQuestType_ChangeTotalRound}, 
    {0,0}
};
static swig_lua_attribute swig_CQuestType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CQuestType_bases[] = {0};
static const char *swig_CQuestType_base_names[] = {0};
static swig_lua_class _wrap_class_CQuestType = { "CQuestType", &SWIGTYPE_p_CQuestType,_wrap_new_CQuestType, swig_delete_CQuestType, swig_CQuestType_methods, swig_CQuestType_attributes, swig_CQuestType_bases, swig_CQuestType_base_names };

static int _wrap_CQuestSystem_RemoveEncounterByNpcID(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  UInt32 arg3 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::RemoveEncounterByNpcID",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::RemoveEncounterByNpcID",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::RemoveEncounterByNpcID",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestSystem::RemoveEncounterByNpcID",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_RemoveEncounterByNpcID",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  result = (bool)(arg1)->RemoveEncounterByNpcID(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_RemoveEncounter(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::RemoveEncounter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::RemoveEncounter",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::RemoveEncounter",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_RemoveEncounter",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->RemoveEncounter(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_RemoveFollower(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::RemoveFollower",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::RemoveFollower",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::RemoveFollower",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_RemoveFollower",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->RemoveFollower(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_HasQuest(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::HasQuest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::HasQuest",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::HasQuest",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_HasQuest",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasQuest(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_GetQuest(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  CQuestLog *result = 0 ;
  
  SWIG_check_num_args("CQuestSystem::GetQuest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::GetQuest",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::GetQuest",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_GetQuest",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (CQuestLog *)(arg1)->GetQuest(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CQuestLog,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_AddQuest__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  CQuestLog *result = 0 ;
  
  SWIG_check_num_args("CQuestSystem::AddQuest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::AddQuest",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::AddQuest",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_AddQuest",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (CQuestLog *)(arg1)->AddQuest(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CQuestLog,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_AddQuest__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  char *arg3 = (char *) 0 ;
  UInt16 arg4 ;
  char *arg5 = (char *) 0 ;
  CQuestLog *result = 0 ;
  
  SWIG_check_num_args("CQuestSystem::AddQuest",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::AddQuest",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::AddQuest",2,"UInt16");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CQuestSystem::AddQuest",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestSystem::AddQuest",4,"UInt16");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("CQuestSystem::AddQuest",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_AddQuest",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (CQuestLog *)(arg1)->AddQuest(arg2,(char const *)arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CQuestLog,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_AddQuest(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CQuestSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CQuestSystem_AddQuest__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CQuestSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_CQuestSystem_AddQuest__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CQuestSystem_AddQuest'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CQuestSystem::AddQuest(UInt16)\n"
    "    CQuestSystem::AddQuest(UInt16,char const *,UInt16,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_CQuestSystem_RemoveQuest(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::RemoveQuest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::RemoveQuest",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::RemoveQuest",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_RemoveQuest",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->RemoveQuest(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_GetEachQuest(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  int arg2 ;
  CQuestLog *result = 0 ;
  
  SWIG_check_num_args("CQuestSystem::GetEachQuest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::GetEachQuest",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::GetEachQuest",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_GetEachQuest",1,SWIGTYPE_p_CQuestSystem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CQuestLog *)(arg1)->GetEachQuest(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CQuestLog,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_GetQuestCount(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestSystem::GetQuestCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::GetQuestCount",1,"CQuestSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_GetQuestCount",1,SWIGTYPE_p_CQuestSystem);
  }
  
  result = (UInt16)(arg1)->GetQuestCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_HasType(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::HasType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::HasType",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::HasType",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_HasType",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasType(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_GetType(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  CQuestType *result = 0 ;
  
  SWIG_check_num_args("CQuestSystem::GetType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::GetType",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::GetType",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_GetType",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (CQuestType *)(arg1)->GetType(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CQuestType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_AddType(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  CQuestType *result = 0 ;
  
  SWIG_check_num_args("CQuestSystem::AddType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::AddType",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::AddType",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_AddType",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (CQuestType *)(arg1)->AddType(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CQuestType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_RemoveType(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::RemoveType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::RemoveType",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::RemoveType",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_RemoveType",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->RemoveType(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_ClearTotalRound(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 = (UInt16) 0 ;
  
  SWIG_check_num_args("CQuestSystem::ClearTotalRound",1,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::ClearTotalRound",1,"CQuestSystem *");
  if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::ClearTotalRound",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_ClearTotalRound",1,SWIGTYPE_p_CQuestSystem);
  }
  
  if(lua_gettop(L)>=2){
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
    arg2 = (UInt16)lua_tonumber(L, 2);
  }
  (arg1)->ClearTotalRound(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_CheckTotalRound(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  
  SWIG_check_num_args("CQuestSystem::CheckTotalRound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::CheckTotalRound",1,"CQuestSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_CheckTotalRound",1,SWIGTYPE_p_CQuestSystem);
  }
  
  (arg1)->CheckTotalRound();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_SetRoundInfo(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  UInt16 arg4 ;
  UInt16 arg5 ;
  
  SWIG_check_num_args("CQuestSystem::SetRoundInfo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::SetRoundInfo",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::SetRoundInfo",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestSystem::SetRoundInfo",3,"UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestSystem::SetRoundInfo",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CQuestSystem::SetRoundInfo",5,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_SetRoundInfo",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  (arg1)->SetRoundInfo(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_GetEachType(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  int arg2 ;
  CQuestType *result = 0 ;
  
  SWIG_check_num_args("CQuestSystem::GetEachType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::GetEachType",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::GetEachType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_GetEachType",1,SWIGTYPE_p_CQuestSystem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (CQuestType *)(arg1)->GetEachType(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CQuestType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_GetTypeCount(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 = (UInt16) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CQuestSystem::GetTypeCount",1,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::GetTypeCount",1,"CQuestSystem *");
  if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::GetTypeCount",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_GetTypeCount",1,SWIGTYPE_p_CQuestSystem);
  }
  
  if(lua_gettop(L)>=2){
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
    arg2 = (UInt16)lua_tonumber(L, 2);
  }
  result = (UInt16)(arg1)->GetTypeCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_HasFlag(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::HasFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::HasFlag",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::HasFlag",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_HasFlag",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasFlag(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_GetFlag(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestSystem::GetFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::GetFlag",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::GetFlag",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_GetFlag",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetFlag(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_SetFlag(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  UInt32 arg3 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::SetFlag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::SetFlag",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::SetFlag",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestSystem::SetFlag",3,"UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_SetFlag",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  result = (bool)(arg1)->SetFlag(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_RemoveFlag(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::RemoveFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::RemoveFlag",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::RemoveFlag",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_RemoveFlag",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->RemoveFlag(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_GetTimeMark(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestSystem::GetTimeMark",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::GetTimeMark",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::GetTimeMark",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_GetTimeMark",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (UInt32)(arg1)->GetTimeMark(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_SetTimeMark(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::SetTimeMark",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::SetTimeMark",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::SetTimeMark",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_SetTimeMark",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->SetTimeMark(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_RemoveTimeMark(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::RemoveTimeMark",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::RemoveTimeMark",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::RemoveTimeMark",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_RemoveTimeMark",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (bool)(arg1)->RemoveTimeMark(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_TimeMarkOver(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  UInt16 arg3 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::TimeMarkOver",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::TimeMarkOver",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::TimeMarkOver",2,"UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestSystem::TimeMarkOver",3,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_TimeMarkOver",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt16)lua_tonumber(L, 3);
  result = (bool)(arg1)->TimeMarkOver(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_HasNpcFlag(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::HasNpcFlag",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::HasNpcFlag",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::HasNpcFlag",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestSystem::HasNpcFlag",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestSystem::HasNpcFlag",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_HasNpcFlag",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  result = (bool)(arg1)->HasNpcFlag(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_GetNpcFlag(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  UInt32 result;
  
  SWIG_check_num_args("CQuestSystem::GetNpcFlag",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::GetNpcFlag",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::GetNpcFlag",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestSystem::GetNpcFlag",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestSystem::GetNpcFlag",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_GetNpcFlag",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  result = (UInt32)(arg1)->GetNpcFlag(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_SetNpcFlag(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  UInt16 arg5 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::SetNpcFlag",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::SetNpcFlag",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::SetNpcFlag",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestSystem::SetNpcFlag",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestSystem::SetNpcFlag",4,"UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CQuestSystem::SetNpcFlag",5,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_SetNpcFlag",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UInt16)lua_tonumber(L, 5);
  result = (bool)(arg1)->SetNpcFlag(arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_RemoveNpcFlag(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt32 arg2 ;
  UInt32 arg3 ;
  UInt16 arg4 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::RemoveNpcFlag",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::RemoveNpcFlag",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::RemoveNpcFlag",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestSystem::RemoveNpcFlag",3,"UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CQuestSystem::RemoveNpcFlag",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_RemoveNpcFlag",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UInt16)lua_tonumber(L, 4);
  result = (bool)(arg1)->RemoveNpcFlag(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_CheckOverTime(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  
  SWIG_check_num_args("CQuestSystem::CheckOverTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::CheckOverTime",1,"CQuestSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_CheckOverTime",1,SWIGTYPE_p_CQuestSystem);
  }
  
  (arg1)->CheckOverTime();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_CheckAfterBattle(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt8 arg2 ;
  UInt32 arg3 ;
  UInt32Vector *arg4 = 0 ;
  
  SWIG_check_num_args("CQuestSystem::CheckAfterBattle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::CheckAfterBattle",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::CheckAfterBattle",2,"UInt8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CQuestSystem::CheckAfterBattle",3,"UInt32");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("CQuestSystem::CheckAfterBattle",4,"UInt32Vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_CheckAfterBattle",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt32)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_UInt32Vector,0))){
    SWIG_fail_ptr("CQuestSystem_CheckAfterBattle",4,SWIGTYPE_p_UInt32Vector);
  }
  
  (arg1)->CheckAfterBattle(arg2,arg3,(UInt32Vector const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_CheckAllTarget(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  
  SWIG_check_num_args("CQuestSystem::CheckAllTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::CheckAllTarget",1,"CQuestSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_CheckAllTarget",1,SWIGTYPE_p_CQuestSystem);
  }
  
  (arg1)->CheckAllTarget();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_CheckFinished(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  UInt32 arg3 = (UInt32) 0 ;
  UInt16 arg4 = (UInt16) 0 ;
  bool result;
  
  SWIG_check_num_args("CQuestSystem::CheckFinished",2,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::CheckFinished",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::CheckFinished",2,"UInt16");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("CQuestSystem::CheckFinished",3,"UInt32");
  if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("CQuestSystem::CheckFinished",4,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_CheckFinished",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
    arg3 = (UInt32)lua_tonumber(L, 3);
  }
  if(lua_gettop(L)>=4){
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
    arg4 = (UInt16)lua_tonumber(L, 4);
  }
  result = (bool)(arg1)->CheckFinished(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_RaiseUpdate(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  
  SWIG_check_num_args("CQuestSystem::RaiseUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::RaiseUpdate",1,"CQuestSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_RaiseUpdate",1,SWIGTYPE_p_CQuestSystem);
  }
  
  (arg1)->RaiseUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_CancelUpdate(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  
  SWIG_check_num_args("CQuestSystem::CancelUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::CancelUpdate",1,"CQuestSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_CancelUpdate",1,SWIGTYPE_p_CQuestSystem);
  }
  
  (arg1)->CancelUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_Update(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  
  SWIG_check_num_args("CQuestSystem::Update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::Update",1,"CQuestSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_Update",1,SWIGTYPE_p_CQuestSystem);
  }
  
  (arg1)->Update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_GetUserType(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CQuestSystem::GetUserType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::GetUserType",1,"CQuestSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_GetUserType",1,SWIGTYPE_p_CQuestSystem);
  }
  
  result = (UInt8)CQuestSystem_GetUserType(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQuestSystem_GetTypeName(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *arg1 = (CQuestSystem *) 0 ;
  UInt16 arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CQuestSystem::GetTypeName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQuestSystem::GetTypeName",1,"CQuestSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQuestSystem::GetTypeName",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQuestSystem,0))){
    SWIG_fail_ptr("CQuestSystem_GetTypeName",1,SWIGTYPE_p_CQuestSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  result = (char *)CQuestSystem_GetTypeName(arg1,arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CQuestSystem(lua_State* L) {
  int SWIG_arg = 0;
  CQuestSystem *result = 0 ;
  
  SWIG_check_num_args("CQuestSystem::CQuestSystem",0,0)
  result = (CQuestSystem *)new CQuestSystem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CQuestSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CQuestSystem(void *obj) {
CQuestSystem *arg1 = (CQuestSystem *) obj;
delete arg1;
}
static swig_lua_method swig_CQuestSystem_methods[] = {
    {"RemoveEncounterByNpcID", _wrap_CQuestSystem_RemoveEncounterByNpcID}, 
    {"RemoveEncounter", _wrap_CQuestSystem_RemoveEncounter}, 
    {"RemoveFollower", _wrap_CQuestSystem_RemoveFollower}, 
    {"HasQuest", _wrap_CQuestSystem_HasQuest}, 
    {"GetQuest", _wrap_CQuestSystem_GetQuest}, 
    {"AddQuest", _wrap_CQuestSystem_AddQuest}, 
    {"RemoveQuest", _wrap_CQuestSystem_RemoveQuest}, 
    {"GetEachQuest", _wrap_CQuestSystem_GetEachQuest}, 
    {"GetQuestCount", _wrap_CQuestSystem_GetQuestCount}, 
    {"HasType", _wrap_CQuestSystem_HasType}, 
    {"GetType", _wrap_CQuestSystem_GetType}, 
    {"AddType", _wrap_CQuestSystem_AddType}, 
    {"RemoveType", _wrap_CQuestSystem_RemoveType}, 
    {"ClearTotalRound", _wrap_CQuestSystem_ClearTotalRound}, 
    {"CheckTotalRound", _wrap_CQuestSystem_CheckTotalRound}, 
    {"SetRoundInfo", _wrap_CQuestSystem_SetRoundInfo}, 
    {"GetEachType", _wrap_CQuestSystem_GetEachType}, 
    {"GetTypeCount", _wrap_CQuestSystem_GetTypeCount}, 
    {"HasFlag", _wrap_CQuestSystem_HasFlag}, 
    {"GetFlag", _wrap_CQuestSystem_GetFlag}, 
    {"SetFlag", _wrap_CQuestSystem_SetFlag}, 
    {"RemoveFlag", _wrap_CQuestSystem_RemoveFlag}, 
    {"GetTimeMark", _wrap_CQuestSystem_GetTimeMark}, 
    {"SetTimeMark", _wrap_CQuestSystem_SetTimeMark}, 
    {"RemoveTimeMark", _wrap_CQuestSystem_RemoveTimeMark}, 
    {"TimeMarkOver", _wrap_CQuestSystem_TimeMarkOver}, 
    {"HasNpcFlag", _wrap_CQuestSystem_HasNpcFlag}, 
    {"GetNpcFlag", _wrap_CQuestSystem_GetNpcFlag}, 
    {"SetNpcFlag", _wrap_CQuestSystem_SetNpcFlag}, 
    {"RemoveNpcFlag", _wrap_CQuestSystem_RemoveNpcFlag}, 
    {"CheckOverTime", _wrap_CQuestSystem_CheckOverTime}, 
    {"CheckAfterBattle", _wrap_CQuestSystem_CheckAfterBattle}, 
    {"CheckAllTarget", _wrap_CQuestSystem_CheckAllTarget}, 
    {"CheckFinished", _wrap_CQuestSystem_CheckFinished}, 
    {"RaiseUpdate", _wrap_CQuestSystem_RaiseUpdate}, 
    {"CancelUpdate", _wrap_CQuestSystem_CancelUpdate}, 
    {"Update", _wrap_CQuestSystem_Update}, 
    {"GetUserType", _wrap_CQuestSystem_GetUserType}, 
    {"GetTypeName", _wrap_CQuestSystem_GetTypeName}, 
    {0,0}
};
static swig_lua_attribute swig_CQuestSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CQuestSystem_bases[] = {0};
static const char *swig_CQuestSystem_base_names[] = {0};
static swig_lua_class _wrap_class_CQuestSystem = { "CQuestSystem", &SWIGTYPE_p_CQuestSystem,_wrap_new_CQuestSystem, swig_delete_CQuestSystem, swig_CQuestSystem_methods, swig_CQuestSystem_attributes, swig_CQuestSystem_bases, swig_CQuestSystem_base_names };

static int _wrap_CWorldEvent_GetEventId(lua_State* L) {
  int SWIG_arg = 0;
  CWorldEvent *arg1 = (CWorldEvent *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CWorldEvent::GetEventId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CWorldEvent::GetEventId",1,"CWorldEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CWorldEvent,0))){
    SWIG_fail_ptr("CWorldEvent_GetEventId",1,SWIGTYPE_p_CWorldEvent);
  }
  
  result = (UInt16)(arg1)->GetEventId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CWorldEvent_GetEventType(lua_State* L) {
  int SWIG_arg = 0;
  CWorldEvent *arg1 = (CWorldEvent *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CWorldEvent::GetEventType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CWorldEvent::GetEventType",1,"CWorldEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CWorldEvent,0))){
    SWIG_fail_ptr("CWorldEvent_GetEventType",1,SWIGTYPE_p_CWorldEvent);
  }
  
  result = (UInt8)(arg1)->GetEventType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CWorldEvent_GetMapType(lua_State* L) {
  int SWIG_arg = 0;
  CWorldEvent *arg1 = (CWorldEvent *) 0 ;
  UInt8 result;
  
  SWIG_check_num_args("CWorldEvent::GetMapType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CWorldEvent::GetMapType",1,"CWorldEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CWorldEvent,0))){
    SWIG_fail_ptr("CWorldEvent_GetMapType",1,SWIGTYPE_p_CWorldEvent);
  }
  
  result = (UInt8)(arg1)->GetMapType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CWorldEvent_GetEndTime(lua_State* L) {
  int SWIG_arg = 0;
  CWorldEvent *arg1 = (CWorldEvent *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CWorldEvent::GetEndTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CWorldEvent::GetEndTime",1,"CWorldEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CWorldEvent,0))){
    SWIG_fail_ptr("CWorldEvent_GetEndTime",1,SWIGTYPE_p_CWorldEvent);
  }
  
  result = (UInt32)(arg1)->GetEndTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CWorldEvent_GetTimeLeft(lua_State* L) {
  int SWIG_arg = 0;
  CWorldEvent *arg1 = (CWorldEvent *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CWorldEvent::GetTimeLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CWorldEvent::GetTimeLeft",1,"CWorldEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CWorldEvent,0))){
    SWIG_fail_ptr("CWorldEvent_GetTimeLeft",1,SWIGTYPE_p_CWorldEvent);
  }
  
  result = (UInt32)(arg1)->GetTimeLeft();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CWorldEvent_GetNpcLiveTime(lua_State* L) {
  int SWIG_arg = 0;
  CWorldEvent *arg1 = (CWorldEvent *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CWorldEvent::GetNpcLiveTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CWorldEvent::GetNpcLiveTime",1,"CWorldEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CWorldEvent,0))){
    SWIG_fail_ptr("CWorldEvent_GetNpcLiveTime",1,SWIGTYPE_p_CWorldEvent);
  }
  
  result = (UInt32)(arg1)->GetNpcLiveTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CWorldEvent_GetScript(lua_State* L) {
  int SWIG_arg = 0;
  CWorldEvent *arg1 = (CWorldEvent *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CWorldEvent::GetScript",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CWorldEvent::GetScript",1,"CWorldEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CWorldEvent,0))){
    SWIG_fail_ptr("CWorldEvent_GetScript",1,SWIGTYPE_p_CWorldEvent);
  }
  
  result = (char *)CWorldEvent_GetScript(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CWorldEvent(lua_State* L) {
  int SWIG_arg = 0;
  CWorldEvent *result = 0 ;
  
  SWIG_check_num_args("CWorldEvent::CWorldEvent",0,0)
  result = (CWorldEvent *)new CWorldEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CWorldEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CWorldEvent(void *obj) {
CWorldEvent *arg1 = (CWorldEvent *) obj;
delete arg1;
}
static swig_lua_method swig_CWorldEvent_methods[] = {
    {"GetEventId", _wrap_CWorldEvent_GetEventId}, 
    {"GetEventType", _wrap_CWorldEvent_GetEventType}, 
    {"GetMapType", _wrap_CWorldEvent_GetMapType}, 
    {"GetEndTime", _wrap_CWorldEvent_GetEndTime}, 
    {"GetTimeLeft", _wrap_CWorldEvent_GetTimeLeft}, 
    {"GetNpcLiveTime", _wrap_CWorldEvent_GetNpcLiveTime}, 
    {"GetScript", _wrap_CWorldEvent_GetScript}, 
    {0,0}
};
static swig_lua_attribute swig_CWorldEvent_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CWorldEvent_bases[] = {0};
static const char *swig_CWorldEvent_base_names[] = {0};
static swig_lua_class _wrap_class_CWorldEvent = { "CWorldEvent", &SWIGTYPE_p_CWorldEvent,_wrap_new_CWorldEvent, swig_delete_CWorldEvent, swig_CWorldEvent_methods, swig_CWorldEvent_attributes, swig_CWorldEvent_bases, swig_CWorldEvent_base_names };

static int _wrap_CInstance_GetInstId(lua_State* L) {
  int SWIG_arg = 0;
  CInstance *arg1 = (CInstance *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CInstance::GetInstId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CInstance::GetInstId",1,"CInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CInstance,0))){
    SWIG_fail_ptr("CInstance_GetInstId",1,SWIGTYPE_p_CInstance);
  }
  
  result = (UInt16)(arg1)->GetInstId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CInstance_GetOwnerId(lua_State* L) {
  int SWIG_arg = 0;
  CInstance *arg1 = (CInstance *) 0 ;
  UInt32 result;
  
  SWIG_check_num_args("CInstance::GetOwnerId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CInstance::GetOwnerId",1,"CInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CInstance,0))){
    SWIG_fail_ptr("CInstance_GetOwnerId",1,SWIGTYPE_p_CInstance);
  }
  
  result = (UInt32)(arg1)->GetOwnerId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CInstance_Reset(lua_State* L) {
  int SWIG_arg = 0;
  CInstance *arg1 = (CInstance *) 0 ;
  
  SWIG_check_num_args("CInstance::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CInstance::Reset",1,"CInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CInstance,0))){
    SWIG_fail_ptr("CInstance_Reset",1,SWIGTYPE_p_CInstance);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CInstance_Close(lua_State* L) {
  int SWIG_arg = 0;
  CInstance *arg1 = (CInstance *) 0 ;
  
  SWIG_check_num_args("CInstance::Close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CInstance::Close",1,"CInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CInstance,0))){
    SWIG_fail_ptr("CInstance_Close",1,SWIGTYPE_p_CInstance);
  }
  
  (arg1)->Close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CInstance_OnEnter(lua_State* L) {
  int SWIG_arg = 0;
  CInstance *arg1 = (CInstance *) 0 ;
  CCharacter *arg2 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CInstance::OnEnter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CInstance::OnEnter",1,"CInstance *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CInstance::OnEnter",2,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CInstance,0))){
    SWIG_fail_ptr("CInstance_OnEnter",1,SWIGTYPE_p_CInstance);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CInstance_OnEnter",2,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->OnEnter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CInstance_OnLeave(lua_State* L) {
  int SWIG_arg = 0;
  CInstance *arg1 = (CInstance *) 0 ;
  CCharacter *arg2 = (CCharacter *) 0 ;
  
  SWIG_check_num_args("CInstance::OnLeave",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CInstance::OnLeave",1,"CInstance *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CInstance::OnLeave",2,"CCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CInstance,0))){
    SWIG_fail_ptr("CInstance_OnLeave",1,SWIGTYPE_p_CInstance);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CCharacter,0))){
    SWIG_fail_ptr("CInstance_OnLeave",2,SWIGTYPE_p_CCharacter);
  }
  
  (arg1)->OnLeave(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CInstance_AddMap(lua_State* L) {
  int SWIG_arg = 0;
  CInstance *arg1 = (CInstance *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CInstance::AddMap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CInstance::AddMap",1,"CInstance *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CInstance::AddMap",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CInstance,0))){
    SWIG_fail_ptr("CInstance_AddMap",1,SWIGTYPE_p_CInstance);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->AddMap(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CInstance_GetPlayerLimit(lua_State* L) {
  int SWIG_arg = 0;
  CInstance *arg1 = (CInstance *) 0 ;
  UInt16 result;
  
  SWIG_check_num_args("CInstance::GetPlayerLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CInstance::GetPlayerLimit",1,"CInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CInstance,0))){
    SWIG_fail_ptr("CInstance_GetPlayerLimit",1,SWIGTYPE_p_CInstance);
  }
  
  result = (UInt16)(arg1)->GetPlayerLimit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CInstance_SetPlayerLimit(lua_State* L) {
  int SWIG_arg = 0;
  CInstance *arg1 = (CInstance *) 0 ;
  UInt16 arg2 ;
  
  SWIG_check_num_args("CInstance::SetPlayerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CInstance::SetPlayerLimit",1,"CInstance *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CInstance::SetPlayerLimit",2,"UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CInstance,0))){
    SWIG_fail_ptr("CInstance_SetPlayerLimit",1,SWIGTYPE_p_CInstance);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt16)lua_tonumber(L, 2);
  (arg1)->SetPlayerLimit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CInstance_SetLasting(lua_State* L) {
  int SWIG_arg = 0;
  CInstance *arg1 = (CInstance *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("CInstance::SetLasting",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CInstance::SetLasting",1,"CInstance *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CInstance::SetLasting",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CInstance,0))){
    SWIG_fail_ptr("CInstance_SetLasting",1,SWIGTYPE_p_CInstance);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetLasting(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CInstance_CreateInstance(lua_State* L) {
  int SWIG_arg = 0;
  UInt16 arg1 ;
  UInt32 arg2 ;
  UInt8 arg3 ;
  CInstance *result = 0 ;
  
  SWIG_check_num_args("CInstance::CreateInstance",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CInstance::CreateInstance",1,"UInt16");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CInstance::CreateInstance",2,"UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CInstance::CreateInstance",3,"UInt8");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt16)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UInt8)lua_tonumber(L, 3);
  result = (CInstance *)CInstance::CreateInstance(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CInstance,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CInstance_DestroyInstance(lua_State* L) {
  int SWIG_arg = 0;
  UInt16 arg1 ;
  UInt32 arg2 ;
  
  SWIG_check_num_args("CInstance::DestroyInstance",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CInstance::DestroyInstance",1,"UInt16");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CInstance::DestroyInstance",2,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt16)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  CInstance::DestroyInstance(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CInstance_GetInstance(lua_State* L) {
  int SWIG_arg = 0;
  UInt16 arg1 ;
  UInt32 arg2 ;
  CInstance *result = 0 ;
  
  SWIG_check_num_args("CInstance::GetInstance",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CInstance::GetInstance",1,"UInt16");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CInstance::GetInstance",2,"UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UInt16)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UInt32)lua_tonumber(L, 2);
  result = (CInstance *)CInstance::GetInstance(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CInstance,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CInstance(lua_State* L) {
  int SWIG_arg = 0;
  CInstance *result = 0 ;
  
  SWIG_check_num_args("CInstance::CInstance",0,0)
  result = (CInstance *)new CInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CInstance,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CInstance(void *obj) {
CInstance *arg1 = (CInstance *) obj;
delete arg1;
}
static swig_lua_method swig_CInstance_methods[] = {
    {"GetInstId", _wrap_CInstance_GetInstId}, 
    {"GetOwnerId", _wrap_CInstance_GetOwnerId}, 
    {"Reset", _wrap_CInstance_Reset}, 
    {"Close", _wrap_CInstance_Close}, 
    {"OnEnter", _wrap_CInstance_OnEnter}, 
    {"OnLeave", _wrap_CInstance_OnLeave}, 
    {"AddMap", _wrap_CInstance_AddMap}, 
    {"GetPlayerLimit", _wrap_CInstance_GetPlayerLimit}, 
    {"SetPlayerLimit", _wrap_CInstance_SetPlayerLimit}, 
    {"SetLasting", _wrap_CInstance_SetLasting}, 
    {0,0}
};
static swig_lua_attribute swig_CInstance_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CInstance_bases[] = {0};
static const char *swig_CInstance_base_names[] = {0};
static swig_lua_class _wrap_class_CInstance = { "CInstance", &SWIGTYPE_p_CInstance,_wrap_new_CInstance, swig_delete_CInstance, swig_CInstance_methods, swig_CInstance_attributes, swig_CInstance_bases, swig_CInstance_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "HelloWorld", _wrap_HelloWorld},
    { "GetGameTime", _wrap_GetGameTime},
    { "GetServiceTime", _wrap_GetServiceTime},
    { "SetTempResult", _wrap_SetTempResult},
    { "GetTempResult", _wrap_GetTempResult},
    { "GetNpcName", _wrap_GetNpcName},
    { "GetMobName", _wrap_GetMobName},
    { "GetMapName", _wrap_GetMapName},
    { "GetItemName", _wrap_GetItemName},
    { "GetMap", _wrap_GetMap},
    { "ConvertANSII", _wrap_ConvertANSII},
    { "GetBuffData", _wrap_GetBuffData},
    { "GetRealDay",_wrap_GetRealDay},
    { "GetRealWDay",_wrap_GetRealWDay},
    { "GetRealMonth",_wrap_GetRealMonth},
    { "GetRealYear",_wrap_GetRealYear},
    { "GetRealHour",_wrap_GetRealHour},
    { "GetRealMinute",_wrap_GetRealMinute},
    { "GetGuildWarStatus", _wrap_GetGuildWarStatus},
    { "QuestionPrepare", _wrap_QuestionPrepare},
    { "QuestionStart", _wrap_QuestionStart},
    { "GuildWarPrepare", _wrap_GuildWarPrepare},
    { "GuildWarStart", _wrap_GuildWarStart},
    { "GuildWarEndContinue", _wrap_GuildWarEndContinue},
    { "GuildWarEndAll", _wrap_GuildWarEndAll},
    { "GuildWarGenGroup", _wrap_GuildWarGenGroup},
    { "GuildWarSendGroupRumor", _wrap_GuildWarSendGroupRumor},
    { "GetItemCsvData", _wrap_GetItemCsvData},
    { "GetWorldEvent", _wrap_GetWorldEvent},
    { "LogMessage", _wrap_LogMessage},
    { "IncognitoPKStart", _wrap_IncognitoPKStart},
    { "IncognitoPKEnd", _wrap_IncognitoPKEnd},
    { "InIncognitoPkLstOne", _wrap_InIncognitoPkLstOne},
    { "InIncognitoPkLstTwo", _wrap_InIncognitoPkLstTwo},
    { "isIncognitoPkTimeOver", _wrap_isIncognitoPkTimeOver},
    { "RandomIncognitoPKBox", _wrap_RandomIncognitoPKBox},
    { "CInstance_CreateInstance", _wrap_CInstance_CreateInstance},
    { "CInstance_DestroyInstance", _wrap_CInstance_DestroyInstance},
    { "CInstance_GetInstance", _wrap_CInstance_GetInstance},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"CHAR_ST_NORM", (long) CHAR_ST_NORM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CHAR_ST_DEAD", (long) CHAR_ST_DEAD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CHAR_ST_DIZZY", (long) CHAR_ST_DIZZY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CHAR_ST_SLEEP", (long) CHAR_ST_SLEEP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CHAR_ST_SURRENDER", (long) CHAR_ST_SURRENDER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CHAR_ST_ESCAPED", (long) CHAR_ST_ESCAPED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CHAR_ST_BACKUP", (long) CHAR_ST_BACKUP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CHAR_ST_CATCHED", (long) CHAR_ST_CATCHED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CHAR_ST_EXCHANGE", (long) CHAR_ST_EXCHANGE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATTLE_SPECIAL_END_TIMEOUT", (long) BATTLE_SPECIAL_END_TIMEOUT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_IDLE", (long) BATCMD_IDLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_ATTACK", (long) BATCMD_ATTACK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_SKILL", (long) BATCMD_SKILL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_SPECIAL", (long) BATCMD_SPECIAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_ITEM", (long) BATCMD_ITEM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_DEFEND", (long) BATCMD_DEFEND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_FRIEND", (long) BATCMD_FRIEND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_PROTECT", (long) BATCMD_PROTECT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_CATCH", (long) BATCMD_CATCH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_AUTO", (long) BATCMD_AUTO, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_HELP", (long) BATCMD_HELP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_ESCAPE", (long) BATCMD_ESCAPE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_WINE", (long) BATCMD_WINE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MAX_ACTION_CMD", (long) MAX_ACTION_CMD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_REPEAT", (long) BATCMD_REPEAT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_CRIT_ATTACK", (long) BATCMD_CRIT_ATTACK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_ESCAPE_FAIL", (long) BATCMD_ESCAPE_FAIL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_MISS", (long) BATCMD_MISS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_NORM_HIT", (long) BATCMD_NORM_HIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_CRIT_HIT", (long) BATCMD_CRIT_HIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_BREAK_HIT", (long) BATCMD_BREAK_HIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_DEFEND_HIT", (long) BATCMD_DEFEND_HIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_PROTECT_HIT", (long) BATCMD_PROTECT_HIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_SKILL_HIT", (long) BATCMD_SKILL_HIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_SPECIAL_HIT", (long) BATCMD_SPECIAL_HIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_KNOCKBACK", (long) BATCMD_KNOCKBACK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_USED_ITEM", (long) BATCMD_USED_ITEM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_USED_SKILL", (long) BATCMD_USED_SKILL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_CATCHED", (long) BATCMD_CATCHED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_CATCHED_FAIL", (long) BATCMD_CATCHED_FAIL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_SHOW_FRIEND", (long) BATCMD_SHOW_FRIEND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_BUFF_EFFECT_HIT", (long) BATCMD_BUFF_EFFECT_HIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_COUNTER_ATTACK_HIT", (long) BATCMD_COUNTER_ATTACK_HIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_COUNTER_ATTACK_DEF_HIT", (long) BATCMD_COUNTER_ATTACK_DEF_HIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_CRIT_SKILL", (long) BATCMD_CRIT_SKILL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_DEFEND_CRIT_HIT", (long) BATCMD_DEFEND_CRIT_HIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATCMD_INVISIBLE", (long) BATCMD_INVISIBLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATIDX_TEAM", (long) BATIDX_TEAM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATIDX_TEAM0", (long) BATIDX_TEAM0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATIDX_TEAM1", (long) BATIDX_TEAM1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATIDX_ALL", (long) BATIDX_ALL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATIDX_INVALID", (long) BATIDX_INVALID, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_IDLE", (long) BATBLOCK_IDLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_ATTACK", (long) BATBLOCK_ATTACK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_SKILL", (long) BATBLOCK_SKILL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_SPECIAL", (long) BATBLOCK_SPECIAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_ITEM", (long) BATBLOCK_ITEM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_DEFEND", (long) BATBLOCK_DEFEND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_FRIEND", (long) BATBLOCK_FRIEND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_PROTECT", (long) BATBLOCK_PROTECT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_CATCH", (long) BATBLOCK_CATCH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_AUTO", (long) BATBLOCK_AUTO, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_HELP", (long) BATBLOCK_HELP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_ESCAPE", (long) BATBLOCK_ESCAPE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_WINE", (long) BATBLOCK_WINE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BATBLOCK_ALLCMD", (long) BATBLOCK_ALLCMD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BSEVENT_NONE", (long) BSEVENT_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BSEVENT_SURRENDER", (long) BSEVENT_SURRENDER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BSEVENT_ENDBATTLE", (long) BSEVENT_ENDBATTLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BSEVENT_SKIPTURN", (long) BSEVENT_SKIPTURN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"END_WIN", (long) END_WIN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"END_LOSE", (long) END_LOSE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"END_ESCAPED", (long) END_ESCAPED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"END_DRAW", (long) END_DRAW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"END_MONITOR", (long) END_MONITOR, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CCharacterTo_p_CMapActor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CMapActor *)  ((CCharacter *) x));
}
static void *_p_CMapNPCTo_p_CMapActor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CMapActor *)  ((CMapNPC *) x));
}
static void *_p_CBatMobTo_p_CBatActor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CBatActor *)  ((CBatMob *) x));
}
static void *_p_CBatCharacterTo_p_CBatActor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CBatActor *)  ((CBatCharacter *) x));
}
static swig_type_info _swigt__p_AttriStruct = {"_p_AttriStruct", "AttriStruct *", 0, 0, (void*)&_wrap_class_AttriStruct, 0};
static swig_type_info _swigt__p_AttriStruct2 = {"_p_AttriStruct2", "AttriStruct2 *", 0, 0, (void*)&_wrap_class_AttriStruct2, 0};
static swig_type_info _swigt__p_BYTE = {"_p_BYTE", "BYTE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BatActorLinkLst = {"_p_BatActorLinkLst", "BatActorLinkLst *", 0, 0, (void*)&_wrap_class_BatActorLinkLst, 0};
static swig_type_info _swigt__p_BuffData = {"_p_BuffData", "BuffData *", 0, 0, (void*)&_wrap_class_BuffData, 0};
static swig_type_info _swigt__p_CBatActor = {"_p_CBatActor", "CBatActor *", 0, 0, (void*)&_wrap_class_CBatActor, 0};
static swig_type_info _swigt__p_CBatCharacter = {"_p_CBatCharacter", "CBatCharacter *", 0, 0, (void*)&_wrap_class_CBatCharacter, 0};
static swig_type_info _swigt__p_CBatMob = {"_p_CBatMob", "CBatMob *", 0, 0, (void*)&_wrap_class_CBatMob, 0};
static swig_type_info _swigt__p_CBattle = {"_p_CBattle", "CBattle *", 0, 0, (void*)&_wrap_class_CBattle, 0};
static swig_type_info _swigt__p_CCharacter = {"_p_CCharacter", "CCharacter *", 0, 0, (void*)&_wrap_class_CCharacter, 0};
static swig_type_info _swigt__p_CGuild = {"_p_CGuild", "CGuild *", 0, 0, (void*)&_wrap_class_CGuild, 0};
static swig_type_info _swigt__p_CInstance = {"_p_CInstance", "CInstance *", 0, 0, (void*)&_wrap_class_CInstance, 0};
static swig_type_info _swigt__p_CItem = {"_p_CItem", "CItem *", 0, 0, (void*)&_wrap_class_CItem, 0};
static swig_type_info _swigt__p_CItemBag = {"_p_CItemBag", "CItemBag *", 0, 0, (void*)&_wrap_class_CItemBag, 0};
static swig_type_info _swigt__p_CMap = {"_p_CMap", "CMap *", 0, 0, (void*)&_wrap_class_CMap, 0};
static swig_type_info _swigt__p_CMapActor = {"_p_CMapActor", "CMapActor *", 0, 0, (void*)&_wrap_class_CMapActor, 0};
static swig_type_info _swigt__p_CMapNPC = {"_p_CMapNPC", "CMapNPC *", 0, 0, (void*)&_wrap_class_CMapNPC, 0};
static swig_type_info _swigt__p_CPartner = {"_p_CPartner", "CPartner *", 0, 0, (void*)&_wrap_class_CPartner, 0};
static swig_type_info _swigt__p_CPartnerGroup = {"_p_CPartnerGroup", "CPartnerGroup *", 0, 0, (void*)&_wrap_class_CPartnerGroup, 0};
static swig_type_info _swigt__p_CParty = {"_p_CParty", "CParty *", 0, 0, (void*)&_wrap_class_CParty, 0};
static swig_type_info _swigt__p_CPet = {"_p_CPet", "CPet *", 0, 0, (void*)&_wrap_class_CPet, 0};
static swig_type_info _swigt__p_CPetGroup = {"_p_CPetGroup", "CPetGroup *", 0, 0, (void*)&_wrap_class_CPetGroup, 0};
static swig_type_info _swigt__p_CQuestLog = {"_p_CQuestLog", "CQuestLog *", 0, 0, (void*)&_wrap_class_CQuestLog, 0};
static swig_type_info _swigt__p_CQuestSystem = {"_p_CQuestSystem", "CQuestSystem *", 0, 0, (void*)&_wrap_class_CQuestSystem, 0};
static swig_type_info _swigt__p_CQuestType = {"_p_CQuestType", "CQuestType *", 0, 0, (void*)&_wrap_class_CQuestType, 0};
static swig_type_info _swigt__p_CRelationSystem = {"_p_CRelationSystem", "CRelationSystem *", 0, 0, (void*)&_wrap_class_CRelationSystem, 0};
static swig_type_info _swigt__p_CScriptSystem = {"_p_CScriptSystem", "CScriptSystem *", 0, 0, (void*)&_wrap_class_CScriptSystem, 0};
static swig_type_info _swigt__p_CTrading = {"_p_CTrading", "CTrading *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CWorldEvent = {"_p_CWorldEvent", "CWorldEvent *", 0, 0, (void*)&_wrap_class_CWorldEvent, 0};
static swig_type_info _swigt__p_DWORD = {"_p_DWORD", "DWORD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ExtractedBuffData = {"_p_ExtractedBuffData", "ExtractedBuffData *", 0, 0, (void*)&_wrap_class_ExtractedBuffData, 0};
static swig_type_info _swigt__p_ItemData = {"_p_ItemData", "ItemData *", 0, 0, (void*)&_wrap_class_ItemData, 0};
static swig_type_info _swigt__p_RPCNetID = {"_p_RPCNetID", "RPCNetID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SkillData = {"_p_SkillData", "SkillData *", 0, 0, (void*)&_wrap_class_SkillData, 0};
static swig_type_info _swigt__p_StartCharData = {"_p_StartCharData", "StartCharData *", 0, 0, (void*)&_wrap_class_StartCharData, 0};
static swig_type_info _swigt__p_String = {"_p_String", "String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCHAR = {"_p_TCHAR", "TCHAR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UInt32Vector = {"_p_UInt32Vector", "UInt32Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_actorlist = {"_p_actorlist", "actorlist *", 0, 0, (void*)&_wrap_class_actorlist, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|Int32 *|Int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "Int16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|Int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|UInt8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "UInt32 *|unsigned int *|UInt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "UInt16 *|ClassID *|unsigned short *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AttriStruct,
  &_swigt__p_AttriStruct2,
  &_swigt__p_BYTE,
  &_swigt__p_BatActorLinkLst,
  &_swigt__p_BuffData,
  &_swigt__p_CBatActor,
  &_swigt__p_CBatCharacter,
  &_swigt__p_CBatMob,
  &_swigt__p_CBattle,
  &_swigt__p_CCharacter,
  &_swigt__p_CGuild,
  &_swigt__p_CInstance,
  &_swigt__p_CItem,
  &_swigt__p_CItemBag,
  &_swigt__p_CMap,
  &_swigt__p_CMapActor,
  &_swigt__p_CMapNPC,
  &_swigt__p_CPartner,
  &_swigt__p_CPartnerGroup,
  &_swigt__p_CParty,
  &_swigt__p_CPet,
  &_swigt__p_CPetGroup,
  &_swigt__p_CQuestLog,
  &_swigt__p_CQuestSystem,
  &_swigt__p_CQuestType,
  &_swigt__p_CRelationSystem,
  &_swigt__p_CScriptSystem,
  &_swigt__p_CTrading,
  &_swigt__p_CWorldEvent,
  &_swigt__p_DWORD,
  &_swigt__p_ExtractedBuffData,
  &_swigt__p_ItemData,
  &_swigt__p_RPCNetID,
  &_swigt__p_SkillData,
  &_swigt__p_StartCharData,
  &_swigt__p_String,
  &_swigt__p_TCHAR,
  &_swigt__p_UInt32Vector,
  &_swigt__p_actorlist,
  &_swigt__p_int,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_AttriStruct[] = {  {&_swigt__p_AttriStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AttriStruct2[] = {  {&_swigt__p_AttriStruct2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BYTE[] = {  {&_swigt__p_BYTE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BatActorLinkLst[] = {  {&_swigt__p_BatActorLinkLst, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuffData[] = {  {&_swigt__p_BuffData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBatActor[] = {  {&_swigt__p_CBatMob, _p_CBatMobTo_p_CBatActor, 0, 0},  {&_swigt__p_CBatActor, 0, 0, 0},  {&_swigt__p_CBatCharacter, _p_CBatCharacterTo_p_CBatActor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBatCharacter[] = {  {&_swigt__p_CBatCharacter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBatMob[] = {  {&_swigt__p_CBatMob, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CBattle[] = {  {&_swigt__p_CBattle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CCharacter[] = {  {&_swigt__p_CCharacter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CGuild[] = {  {&_swigt__p_CGuild, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CInstance[] = {  {&_swigt__p_CInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CItem[] = {  {&_swigt__p_CItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CItemBag[] = {  {&_swigt__p_CItemBag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CMap[] = {  {&_swigt__p_CMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CMapActor[] = {  {&_swigt__p_CMapActor, 0, 0, 0},  {&_swigt__p_CCharacter, _p_CCharacterTo_p_CMapActor, 0, 0},  {&_swigt__p_CMapNPC, _p_CMapNPCTo_p_CMapActor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CMapNPC[] = {  {&_swigt__p_CMapNPC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CPartner[] = {  {&_swigt__p_CPartner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CPartnerGroup[] = {  {&_swigt__p_CPartnerGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CParty[] = {  {&_swigt__p_CParty, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CPet[] = {  {&_swigt__p_CPet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CPetGroup[] = {  {&_swigt__p_CPetGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CQuestLog[] = {  {&_swigt__p_CQuestLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CQuestSystem[] = {  {&_swigt__p_CQuestSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CQuestType[] = {  {&_swigt__p_CQuestType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CRelationSystem[] = {  {&_swigt__p_CRelationSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CScriptSystem[] = {  {&_swigt__p_CScriptSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CTrading[] = {  {&_swigt__p_CTrading, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CWorldEvent[] = {  {&_swigt__p_CWorldEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DWORD[] = {  {&_swigt__p_DWORD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ExtractedBuffData[] = {  {&_swigt__p_ExtractedBuffData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ItemData[] = {  {&_swigt__p_ItemData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RPCNetID[] = {  {&_swigt__p_RPCNetID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SkillData[] = {  {&_swigt__p_SkillData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StartCharData[] = {  {&_swigt__p_StartCharData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_String[] = {  {&_swigt__p_String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCHAR[] = {  {&_swigt__p_TCHAR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UInt32Vector[] = {  {&_swigt__p_UInt32Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_actorlist[] = {  {&_swigt__p_actorlist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AttriStruct,
  _swigc__p_AttriStruct2,
  _swigc__p_BYTE,
  _swigc__p_BatActorLinkLst,
  _swigc__p_BuffData,
  _swigc__p_CBatActor,
  _swigc__p_CBatCharacter,
  _swigc__p_CBatMob,
  _swigc__p_CBattle,
  _swigc__p_CCharacter,
  _swigc__p_CGuild,
  _swigc__p_CInstance,
  _swigc__p_CItem,
  _swigc__p_CItemBag,
  _swigc__p_CMap,
  _swigc__p_CMapActor,
  _swigc__p_CMapNPC,
  _swigc__p_CPartner,
  _swigc__p_CPartnerGroup,
  _swigc__p_CParty,
  _swigc__p_CPet,
  _swigc__p_CPetGroup,
  _swigc__p_CQuestLog,
  _swigc__p_CQuestSystem,
  _swigc__p_CQuestType,
  _swigc__p_CRelationSystem,
  _swigc__p_CScriptSystem,
  _swigc__p_CTrading,
  _swigc__p_CWorldEvent,
  _swigc__p_DWORD,
  _swigc__p_ExtractedBuffData,
  _swigc__p_ItemData,
  _swigc__p_RPCNetID,
  _swigc__p_SkillData,
  _swigc__p_StartCharData,
  _swigc__p_String,
  _swigc__p_TCHAR,
  _swigc__p_UInt32Vector,
  _swigc__p_actorlist,
  _swigc__p_int,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

